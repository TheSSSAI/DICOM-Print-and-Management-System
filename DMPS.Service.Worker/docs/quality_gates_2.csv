"gate_name","gate_type","trigger_event","success_criteria","failure_action","responsible_team","automation_level","tools_used","measurement_frequency","escalation_procedure","historical_pass_rate","average_resolution_time","business_impact"
"Pull Request Gate","Static Analysis & Unit Test","Pull Request creation/update","100% of unit tests pass. Code coverage does not decrease. SonarQube quality gate passes (0 new bugs, 0 new vulnerabilities).","Block merge to main branch. Notify author.","Development Team","Fully Automated","GitHub Actions, xUnit, SonarQube","Every PR","Tech lead review for exceptions.","92","1.5","Prevents defects and code quality issues from entering the main codebase."
"Staging Deployment Gate","Integration & E2E","After deployment to Staging environment","100% of integration tests pass. 95% of critical path E2E tests pass. Smoke test passes.","Rollback deployment. Create P1 bug. Notify team.","QA Team / DevOps","Fully Automated","Azure DevOps Pipelines, xUnit, WinAppDriver","Every deployment to Staging","War room meeting for failures.","85","6","Ensures application is stable and core features work before manual/UAT testing."
"Release Candidate Gate","Security & Performance","Before tagging a release candidate","Automated security scan (OWASP ZAP) reports 0 critical/high vulnerabilities. Performance benchmarks are met. All P1/P2 bugs are closed. UAT is signed off.","Block release. Schedule emergency bug fixing.","QA Lead, Product Owner, Security Lead","Partially Automated","JMeter, OWASP ZAP, Jira","Per release cycle","Go/No-Go meeting with stakeholders.","98","24","Prevents the release of an insecure, non-performant, or buggy product."