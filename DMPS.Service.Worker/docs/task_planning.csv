Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Create Solution and Project Structure based on Clean Architecture","Scaffold the .NET 8 solution and all required C# projects (.csproj files) for the WPF Client, Windows Service, Core, Application, Infrastructure, and Persistence layers. Set up project references correctly.

**Acceptance Criteria:**
- Solution file and all project files are created and checked into source control.
- Projects target .NET 8 and C# 12.
- All project-to-project references are correctly configured.
- The entire solution compiles successfully without errors.","Task","Backlog","Critical","developer@project.com","pm@project.com","",6,"setup,architecture,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-001","",2024-01-01 09:00,2024-01-01 09:00,".NET CLI,Visual Studio"
"Configure .NET Generic Host and DI for the Windows Service","Implement the Program.cs entry point for the Windows Service using the .NET Generic Host builder. Configure dependency injection to register services and hosted services.

**Acceptance Criteria:**
- The Windows Service project can be built and run as a console application for debugging.
- The service correctly installs and starts via `sc.exe`.
- Services registered in the DI container can be resolved by IHostedService implementations.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.3,"architecture,di,service,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-001","TASK-001-001-001-01",2024-01-01 09:00,2024-01-01 09:00,".NET,C#,Dependency Injection"
"Configure .NET Generic Host and DI for the WPF Client","Adapt the .NET Generic Host pattern for the WPF application. The App.xaml.cs will be responsible for building the host, configuring services, and resolving the main application window from the DI container.

**Acceptance Criteria:**
- The WPF application starts successfully by running the host.
- The MainWindow is resolved and shown via the DI container.
- ViewModels and services can be injected into views and other services.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.7,"architecture,di,wpf,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-001","TASK-001-001-001-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,.NET,Dependency Injection"
"Integrate Serilog and Configure Sinks","Add Serilog to both the WPF and Service projects. Configure sinks to write structured logs to a rolling text file and the Windows Event Log. Integrate with the ILogger interface from Microsoft.Extensions.Logging.

**Acceptance Criteria:**
- Logs from both applications are written to a rolling log file in a configured directory.
- Error-level logs are successfully written to the Windows Event Log under a custom application source.
- Logging can be performed throughout the application by injecting `ILogger<T>`.","Task","Backlog","Critical","developer@project.com","pm@project.com","",6.3,"logging,serilog,observability,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-001","TASK-001-001-002-01,TASK-001-001-002-02",2024-01-01 09:00,2024-01-01 09:00,"Serilog,.NET"
"Implement PHI Redaction Filter for Serilog","Create a custom Serilog `IDestructuringPolicy` or `ILogEventFilter` to scan log messages and their properties for patterns matching PHI (e.g., Patient Name, Patient ID). The filter must mask or redact these values before the log event is written to any sink.

**Acceptance Criteria:**
- The filter is successfully applied to the Serilog logging pipeline.
- A log message like `Processing PatientID: 12345` appears in the output as `Processing PatientID: ***REDACTED***`.
- The filter has a negligible performance impact on logging.","Task","Backlog","Critical","developer@project.com","pm@project.com","",9,"security,hipaa,logging,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","This task is critical for HIPAA compliance. The logic must be flawless to prevent data leaks.","US-001","TASK-001-001-003-01",2024-01-01 09:00,2024-01-01 09:00,"Serilog,C#,Regex"
"Unit Test the PHI Redaction Filter","Write a comprehensive suite of xUnit tests for the redaction filter. Tests should cover various log message formats, structured properties, and edge cases to ensure PHI is always redacted correctly.

**Acceptance Criteria:**
- Unit test coverage for the filter is above 90%.
- Tests verify redaction of Patient Name, Patient ID, and other defined PII.
- Tests verify that non-PHI data is left unchanged.","Task","Backlog","Critical","qa@project.com","pm@project.com","",4.2,"security,testing,unit-test,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-001","TASK-001-001-003-02",2024-01-01 09:00,2024-01-01 09:00,"xUnit,C#"
"Design IMessageBus Interface and Message Contracts","Define a generic `IMessageBus` interface in a shared project to abstract messaging concepts (Publish, Subscribe). Define the C# record/class structures for the initial commands (e.g., `SubmitPrintJobCommand`).

**Acceptance Criteria:**
- The `IMessageBus` interface is defined and includes asynchronous `PublishAsync` and `SubscribeAsync` methods.
- Initial message contract classes/records are defined and immutable.
- Interface and contracts reside in a shared project accessible by both client and service.","Task","Backlog","Critical","developer@project.com","pm@project.com","",4.2,"ipc,rabbitmq,architecture,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-003","TASK-001-001-001-01",2024-01-01 09:00,2024-01-01 09:00,"C#,Software Architecture"
"Implement RabbitMQ Abstraction for Publishing and Connection Management","Create the `RabbitMqMessageBus` class that implements `IMessageBus`. Implement the connection logic to the RabbitMQ broker, including automatic retry/reconnect resiliency. Implement the `PublishAsync` method to serialize a message object to JSON and publish it to an exchange.

**Acceptance Criteria:**
- The service can successfully connect to a RabbitMQ broker upon startup.
- If the connection drops, the service attempts to reconnect automatically.
- The `PublishAsync` method correctly sends a JSON-serialized message to the specified exchange with persistence enabled.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12.7,"ipc,rabbitmq,infrastructure,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-003","TASK-001-002-004-01",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,C#,.NET"
"Implement RabbitMQ Abstraction for Consuming Messages","Implement the `SubscribeAsync` method in `RabbitMqMessageBus`. This method will set up a consumer on a specific queue. The logic must handle message deserialization, invoking a registered handler, and acknowledging (ack/nack) the message upon completion.

**Acceptance Criteria:**
- A consumer can be registered for a specific message type on a given queue.
- Incoming messages are correctly deserialized and passed to the handler.
- The handler's success or failure results in the message being ack'd or nack'd.
- The consumer runs as a long-running background task.","Task","Backlog","Critical","developer@project.com","pm@project.com","",10.5,"ipc,rabbitmq,infrastructure,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-003","TASK-001-002-004-02",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,C#,.NET"
"Implement RabbitMQ Topology Initializer Service","Create a hosted service (`IHostedService`) that runs on application startup. This service will use the RabbitMQ client to programmatically declare all required exchanges, durable queues, and the bindings for the Dead-Letter Exchange (DLX) and Dead-Letter Queue (DLQ).

**Acceptance Criteria:**
- When the Windows Service starts, it connects to RabbitMQ and creates the necessary topology if it doesn't exist.
- The main processing queues are declared as durable.
- The main queues are configured to route rejected messages to the declared DLX.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.3,"rabbitmq,infrastructure,setup,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-003","TASK-001-001-002-01,TASK-001-002-004-02",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,C#"
"Implement Named Pipe Server in the Windows Service","Create a hosted service that starts a `NamedPipeServerStream`. This server will listen for incoming client connections, read a simple string command (e.g., 'PING'), and write a string response (e.g., 'PONG'). It must handle multiple connections sequentially.

**Acceptance Criteria:**
- The server starts listening on a predefined pipe name when the service starts.
- It correctly receives a 'PING' message from a client.
- It correctly sends a 'PONG' response back to the client.
- The server disposes of client connections properly after each request.","Task","Backlog","Critical","developer@project.com","pm@project.com","",6.3,"ipc,named-pipes,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-003","TASK-001-001-002-01",2024-01-01 09:00,2024-01-01 09:00,"C#,.NET,Named Pipes"
"Implement Named Pipe Client in the WPF Application","Create a client class that can connect to the `NamedPipeServerStream`. The client should send the 'PING' command and wait for a 'PONG' response. Implement a short timeout on the connection and read operations to prevent the UI from hanging.

**Acceptance Criteria:**
- The client can successfully connect to the server pipe.
- It sends 'PING' and receives 'PONG'.
- If the server does not respond within a configurable timeout (e.g., 2 seconds), the client throws a TimeoutException.
- The client code is fully asynchronous using `async/await`.","Task","Backlog","Critical","developer@project.com","pm@project.com","",6,"ipc,named-pipes,EPIC-001","Sprint 1","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-003","TASK-001-001-002-02,TASK-001-002-006-01",2024-01-01 09:00,2024-01-01 09:00,"C#,.NET,Named Pipes"
"Define User and System Entities for EF Core","Create the C# entity classes for User, Role, PasswordHistory, UserPreference, SystemSetting, PacsConfiguration, AutoRoutingRule, and PrintJob. Define all properties, data types, and primary/foreign keys as attributes.

**Acceptance Criteria:**
- All specified entities are created as C# classes.
- Properties match the types defined in the ERD (e.g., Guid, string, DateTime).
- Relationships are indicated with navigation properties and foreign key attributes.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8,"database,ef-core,entities,EPIC-002","Sprint 1","Database and Persistence Layer","Dicom Management and Printing System (DMPS)","","","US-002","TASK-001-001-001-01",2024-01-01 09:00,2024-01-01 09:00,"EF Core,C#"
"Define DICOM and Clinical Entities for EF Core","Create the C# entity classes for Patient, Study, Series, Image, PresentationState, and HangingProtocol. Define all properties and relationships, including the self-referencing 'working copy' relationship on the Study entity.

**Acceptance Criteria:**
- All specified entities are created as C# classes.
- Properties match the types defined in the ERD.
- The Study-to-Study self-referencing foreign key is correctly defined.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.3,"database,ef-core,entities,EPIC-002","Sprint 1","Database and Persistence Layer","Dicom Management and Printing System (DMPS)","","","US-002","TASK-001-001-001-01",2024-01-01 09:00,2024-01-01 09:00,"EF Core,C#"
"Implement ApplicationDbContext and Configure Relationships","Create the `ApplicationDbContext` class inheriting from `DbContext`. Add `DbSet` properties for all entities. Use the `OnModelCreating` method and Fluent API to configure all relationships, unique constraints (e.g., username), indexes, and cascade delete behaviors as defined in the ERD.

**Acceptance Criteria:**
- The `ApplicationDbContext` is created and contains all `DbSet`s.
- All relationships (one-to-many, one-to-one) are correctly configured.
- Unique constraints and indexes are defined for performance and data integrity.
- The EF Core model is valid and can generate a snapshot.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12,"database,ef-core,EPIC-002","Sprint 1","Database and Persistence Layer","Dicom Management and Printing System (DMPS)","","","US-002","TASK-002-003-007-01,TASK-002-003-007-02",2024-01-01 09:00,2024-01-01 09:00,"EF Core,C#"
"Generate and Validate Initial EF Core Migration","Use the `dotnet ef migrations add InitialCreate` command to generate the first database migration from the configured `DbContext`. Review the generated migration code for correctness. Apply the migration to a local PostgreSQL database to verify that the schema is created as expected.

**Acceptance Criteria:**
- The `dotnet ef migrations add` command completes successfully.
- The generated migration C# files accurately represent the entity model.
- The `dotnet ef database update` command successfully creates the full schema in a blank PostgreSQL database without errors.","Task","Backlog","Critical","developer@project.com","pm@project.com","",4.5,"database,ef-core,migrations,EPIC-002","Sprint 1","Database and Persistence Layer","Dicom Management and Printing System (DMPS)","","","US-002","TASK-002-003-007-03",2024-01-01 09:00,2024-01-01 09:00,"EF Core CLI,PostgreSQL"
"Implement Generic Repository Pattern","Create a generic `IRepository<T>` interface with common data access methods (e.g., `GetByIdAsync`, `AddAsync`, `UpdateAsync`, `DeleteAsync`, `ListAllAsync`). Create a generic `EfRepository<T>` implementation that uses the `ApplicationDbContext` to implement these methods.

**Acceptance Criteria:**
- The generic interface and implementation are created.
- All methods are asynchronous.
- The implementation correctly uses the `DbContext` to perform CRUD operations.","Task","Backlog","Critical","developer@project.com","pm@project.com","",6,"architecture,database,repository-pattern,EPIC-002","Sprint 1","Database and Persistence Layer","Dicom Management and Printing System (DMPS)","","","US-002","TASK-002-003-007-03",2024-01-01 09:00,2024-01-01 09:00,"C#,EF Core,Software Design Patterns"
"Implement Specific Repositories for Key Aggregates","Create specific repository interfaces (e.g., `IUserRepository`) that inherit from `IRepository<User>` and add any custom query methods needed (e.g., `GetByUsernameAsync`). Implement the corresponding classes that inherit from `EfRepository<User>`.

**Acceptance Criteria:**
- Specific repository interfaces and implementations are created for `User` and `Study` aggregates.
- Custom query methods are implemented correctly using LINQ and EF Core.
- The application layer depends only on the specific repository interfaces, not the generic one or the implementations.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8,"database,repository-pattern,EPIC-002","Sprint 1","Database and Persistence Layer","Dicom Management and Printing System (DMPS)","","","US-002","TASK-002-003-010-01",2024-01-01 09:00,2024-01-01 09:00,"C#,EF Core"
"Create CI Pipeline for Build and Unit Testing","Set up a CI pipeline using GitHub Actions or Azure DevOps. The pipeline definition (YAML) will specify the .NET SDK version, restore dependencies, build the solution in Release configuration, and run all xUnit tests discovered in the solution.

**Acceptance Criteria:**
- The pipeline is triggered on every push to the `main` and `develop` branches.
- A failed build or a single failed unit test causes the entire pipeline to fail.
- Test results are published and visible in the pipeline summary.","Task","Backlog","Critical","devops@project.com","pm@project.com","",8.3,"ci-cd,devops,testing,EPIC-007","Sprint 1","Deployment and Installation","Dicom Management and Printing System (DMPS)","","","US-020","TASK-001-001-001-01",2024-01-01 09:00,2024-01-01 09:00,"CI/CD,YAML"
"Write Integration Tests for RabbitMQ Abstraction using Testcontainers","Create a suite of integration tests for the `RabbitMqMessageBus`. Use Testcontainers to spin up a RabbitMQ instance programmatically, allowing tests to verify publishing, consuming, and connection resiliency in a realistic environment.

**Acceptance Criteria:**
- Tests run successfully in the CI pipeline.
- A test verifies that a published message is successfully consumed.
- A test verifies that the publisher can recover from the container being restarted.","Task","Backlog","High","qa@project.com","pm@project.com","",12,"testing,integration-test,rabbitmq,EPIC-001","Sprint 2","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-003","TASK-001-002-004-03",2024-01-01 09:00,2024-01-01 09:00,"xUnit,Testcontainers,Docker"
"Write Integration Tests for DLX/DLQ Routing","Using Testcontainers, write an integration test that publishes a message, consumes and rejects it with `requeue=false`, and then asserts that the message is present in the DLQ.

**Acceptance Criteria:**
- The test successfully verifies the dead-lettering mechanism.
- The test cleans up all queues and exchanges after execution.","Task","Backlog","High","qa@project.com","pm@project.com","",6.3,"testing,integration-test,rabbitmq,EPIC-001","Sprint 2","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","","US-003","TASK-001-002-005-01,TASK-001-002-004-04",2024-01-01 09:00,2024-01-01 09:00,"xUnit,Testcontainers,RabbitMQ"
"Implement Security for the Named Pipe Server","Modify the `NamedPipeServerStream` creation to include a `PipeSecurity` object. Configure an Access Control List (ACL) that grants access only to the group of authenticated users, preventing other processes on the machine from accessing the pipe.

**Acceptance Criteria:**
- The pipe is created with a specific ACL.
- A process running as the logged-in user can connect successfully.
- A process running as a different, non-admin user is denied access.
- The implementation works on standard user accounts (non-admin).","Task","Backlog","High","developer@project.com","pm@project.com","",8.7,"security,ipc,named-pipes,EPIC-001","Sprint 2","Core Architecture, Configuration, and Setup","Dicom Management and Printing System (DMPS)","","Risk R-TEC-006: Working with Windows ACLs is complex and hard to test.","US-003","TASK-001-002-006-01",2024-01-01 09:00,2024-01-01 09:00,"C#,.NET Security"
"Configure DbContext to Enforce TLS Connection","Configure the Npgsql EF Core provider to require a secure connection. This involves setting the `SSL Mode=Require` property in the connection string and ensuring the application can connect to a PostgreSQL instance configured for TLS.

**Acceptance Criteria:**
- The connection string in `appsettings.json` is configured for TLS.
- The application fails to connect if the PostgreSQL server does not support TLS.
- The application successfully connects to a TLS-enabled PostgreSQL server.","Task","Backlog","Critical","developer@project.com","pm@project.com","",4.3,"security,database,tls,EPIC-002","Sprint 2","Database and Persistence Layer","Dicom Management and Printing System (DMPS)","","","US-002","TASK-002-003-007-03",2024-01-01 09:00,2024-01-01 09:00,"PostgreSQL,EF Core,TLS"
"Implement EF Core Integration for pgcrypto","Use EF Core's capabilities (e.g., Value Converters) to automatically invoke PostgreSQL's `pgp_sym_encrypt` and `pgp_sym_decrypt` functions for all properties marked as containing PHI. The encryption key must be managed securely and not hardcoded.

**Acceptance Criteria:**
- A custom Value Converter or similar mechanism is implemented.
- Properties like `Patient.PatientName` are configured to use this converter.
- When data is saved, the generated SQL `INSERT`/`UPDATE` statement includes a call to `pgp_sym_encrypt`.
- When data is queried, the generated `SELECT` statement includes a call to `pgp_sym_decrypt`.","Task","Backlog","Critical","developer@project.com","pm@project.com","",14.7,"security,database,encryption,pgcrypto,EPIC-002","Sprint 2","Database and Persistence Layer","Dicom Management and Printing System (DMPS)","","Risk R-SEC-001: Incorrect implementation leads to major compliance failure.","US-002","TASK-002-003-007-03",2024-01-01 09:00,2024-01-01 09:00,"EF Core,PostgreSQL,C#,Security"
"Write Integration Tests for Data Encryption","Create integration tests that save an entity containing PHI, then use a raw SQL query to read the encrypted value from the database and assert that it is not the plaintext value. A second test will use the repository to read the entity back and assert that the property is correctly decrypted.

**Acceptance Criteria:**
- Test successfully verifies that data is stored in an encrypted format.
- Test successfully verifies that data is transparently decrypted when read via EF Core.
- Tests use Testcontainers with a PostgreSQL instance that has the `pgcrypto` extension enabled.","Task","Backlog","Critical","qa@project.com","pm@project.com","",10.3,"testing,security,encryption,EPIC-002","Sprint 2","Database and Persistence Layer","Dicom Management and Printing System (DMPS)","","","US-002","TASK-002-003-009-02",2024-01-01 09:00,2024-01-01 09:00,"xUnit,Testcontainers,EF Core"
"Implement BCrypt Password Hashing Utility","Create a service `IPasswordHasher` and its implementation `BCryptPasswordHasher`. This service will expose two methods: `HashPassword(string password)` and `VerifyPassword(string password, string hash)`. Use a standard, well-vetted NuGet package for the BCrypt implementation.

**Acceptance Criteria:**
- The `HashPassword` method returns a valid BCrypt hash string.
- The `VerifyPassword` method returns true for a correct password and false for an incorrect one.
- The service is registered in the DI container.","Task","Backlog","Critical","developer@project.com","pm@project.com","",4,"security,authentication,bcrypt,EPIC-003","Sprint 2","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","","US-004","TASK-001-001-002-01",2024-01-01 09:00,2024-01-01 09:00,"C#,Security,BCrypt"
"Implement Authentication Service Logic","Create an `IAuthenticationService` and its implementation. The service will have a `LoginAsync(username, password)` method that uses the `IUserRepository` to fetch the user and the `IPasswordHasher` to verify the password. It should return a result object indicating success/failure and the user's role.

**Acceptance Criteria:**
- Service correctly validates credentials for an existing user with the right password.
- Service returns a failure result for a non-existent user.
- Service returns a failure result for an existing user with the wrong password.
- Service handles disabled accounts correctly.","Task","Backlog","Critical","developer@project.com","pm@project.com","",6.3,"authentication,backend,EPIC-003","Sprint 2","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","","US-004","TASK-002-003-010-02,TASK-003-004-011-01",2024-01-01 09:00,2024-01-01 09:00,"C#"
"Develop WPF Login View and ViewModel","Create the `LoginView.xaml` using Material Design components, including fields for username, a `PasswordBox` for the password, and a login button. Implement `LoginViewModel.cs` with data-bound properties, an `ICommand` for the login action, and logic to call the `IAuthenticationService`.

**Acceptance Criteria:**
- The LoginView is displayed on application startup.
- Username and password can be entered.
- Password characters are masked.
- Clicking the login button executes the command in the ViewModel.
- The ViewModel displays a generic error message upon login failure.
- Upon successful login, the ViewModel signals the application to navigate to the main view.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12,"authentication,wpf,ui,EPIC-003","Sprint 2","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","","US-004","TASK-001-001-002-02,TASK-003-004-012-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#"
"Implement User Session Service and Authorization Context","Create a singleton `IUserSessionService` to store the current user's identity (ID, username, role) after a successful login. Implement a basic authorization mechanism (e.g., helper class or attached properties in WPF) that UI elements can use to check the current user's role and control visibility/enabled state.

**Acceptance Criteria:**
- After login, the `IUserSessionService` is populated with the correct user data.
- A WPF button with `auth:RoleVisibility=""Admin""` is hidden if a Technician logs in.
- The same button is visible if an Admin logs in.
- The session service provides a method to log out, which clears the user context.","Task","Backlog","Critical","developer@project.com","pm@project.com","",10.3,"security,authorization,architecture,EPIC-003","Sprint 2","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","This is a cross-cutting concern that will affect numerous components.","US-005","TASK-003-004-012-02",2024-01-01 09:00,2024-01-01 09:00,"C#,WPF,Software Architecture"
"Implement fo-dicom C-STORE SCP Provider","Create a class that inherits from `DicomService` and overrides the `OnCStoreRequest` method from the `fo-dicom` library. This class will handle the logic for receiving DICOM instances and saving them to a temporary file path.

**Acceptance Criteria:**
- The class correctly handles incoming C-STORE requests.
- It successfully saves the received DICOM SOP instance to a temporary file on disk.
- It returns a success status (0x0000) to the SCU upon successful storage.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12,"dicom,pacs,fo-dicom,EPIC-004","Sprint 2","DICOM Functionality","Dicom Management and Printing System (DMPS)","","","US-009","",2024-01-01 09:00,2024-01-01 09:00,"fo-dicom,C#,DICOM"
"Develop DICOM SCP Listener Hosted Service","Create an `IHostedService` in the Windows Service project that uses `DicomServer.Create<T>` from `fo-dicom` to start the SCP listener on a configurable port. This service will manage the lifecycle of the DICOM server.

**Acceptance Criteria:**
- The service starts the DICOM listener on the port specified in configuration.
- The service stops the listener gracefully when the application shuts down.
- The service is registered in the DI container and starts automatically.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.5,"dicom,pacs,service,EPIC-004","Sprint 2","DICOM Functionality","Dicom Management and Printing System (DMPS)","","","US-009","TASK-001-001-002-01,TASK-004-006-018-01",2024-01-01 09:00,2024-01-01 09:00,"fo-dicom,C#,Windows Services"
"Modify C-STORE SCP to Publish to RabbitMQ","Update the `CStoreProvider` to, after saving a file, parse the DICOM file to extract key metadata. It will then construct a `DicomStudyReceived` command object and publish it to RabbitMQ using the `IMessageBus`.

**Acceptance Criteria:**
- The C-STORE operation completes after the file is saved and the message is published.
- A message containing patient/study/series UIDs and other key metadata is sent to the message bus.
- The C-STORE response to the SCU is not blocked by database operations.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12.3,"dicom,rabbitmq,architecture,EPIC-004","Sprint 2","DICOM Functionality","Dicom Management and Printing System (DMPS)","","Risk R-TEC-002: This task introduces operational complexity.","US-009","TASK-004-006-018-01,TASK-001-002-004-02",2024-01-01 09:00,2024-01-01 09:00,"fo-dicom,RabbitMQ,C#"
"Spike: DirectX Setup with Vortice.Windows in a WPF Control","Create a proof-of-concept to validate the core technical approach. The goal is to set up a D3D11 device, swap chain, and render a simple primitive (e.g., a colored triangle) inside a custom WPF control using DirectX interop.

**Acceptance Criteria:**
- A DirectX scene is successfully rendered within the bounds of a WPF control.
- The application remains stable and does not crash on window resize or close.
- The PoC is documented with findings on performance and complexity.","Task","Backlog","Critical","developer@project.com","pm@project.com","",17.3,"graphics,directx,spike,risk,EPIC-004","Sprint 2","DICOM Functionality","Dicom Management and Printing System (DMPS)","","Risk R-TEC-001: This is the highest technical risk task in the project. The success of this spike dictates the entire rendering strategy.","US-011","",2024-01-01 09:00,2024-01-01 09:00,"WPF,DirectX,Vortice.Windows,C#"
"Integrate MSIX Packaging into the CI Pipeline","Add a stage to the CI pipeline that runs after the build and test stage. This stage will build the MSIX packaging project (`.wapproj`) to generate the `.msix` file.

**Acceptance Criteria:**
- The pipeline successfully builds the packaging project.
- An unsigned `.msix` file is created as an artifact.","Task","Backlog","High","devops@project.com","pm@project.com","",6.3,"ci-cd,devops,msix,EPIC-007","Sprint 2","Deployment and Installation","Dicom Management and Printing System (DMPS)","","","US-020","TASK-007-011-032-01,TASK-007-011-034-01",2024-01-01 09:00,2024-01-01 09:00,"CI/CD,YAML,MSIX"
"Implement User Inactivity Monitoring Service","Create a service that uses low-level Windows hooks (P/Invoke `GetLastInputInfo`) to monitor system-wide user activity. The service will maintain a timer that is reset on user activity. If the timer elapses (e.g., 15 minutes), it will raise an event to signal that the session should be locked.

**Acceptance Criteria:**
- The service correctly detects keyboard and mouse input.
- The inactivity timer is accurately reset on user input.
- The `OnInactive` event is raised after the configured period of inactivity.
- The service has a minimal performance impact.","Task","Backlog","Critical","developer@project.com","pm@project.com","",11,"security,session-management,EPIC-003","Sprint 3","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","Risk R-TEC-004: P/Invoke can be fragile and hard to debug.","US-006","TASK-001-001-002-02",2024-01-01 09:00,2024-01-01 09:00,"C#,P/Invoke"
"Develop Session Lock View, ViewModel, and Unlock Logic","Create the `LockScreenView.xaml` as a modal overlay. Implement the `LockScreenViewModel` to handle the password input and unlock command. The unlock command will use the `IAuthenticationService` to verify the password of the currently logged-in user (from `IUserSessionService`).

**Acceptance Criteria:**
- The lock screen is displayed modally, covering the entire application.
- Entering the correct password for the locked user dismisses the lock screen.
- Entering an incorrect password displays an error and keeps the session locked.
- The application state is preserved behind the lock screen.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.5,"security,session-management,ui,EPIC-003","Sprint 3","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","","US-006","TASK-003-004-014-01,TASK-003-004-013-01,TASK-003-004-012-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#"
"Develop User Management View and ViewModel","Create the main `UserManagementView.xaml` accessible from the admin area. It should display a list of users from the database. Implement the `UserManagementViewModel` to fetch the list of users and provide commands for Add, Edit, and Delete actions.

**Acceptance Criteria:**
- View is only accessible to Administrators.
- View displays a data grid with all system users.
- ViewModel successfully loads users from a `IUserService` or repository.
- Buttons for user management actions are present.","Task","Backlog","High","developer@project.com","pm@project.com","",10,"admin,user-management,ui,EPIC-003","Sprint 3","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","","US-007","TASK-003-004-013-01,TASK-002-003-010-02",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement 'Create User' Service Logic","Create a `UserService` method `CreateUserAsync`. This method will validate the input (e.g., unique username), generate a secure temporary password, hash it using `IPasswordHasher`, and create the new user record in the database with a 'force password change' flag set. The action must be logged to the audit trail within the same transaction.

**Acceptance Criteria:**
- Method rejects requests for usernames that already exist.
- A new user is successfully created in the database.
- The user record has the `isTemporaryPassword` flag set to true.
- An audit log entry for 'User Created' is created in the same transaction.
- The plaintext temporary password is returned to the caller.","Task","Backlog","High","developer@project.com","pm@project.com","",12,"admin,user-management,backend,EPIC-003","Sprint 3","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","Risk R-TEC-005: Transactional integrity between user creation and audit logging is critical.","US-007","TASK-002-003-010-02,TASK-003-004-011-01,TASK-006-010-031-01",2024-01-01 09:00,2024-01-01 09:00,"C#,EF Core"
"Implement DICOM Ingestion Consumer","Create a new `IHostedService` that subscribes to the `DicomStudyReceived` message queue. The consumer will handle the message by using the repositories to write the study metadata to the PostgreSQL database and then moving the DICOM file from temporary to permanent storage. The entire operation must be idempotent.

**Acceptance Criteria:**
- The consumer processes messages from the ingestion queue.
- Study metadata is correctly inserted or updated in the database.
- The DICOM file is moved to the final, structured directory path.
- If the database write fails, the message is nack'd and sent to the DLQ after retries.
- If the file move fails, the message is nack'd and the database transaction is rolled back.","Task","Backlog","Critical","developer@project.com","pm@project.com","",16.7,"dicom,rabbitmq,backend,EPIC-004","Sprint 3","DICOM Functionality","Dicom Management and Printing System (DMPS)","","Risk R-TEC-002: This is a critical component for data integrity. Idempotency and error handling must be perfect.","US-009","TASK-004-006-019-01,TASK-002-003-010-02",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,EF Core,C#"
"Implement DICOM Pixel Data to GPU Texture Loading","Develop the logic to take raw pixel data from a `fo-dicom` DicomImage object and efficiently upload it to a D3D11 texture on the GPU. This must handle different pixel formats (e.g., 8-bit, 16-bit monochrome) and update the texture without re-creating it when scrolling through a series.

**Acceptance Criteria:**
- A 16-bit monochrome DICOM image's pixel data can be successfully loaded into a GPU texture.
- The texture can be updated with the next frame's data from a multi-frame series.
- Memory is managed correctly, releasing old texture resources.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12.7,"graphics,directx,dicom,EPIC-004","Sprint 3","DICOM Functionality","Dicom Management and Printing System (DMPS)","","Depends on the successful outcome of the DirectX spike (TASK-004-007-021-01).","US-011","TASK-004-007-021-01",2024-01-01 09:00,2024-01-01 09:00,"DirectX,fo-dicom,C#"
"Develop HLSL Pixel Shader for Window/Level and VOI LUT","Write a High-Level Shading Language (HLSL) pixel shader that takes the raw pixel value from the texture, applies the Modality LUT, VOI LUT (window/level), and Presentation LUT to transform it into an 8-bit grayscale value for display. The shader will receive WW/WL and other parameters from the C# code via a constant buffer.

**Acceptance Criteria:**
- The shader correctly applies the linear window/level transformation.
- The shader is compiled and loaded by the C# application.
- Window/level values can be passed from C# to the shader and updated in real-time.","Task","Backlog","Critical","developer@project.com","pm@project.com","",14.7,"graphics,directx,shader,EPIC-004","Sprint 3","DICOM Functionality","Dicom Management and Printing System (DMPS)","","Risk R-TEC-001: Shader programming requires specialized skills.","US-011","TASK-004-007-021-02",2024-01-01 09:00,2024-01-01 09:00,"HLSL,DirectX,C#"
"Develop Viewer UI Shell and ViewModel","Create the `MainViewerView.xaml` which will host the `DicomViewerControl`. Add toolbars and buttons for all the required manipulation tools (Zoom, Pan, WW/L, Rotate, etc.). Implement the `MainViewerViewModel` to manage the state of the viewer, load studies, and handle the commands from the UI.

**Acceptance Criteria:**
- The view contains the viewer control and toolbars.
- The ViewModel can load a DICOM study and pass the active image to the viewer control.
- Toolbar buttons are wired to commands in the ViewModel.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12,"wpf,ui,dicom-viewer,EPIC-004","Sprint 3","DICOM Functionality","Dicom Management and Printing System (DMPS)","","","US-011","TASK-004-007-021-03",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement Zoom, Pan, and Rotate Logic","Implement the logic for the zoom, pan, and rotation tools. This involves capturing mouse input (drag, scroll wheel) in the viewer control and transforming the view matrix that is passed to the vertex shader in the rendering pipeline. This will manipulate the rendered image without changing the underlying texture.

**Acceptance Criteria:**
- Mouse scroll wheel zooms in and out on the image, centered on the cursor.
- Right-mouse drag pans the image.
- Toolbar buttons rotate the image in 90-degree increments.
- All transformations are smooth and interactive.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12.7,"graphics,dicom-viewer,interaction,EPIC-004","Sprint 3","DICOM Functionality","Dicom Management and Printing System (DMPS)","","","US-011","TASK-004-007-022-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,DirectX,Linear Algebra"
"Implement Interactive Window/Level Tool","Implement the interactive window/level tool. This involves capturing left-mouse drag events. Dragging horizontally will adjust the window width, and dragging vertically will adjust the window level. These new values must be passed to the pixel shader's constant buffer on each mouse move event to provide real-time visual feedback.

**Acceptance Criteria:**
- Dragging the mouse left-to-right and up-down adjusts WW/WL.
- The image updates fluidly during the drag operation.
- The current WW/WL values are displayed in the UI.
- WW/WL presets (e.g., 'Lung', 'Bone') can be selected from a dropdown and are applied correctly.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.5,"graphics,dicom-viewer,interaction,EPIC-004","Sprint 3","DICOM Functionality","Dicom Management and Printing System (DMPS)","","","US-011","TASK-004-007-021-03,TASK-004-007-022-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,DirectX"
"Develop PACS Query View and ViewModel","Create a `PacsQueryView.xaml` in the WPF client. This view will provide fields for search criteria (Patient ID, Study Date, etc.) and a data grid to display results. The `PacsQueryViewModel` will handle the user input and orchestrate the search.

**Acceptance Criteria:**
- The view allows users to enter search criteria.
- A 'Search' button triggers a command in the ViewModel.
- A data grid is bound to a collection that will hold the search results.
- The UI displays a progress indicator while the search is in progress.","Task","Backlog","High","developer@project.com","pm@project.com","",10.3,"dicom,pacs,ui,EPIC-004","Sprint 3","DICOM Functionality","Dicom Management and Printing System (DMPS)","","","US-010","TASK-003-004-013-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement DICOM C-FIND and C-MOVE SCU Service","Create a `DicomScuService` that uses `fo-dicom` to act as a Service Class User (SCU). Implement a `FindAsync` method that constructs and sends a `DicomCFindRequest`. Implement a `MoveAsync` method that sends a `DicomCMoveRequest`, specifying the local application's AE Title as the destination.

**Acceptance Criteria:**
- The `FindAsync` method successfully queries a remote PACS and returns a list of results.
- The `MoveAsync` method successfully initiates a C-MOVE operation.
- All network operations are asynchronous and report progress or errors.
- The service correctly handles various response statuses from the PACS.","Task","Backlog","High","developer@project.com","pm@project.com","",16.7,"dicom,pacs,fo-dicom,EPIC-004","Sprint 3","DICOM Functionality","Dicom Management and Printing System (DMPS)","","Risk R-EXT-001: Depends on stability of external PACS systems.","US-010","TASK-004-006-018-02",2024-01-01 09:00,2024-01-01 09:00,"fo-dicom,C#,DICOM"
"Develop 'Add User' Dialog View and ViewModel","Create a modal dialog `AddUserDialog.xaml` and its ViewModel. The view will contain fields for username and a role selector. The ViewModel will call the `UserService.CreateUserAsync` method and display the returned temporary password to the administrator upon success.

**Acceptance Criteria:**
- Dialog opens from the User Management view.
- Admin can enter a username and select a role.
- Upon successful creation, a success message is shown with the temporary password.
- If creation fails (e.g., duplicate username), an error message is shown.","Task","Backlog","High","developer@project.com","pm@project.com","",8.3,"admin,user-management,ui,EPIC-003","Sprint 4","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","","US-007","TASK-003-005-015-01,TASK-003-005-016-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Develop Password Policy Settings UI","Create a new view in the administration area, `PasswordPolicySettingsView.xaml`, for managing password policies. The UI will have controls for setting minimum length, complexity flags (uppercase, number, etc.), expiration days, and history count. The ViewModel will load and save these settings.

**Acceptance Criteria:**
- View is accessible to Admins.
- View correctly displays current policy settings.
- Admin can modify and save the settings.
- A success notification is shown on save.","Task","Backlog","High","developer@project.com","pm@project.com","",8,"security,admin,ui,EPIC-003","Sprint 4","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","","US-008","TASK-003-004-013-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement Password Policy Service and Validator","Create a `PasswordPolicyService` to read policy settings from the `SystemSetting` table. Create a `PasswordPolicyValidator` that uses this service to enforce the configured rules against a given password string. The validator should return specific error messages for each rule violation.

**Acceptance Criteria:**
- The service correctly loads all policy settings from the database.
- The validator correctly identifies passwords that violate length, complexity, and history rules.
- The validator is used during any password change/reset operation.","Task","Backlog","High","developer@project.com","pm@project.com","",12,"security,admin,backend,EPIC-003","Sprint 4","User Authentication, Authorization, and Management","Dicom Management and Printing System (DMPS)","","","US-008","TASK-002-003-010-02",2024-01-01 09:00,2024-01-01 09:00,"C#,EF Core"
"Develop Print Preview View and ViewModel","Create the `PrintPreviewView.xaml` as a modal window. Implement a canvas-based area to represent the page. Add controls for selecting layout templates, page orientation, margins. The ViewModel will manage the state of the print document.

**Acceptance Criteria:**
- The view provides a WYSIWYG preview of the printed page.
- Users can select from a list of predefined layouts (e.g., '2x2 on A4').
- The preview updates instantly when layout or page settings are changed.","Task","Backlog","High","developer@project.com","pm@project.com","",16.7,"printing,ui,wpf,EPIC-005","Sprint 4","Printing, PDF Export, and Emailing","Dicom Management and Printing System (DMPS)","","","US-013","",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement Drag-and-Drop Image Rearrangement in Print Preview","Add drag-and-drop functionality to the print preview layout. Users should be able to drag image thumbnails from a source list into the layout grid, or drag images between cells within the grid.

**Acceptance Criteria:**
- Users can drag an image from a list and drop it onto a cell in the layout.
- Users can swap the position of two images by dragging one onto the other.
- The ViewModel's data structure correctly reflects the changes.","Task","Backlog","High","developer@project.com","pm@project.com","",10.3,"printing,ui,wpf,EPIC-005","Sprint 4","Printing, PDF Export, and Emailing","Dicom Management and Printing System (DMPS)","","","US-013","TASK-005-008-024-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement Asynchronous Print Job Submission Logic","In the Print Preview, implement the 'Print' command. This command will first use the `NamedPipeClient` to check the service status. If the service is running, it will serialize the `PrintPreviewViewModel`'s state into a `SubmitPrintJobCommand` object and publish it to RabbitMQ.

**Acceptance Criteria:**
- The 'Print' button is disabled if the Named Pipe status check fails.
- Clicking 'Print' successfully publishes a message to the `print_jobs` queue.
- The UI remains responsive and shows a non-blocking 'Job submitted' notification.
- The print job message is marked as persistent.","Task","Backlog","High","developer@project.com","pm@project.com","",8.3,"printing,ipc,rabbitmq,EPIC-005","Sprint 4","Printing, PDF Export, and Emailing","Dicom Management and Printing System (DMPS)","","","US-013","TASK-001-002-004-02,TASK-001-002-006-02,TASK-005-008-024-01",2024-01-01 09:00,2024-01-01 09:00,"C#,RabbitMQ,Named Pipes"
"Implement Print Job Consumer in Windows Service","Create an `IHostedService` that consumes messages from the `print_jobs` queue. This consumer will deserialize the command, generate a `PrintDocument` object, render the DICOM images and layout onto it, and spool it to the specified Windows printer.

**Acceptance Criteria:**
- The consumer successfully processes a message from the queue.
- A print job is created in the Windows print spooler.
- The consumer can list available Windows printers.
- Errors (e.g., printer offline) are handled gracefully and the message is nack'd.","Task","Backlog","High","developer@project.com","pm@project.com","",14.3,"printing,backend,service,EPIC-005","Sprint 4","Printing, PDF Export, and Emailing","Dicom Management and Printing System (DMPS)","","","US-013","TASK-005-008-025-01",2024-01-01 09:00,2024-01-01 09:00,"C#,RabbitMQ,.NET Printing API"
"Implement 'Export to PDF' Asynchronous Job Submission","Add an 'Export to PDF' button and associated logic to the `PrintPreviewViewModel`. This will be similar to the print submission: it will prompt for a file name, create a `GeneratePdfCommand` message with the layout details and output path, and publish it to a dedicated RabbitMQ queue.

**Acceptance Criteria:**
- The UI allows the user to specify an output file path and an optional password.
- A `GeneratePdfCommand` message is published to the `pdf_jobs` queue.
- The UI remains responsive after submission.","Task","Backlog","Medium","developer@project.com","pm@project.com","",6,"pdf,ui,rabbitmq,EPIC-005","Sprint 4","Printing, PDF Export, and Emailing","Dicom Management and Printing System (DMPS)","","","US-015","TASK-005-008-024-01,TASK-001-002-004-02",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,RabbitMQ"
"Implement PDF Generation Consumer using QuestPDF","Create an `IHostedService` that consumes messages from the `pdf_jobs` queue. The consumer will use the QuestPDF library to construct the document based on the layout in the message. It must handle image rendering, text overlays, and apply AES-256 encryption if a password is provided.

**Acceptance Criteria:**
- The consumer processes a message from the queue.
- A PDF file is successfully generated and saved to the specified path.
- If a password was provided, the resulting PDF is encrypted.
- The process handles file system errors (e.g., path not found) gracefully.","Task","Backlog","Medium","developer@project.com","pm@project.com","",12.3,"pdf,backend,questpdf,EPIC-005","Sprint 4","Printing, PDF Export, and Emailing","Dicom Management and Printing System (DMPS)","","","US-015","TASK-005-008-027-01",2024-01-01 09:00,2024-01-01 09:00,"C#,QuestPDF,RabbitMQ"
"Implement PDF/A-3 Compliance and Metadata Embedding","Extend the PDF generation logic to ensure compliance with the PDF/A-3 standard. Implement functionality to embed the source DICOM metadata into the PDF file as an associated file, a key feature of PDF/A-3.

**Acceptance Criteria:**
- The generated PDF passes validation against a PDF/A-3 compliance checker.
- The PDF contains the embedded DICOM metadata, accessible via a compatible PDF reader.","Task","Backlog","Medium","developer@project.com","pm@project.com","",14.7,"pdf,compliance,backend,EPIC-005","Sprint 4","Printing, PDF Export, and Emailing","Dicom Management and Printing System (DMPS)","","Adhering to strict standards like PDF/A is complex and requires meticulous attention to detail.","US-015","TASK-005-008-027-02",2024-01-01 09:00,2024-01-01 09:00,"C#,QuestPDF,PDF/A"
"Develop PACS Configuration View and ViewModel","Create the `PacsConfigurationView.xaml` and its ViewModel. The UI will feature a data grid for existing PACS entries and a form (or dialog) for adding/editing entries (AE Title, IP, Port). A 'Verify' button will be included for each entry.

**Acceptance Criteria:**
- View is accessible only to Admins.
- View correctly displays PACS configurations from the database.
- The add/edit form allows input of all required fields.
- Save, Delete, and Verify actions are wired to ViewModel commands.","Task","Backlog","High","developer@project.com","pm@project.com","",10.3,"admin,pacs,ui,EPIC-006","Sprint 4","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","","US-016","TASK-003-004-013-01,TASK-002-003-010-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement C-ECHO Verification Logic","Extend the `DicomScuService` to include a `VerifyAsync` or `CEchoAsync` method. This method will take PACS configuration details, create a `DicomCEchoRequest`, send it, and return a boolean indicating success based on the response from the remote PACS.

**Acceptance Criteria:**
- The method successfully sends a C-ECHO request.
- It returns `true` for a successful response.
- It returns `false` and logs the error for a failed response or timeout.
- The method is called by the 'Verify' command in the `PacsConfigurationViewModel`.","Task","Backlog","High","developer@project.com","pm@project.com","",8.3,"admin,pacs,dicom,EPIC-006","Sprint 4","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","","US-016","TASK-004-006-020-02",2024-01-01 09:00,2024-01-01 09:00,"fo-dicom,C#,DICOM"
"Implement Audit Service and Logging Mechanism","Create an `IAuditService` and implementation that provides a method like `LogEventAsync(userId, eventType, details)`. This service will be responsible for creating `AuditLog` entities and saving them to the database. Ensure that calls to this service are wrapped in the same DB transaction as the action being audited.

**Acceptance Criteria:**
- The service can successfully write an audit log entry to the database.
- The mechanism is designed to be used within an existing `DbContext` transaction.
- The service is registered for DI.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.5,"auditing,security,architecture,EPIC-006","Sprint 4","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","Risk R-TEC-005: This service must correctly participate in transactions initiated by other services.","US-014","TASK-002-003-010-01",2024-01-01 09:00,2024-01-01 09:00,"C#,EF Core,Software Architecture"
"Develop Audit Trail Viewer UI and ViewModel","Create the `AuditTrailView.xaml` with controls for date range filtering and a data grid to display log entries. Implement the `AuditTrailViewModel` to handle fetching the data, applying filters, and managing pagination to handle large datasets efficiently.

**Acceptance Criteria:**
- View is accessible only to Admins.
- The data grid displays audit logs, including user, event type, timestamp, and details.
- Filtering by date range updates the grid content.
- Pagination controls are present and functional if the dataset is large.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12.7,"auditing,security,ui,EPIC-006","Sprint 4","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","Risk R-QLT-002: Efficient filtering and pagination for large log tables is required.","US-014","TASK-006-010-031-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,EF Core"
"Implement Annotation and Measurement Drawing Tools","Develop the UI logic for drawing shapes (lines, arrows, text boxes) on an overlay canvas on top of the DICOM image. Implement measurement logic that converts pixel coordinates to real-world units (mm) using the Pixel Spacing tag from the DICOM metadata.

**Acceptance Criteria:**
- A user can select a 'line' tool and draw a line on the image.
- As the line is drawn, its length in mm is displayed.
- A user can select a 'text' tool and place a text box.
- All drawn objects can be selected, moved, and deleted.","Task","Backlog","Medium","developer@project.com","pm@project.com","",16.7,"dicom-viewer,annotations,ui,EPIC-004","Sprint 5","DICOM Functionality","Dicom Management and Printing System (DMPS)","","","US-012","TASK-004-007-022-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement DICOM GSPS Creation Service","Create a service that takes a collection of annotation objects (lines, text, etc.) and uses `fo-dicom` to construct a valid DICOM Grayscale Softcopy Presentation State (GSPS) object. This involves creating the necessary modules and sequences to represent the graphical annotations according to the DICOM standard.

**Acceptance Criteria:**
- The service can create a GSPS object from a list of annotations.
- The created object is a valid DICOM file and can be saved to disk.
- The GSPS file contains correct references to the original images it annotates.","Task","Backlog","Medium","developer@project.com","pm@project.com","",25,"dicom,gsps,annotations,EPIC-004","Sprint 5","DICOM Functionality","Dicom Management and Printing System (DMPS)","","Risk R-QLT-001: The GSPS specification is highly complex and difficult to implement correctly.","US-012","TASK-004-007-023-01",2024-01-01 09:00,2024-01-01 09:00,"fo-dicom,DICOM,C#"
"Implement GSPS Parsing and Rendering","Extend the viewer to detect if GSPS objects exist for a series. If so, parse the GSPS file to extract the graphical annotation data and render the annotations on the overlay canvas. This is the inverse of the creation service.

**Acceptance Criteria:**
- When loading a study, the viewer checks for associated GSPS files.
- If a GSPS is found, its contents are parsed into annotation objects.
- The annotations are correctly drawn on the image overlay.
- The rendering respects the coordinate system defined in the GSPS.","Task","Backlog","Medium","developer@project.com","pm@project.com","",16.7,"dicom,gsps,annotations,EPIC-004","Sprint 5","DICOM Functionality","Dicom Management and Printing System (DMPS)","","Risk R-QLT-001: Parsing GSPS objects is also highly complex.","US-012","TASK-004-007-023-01,TASK-004-007-023-02",2024-01-01 09:00,2024-01-01 09:00,"fo-dicom,DICOM,WPF"
"Integration Test for GSPS Round-Trip","Create an automated test that creates a set of annotations, calls the service to generate a GSPS file, saves it, then calls the parsing logic to read the file back, and finally asserts that the parsed annotation objects are identical to the original ones.

**Acceptance Criteria:**
- The test successfully completes the create-save-load-verify cycle.
- The test covers different annotation types (line, text).
- The generated GSPS file is validated using a DICOM validation tool as part of the test.","Task","Backlog","Medium","qa@project.com","pm@project.com","",12.7,"testing,integration-test,gsps,EPIC-004","Sprint 5","DICOM Functionality","Dicom Management and Printing System (DMPS)","","","US-012","TASK-004-007-023-03",2024-01-01 09:00,2024-01-01 09:00,"xUnit,fo-dicom"
"Develop Data Retention Policy Settings UI","Create a `DataRetentionView.xaml` and ViewModel for the admin area. The UI will allow an administrator to enable/disable the auto-purge feature and configure the retention period in years.

**Acceptance Criteria:**
- View is accessible only to Admins.
- View displays the current retention settings.
- Admin can update and save the settings, which are persisted to the `SystemSetting` table.","Task","Backlog","Medium","developer@project.com","pm@project.com","",6,"admin,data-retention,ui,EPIC-006","Sprint 5","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","","US-017","TASK-003-004-013-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement Scheduled Data Purge Hosted Service","Create an `IHostedService` in the Windows Service that runs on a periodic timer (e.g., once every 24 hours). This service will check if the policy is enabled, read the retention period, query the database for studies older than that period, and delete them.

**Acceptance Criteria:**
- The service runs on its configured schedule.
- It correctly identifies studies eligible for deletion based on the policy.
- The service does nothing if the policy is disabled.","Task","Backlog","Medium","developer@project.com","pm@project.com","",10.5,"admin,data-retention,backend,EPIC-006","Sprint 5","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","","US-017","TASK-001-001-002-01",2024-01-01 09:00,2024-01-01 09:00,"C#,EF Core,Windows Services"
"Implement Deletion Logic for Studies and Files with Auditing","Implement the core logic that performs the deletion. For each study to be purged, this logic must delete the database records (Study, Series, Images, etc.) and the corresponding DICOM files from the file system. Each deletion must be recorded in the audit trail within the same transaction.

**Acceptance Criteria:**
- All database records related to the study are deleted.
- All physical files for the study are deleted from storage.
- A 'Data Purged' event is logged to the audit trail for each study deleted.
- The operation is resilient to errors (e.g., file not found).","Task","Backlog","Medium","developer@project.com","pm@project.com","",12.5,"admin,data-retention,backend,EPIC-006","Sprint 5","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","Permanently deleting data is a high-risk operation.","US-017","TASK-006-009-029-02,TASK-006-010-031-01",2024-01-01 09:00,2024-01-01 09:00,"C#,EF Core"
"Implement System Health Monitoring Hosted Service","In the Windows Service, create an `IHostedService` that periodically polls the status of critical components: its own state, connectivity to PostgreSQL (e.g., run a `SELECT 1` query), connectivity to RabbitMQ (`IConnection.IsOpen`), and available disk space at the DICOM storage path. The service will cache these health statuses in a thread-safe object.

**Acceptance Criteria:**
- The service runs on a timer (e.g., every 30 seconds).
- It accurately determines the status of DB, MQ, and disk space.
- The results are stored in an in-memory cache.
- Polling operations have timeouts and handle exceptions gracefully.","Task","Backlog","Medium","developer@project.com","pm@project.com","",12,"monitoring,health-check,backend,EPIC-006","Sprint 5","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","","US-018","TASK-001-001-002-01",2024-01-01 09:00,2024-01-01 09:00,"C#,.NET,PostgreSQL,RabbitMQ"
"Extend IPC to Expose Health Status Data","Extend the synchronous IPC mechanism (likely Named Pipes) to support a new command, e.g., 'GET_HEALTH'. When the Named Pipe server in the service receives this command, it will read the latest status from the health monitor's cache and return it as a serialized JSON object.

**Acceptance Criteria:**
- A 'GET_HEALTH' command is added to the IPC protocol.
- The server responds with a JSON string representing the current system health.
- The client can successfully request and deserialize this health data.","Task","Backlog","Medium","developer@project.com","pm@project.com","",6.3,"monitoring,ipc,EPIC-006","Sprint 5","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","","US-018","TASK-001-002-006-01,TASK-001-002-006-02,TASK-006-010-030-01",2024-01-01 09:00,2024-01-01 09:00,"C#,.NET,Named Pipes"
"Develop System Health Dashboard UI and ViewModel","Create the `SystemHealthDashboardView.xaml` and ViewModel. The ViewModel will use a timer to periodically call the IPC client to fetch the latest health status from the service. The data will be bound to UI elements like status indicators (green/red circles), text blocks for queue counts, and a progress bar for disk space.

**Acceptance Criteria:**
- The dashboard is accessible to Admins.
- It polls for new data every few seconds.
- UI elements correctly reflect the health data received from the service.
- The UI provides a clear, at-a-glance overview of system status.","Task","Backlog","Medium","developer@project.com","pm@project.com","",12,"monitoring,health-check,ui,EPIC-006","Sprint 5","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","","US-018","TASK-006-010-030-02",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement 'Export to CSV' Functionality","Add a command to the `AuditTrailViewModel` for exporting the currently filtered list of audit logs. This logic will fetch the full filtered dataset (not just the paginated view), format it as CSV, and use a Save File dialog to write it to a user-specified location.

**Acceptance Criteria:**
- An 'Export' button is available on the UI.
- Clicking the button opens a Save File dialog.
- A valid CSV file is created containing the headers and all the data from the filtered view.
- The operation is performed asynchronously to avoid freezing the UI.","Task","Backlog","High","developer@project.com","pm@project.com","",6.3,"auditing,export,ui,EPIC-006","Sprint 5","System Administration and Monitoring","Dicom Management and Printing System (DMPS)","","","US-014","TASK-006-010-031-02",2024-01-01 09:00,2024-01-01 09:00,"C#,WPF"
"Create and Configure MSIX Packaging Project","Add a Windows Application Packaging Project (`.wapproj`) to the solution. Configure the project to include the output from the WPF client and the Windows Service projects. Set up the `Package.appxmanifest` with the application name, icons, and necessary capabilities (e.g., `runFullTrust`).

**Acceptance Criteria:**
- The packaging project is added to the solution.
- Building the project successfully creates an unsigned `.msix` package.
- The package contains all necessary executables and dependencies for both the client and service.","Task","Backlog","Critical","devops@project.com","pm@project.com","",6.3,"deployment,msix,installer,EPIC-007","Sprint 6","Deployment and Installation","Dicom Management and Printing System (DMPS)","","","US-019","TASK-001-001-001-01",2024-01-01 09:00,2024-01-01 09:00,"MSIX,Visual Studio"
"Implement Prerequisite Checker Service","Create a utility class `PrerequisiteChecker` that contains methods to test connectivity. This includes a method to connect to a PostgreSQL database, one to connect to RabbitMQ, and a method to specifically check if the `pgcrypto` extension is enabled in PostgreSQL.

**Acceptance Criteria:**
- The checker can successfully validate a correct PostgreSQL connection string.
- The checker can successfully validate a correct RabbitMQ connection string.
- The checker correctly identifies if `pgcrypto` is present or absent.
- All checks handle exceptions gracefully and return a clear success/failure result.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.3,"deployment,installer,EPIC-007","Sprint 6","Deployment and Installation","Dicom Management and Printing System (DMPS)","","","US-019","",2024-01-01 09:00,2024-01-01 09:00,"C#,PostgreSQL,RabbitMQ"
"Develop First-Run Configuration Wizard UI","Implement a WPF window that serves as a first-run configuration wizard. This wizard will launch if the application detects that it has not been configured yet. It will contain fields for PostgreSQL and RabbitMQ connection details and a 'Test and Save' button that uses the `PrerequisiteChecker` service.

**Acceptance Criteria:**
- The wizard is displayed on the first launch of the application after installation.
- The user can enter connection details.
- The 'Test and Save' button provides immediate feedback on the validity of the settings.
- The application is blocked from proceeding until the checks pass and settings are saved.
- The saved settings are stored securely (e.g., using Windows Credential Manager for passwords).","Task","Backlog","Critical","developer@project.com","pm@project.com","",16.7,"deployment,installer,ui,EPIC-007","Sprint 6","Deployment and Installation","Dicom Management and Printing System (DMPS)","","Risk R-DEP-001: A strict installation gate can be a single point of failure.","US-019","TASK-007-011-033-01",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#"
"Automate Code Signing in the CI/CD Pipeline","Add a final step to the packaging stage that signs the generated `.msix` file. This requires securely storing a code signing certificate and its password (e.g., in pipeline secrets) and using a command-line tool (like `signtool.exe`) to apply the signature.

**Acceptance Criteria:**
- The pipeline successfully signs the MSIX package.
- The certificate password is not exposed in logs or scripts.
- The final, signed MSIX package is published as the primary build artifact.
- The signed package can be installed on a Windows machine without untrusted publisher warnings.","Task","Backlog","Critical","devops@project.com","pm@project.com","",13.5,"ci-cd,devops,security,signing,EPIC-007","Sprint 6","Deployment and Installation","Dicom Management and Printing System (DMPS)","","Securely managing certificates in a CI/CD environment is a complex and critical task.","US-020","TASK-007-011-034-02",2024-01-01 09:00,2024-01-01 09:00,"CI/CD,YAML,PowerShell,Code Signing"