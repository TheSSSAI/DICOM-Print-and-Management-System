test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
UT-LOG-001,Logging & Security,Functional,Unit,Highest,Yes,"Verify PHI redaction for Patient Name in a simple log message","Serilog logger is configured with the PhiRedactionEnricher","1. Create a log message string like ""Processing study for patient John Doe"". 2. Use the enricher to process a log event with this message. 3. Capture the modified log event properties.","The log event's message property is changed to ""Processing study for patient [REDACTED]"" or similar.",Sample log strings with patient names,xUnit; Moq,2,TASK-003
UT-LOG-002,Logging & Security,Functional,Unit,Highest,Yes,"Verify PHI redaction for Patient ID in a simple log message","Serilog logger is configured with the PhiRedactionEnricher","1. Create a log message string like ""User accessed record with PatientID=12345"". 2. Use the enricher to process a log event. 3. Capture the modified log event.","The log event's message is changed to ""User accessed record with PatientID=[REDACTED]"".",Sample log strings with patient IDs,xUnit; Moq,2,TASK-003
UT-LOG-003,Logging & Security,Functional,Unit,Highest,Yes,"Verify PHI redaction for multiple PHI elements in a single message","Serilog logger is configured with the PhiRedactionEnricher","1. Create a log string: ""Error on study for Jane Smith (PID: 67890)"". 2. Process with the enricher. 3. Capture the output.","The output is ""Error on study for [REDACTED] (PID: [REDACTED])"".",Sample log strings with multiple PHI elements,xUnit; Moq,3,TASK-003
UT-LOG-004,Logging & Security,Functional,Unit,Highest,Yes,"Verify no redaction occurs on messages without PHI","Serilog logger is configured with the PhiRedactionEnricher","1. Create a log string: ""Service starting up successfully."". 2. Process with the enricher. 3. Capture the output.","The output message is identical to the input message.",Sample log strings without any PHI,xUnit; Moq,1,TASK-003
IT-LOG-001,Logging & Security,Integration,Integration,Highest,Yes,"Verify logs with PHI are correctly redacted and written to the rolling file sink","A test application host is configured with Serilog, the PHI enricher, and a file sink pointing to a temporary file.","1. Log a message containing a patient name. 2. Log a message without PHI. 3. Close the logger. 4. Read the contents of the temporary log file.","The log file contains two entries. The first entry has the patient name redacted. The second entry is unchanged.",,xUnit; Serilog.Sinks.File,4,TASK-004
IT-LOG-002,Logging & Security,Integration,Integration,Highest,Yes,"Verify logs with PHI are correctly redacted and written to the Windows Event Log sink","Application host is configured with Serilog, PHI enricher, and Windows Event Log sink. Test must run with permissions to write to the event log.","1. Log a message containing a patient ID. 2. Query the Windows Event Log for the new event from the application's source.","A new event is found. The event's message content has the patient ID redacted.",,xUnit; Serilog.Sinks.EventLog; Admin privileges,5,TASK-004
IT-DB-001,Data Persistence,Integration,Integration,Highest,Yes,"Verify EF Core migrations can be applied to a clean PostgreSQL database successfully","A running PostgreSQL instance is available (via Testcontainers). Connection string is configured.","1. Spin up a PostgreSQL container. 2. Create a new DbContext instance pointing to the container. 3. Programmatically call `_context.Database.MigrateAsync()`. 4. Query the `information_schema.tables` view.","The migration completes without errors. The query result contains all the table names defined in the EF Core entities.",,xUnit; Testcontainers; EF Core CLI,6,TASK-017
IT-DB-002,Data Persistence,Integration,Integration,Highest,Yes,"Verify Generic Repository can perform CRUD operations on the User entity","A test database with the correct schema applied is available.","1. Create a `Repository<User>`. 2. Add a new User entity. 3. Retrieve the User by its ID. 4. Update a property on the User. 5. Delete the User.","All operations complete successfully. The retrieved user matches the created one. The updated user reflects the changes. The user no longer exists after deletion.",Test User object,xUnit; Testcontainers; EF Core 8,5,TASK-015
IT-DB-003,Data Persistence,Security,Integration,Highest,Yes,"Verify database connection uses TLS","A PostgreSQL instance configured to require TLS is running.","1. Configure the Npgsql connection string with `SslMode=Require`. 2. Attempt to open a connection and execute a simple query (e.g., 'SELECT 1').","The connection succeeds and the query returns a result. If SslMode is set to 'Disable', the connection must fail.",,xUnit; Testcontainers; PostgreSQL with TLS enabled,4,TASK-014
IT-MQ-001,Messaging,Integration,Integration,Highest,Yes,"Verify RabbitMQ Connection Manager successfully connects on startup","A running RabbitMQ instance is available (via Testcontainers).","1. Instantiate the Connection Manager service. 2. Start the service. 3. Check the connection status property.","The connection status property indicates 'Connected'. No exceptions are thrown.",,xUnit; Testcontainers,4,TASK-006
IT-MQ-002,Messaging,Resilience,Integration,Highest,Yes,"Verify RabbitMQ Connection Manager automatically reconnects after a broker restart","The Connection Manager is connected to a RabbitMQ container.","1. Stop the RabbitMQ container. 2. Wait for a short period and verify the status is 'Disconnected'. 3. Start the RabbitMQ container again. 4. Wait for the reconnection logic to trigger.","The connection manager's status changes to 'Disconnected' and then back to 'Connected' without manual intervention.",,xUnit; Testcontainers,6,TASK-006
IT-MQ-003,Messaging,Functional,Integration,Highest,Yes,"Verify the Message Publisher can publish a persistent message to a durable queue","A running RabbitMQ instance is available. A durable queue and exchange are declared.","1. Create an instance of the `IMessagePublisher`. 2. Publish a serializable object, setting the 'persistent' flag to true. 3. Use the RabbitMQ management API or a separate client to inspect the queue.","A single message exists in the queue. The message's 'delivery_mode' property is 2 (persistent).",Test message object,xUnit; Testcontainers; RabbitMQ .NET Client,4,TASK-008
IT-MQ-004,Messaging,Resilience,Integration,Highest,Yes,"Verify the Base Consumer routes a persistently failing message to the DLQ","A test consumer (inheriting from BaseRabbitMqConsumer) is configured to always throw an exception. Queues, exchanges, and DLQ are configured.","1. Publish a message to the main queue. 2. Start the test consumer hosted service. 3. Wait for the retries to exhaust. 4. Check the message count of the main queue and the DLQ.","The main queue is empty. The DLQ contains exactly one message.",Test message object,xUnit; Testcontainers; RabbitMQ .NET Client,8,TASK-009
IT-MQ-005,Messaging,Resilience,Integration,Highest,Yes,"Verify the Base Consumer successfully processes a message and acks it","A test consumer is configured to process messages successfully.","1. Publish a message to the main queue. 2. Start the test consumer. 3. Wait for the message to be processed. 4. Check the message count of the main queue and the DLQ.","The message is processed successfully. Both the main queue and the DLQ are empty.",Test message object,xUnit; Testcontainers; RabbitMQ .NET Client,5,TASK-009
IT-SEC-001,Security,Integration,Integration,Highest,Yes,"Verify the Windows Credential Manager provider can read a pre-stored secret","A secret is manually stored in the Windows Credential Manager under a known target name using the provided PowerShell script.","1. Instantiate the Credential Manager provider class. 2. Call the method to retrieve the secret for the known target name.","The method returns the correct, unencrypted secret. If the secret does not exist, it returns null or throws a specific exception.",A pre-configured secret in WCM,xUnit; PowerShell; Admin privileges,6,TASK-046
IT-SEC-002,Security,Functional,System,Highest,No,"Verify the credential setup PowerShell script works correctly","The PowerShell script is available on a test machine.","1. Run the `setup_credentials.ps1` script. 2. Enter a username and password when prompted. 3. Open the Windows Credential Manager UI.","A new Generic Credential appears with the correct target name and username. The password is not visible.",,PowerShell; Windows OS,3,TASK-047
E2E-SEC-001,Security,Build,System,Highest,Yes,"Verify the CI build fails when a high-severity vulnerability is detected","A branch is created with a new NuGet package that has a known high-severity vulnerability.","1. Push the new branch to the remote repository, triggering a CI build. 2. Monitor the build pipeline execution.","The OWASP Dependency-Check step must execute and identify the vulnerability. The build must fail at this step and report the security issue.",A NuGet package with a known CVE,CI System (e.g., Azure DevOps); OWASP Dependency-Check,4,TASK-048
E2E-ING-001,DICOM Ingestion,Functional,System,Highest,Yes,"Verify the full C-STORE to RabbitMQ pipeline","The complete Windows Service is running with connections to RabbitMQ and PostgreSQL. A temporary storage path is configured.","1. Use a DICOM SCU client to send a valid DICOM file (C-STORE) to the service's SCP port. 2. The SCU should receive a success response. 3. Inspect the RabbitMQ 'ingestion' queue.","The C-STORE operation completes with a success status code. A single message appears in the RabbitMQ queue. The message payload contains the correct metadata and path to a file in the temporary storage location.",Sample DICOM file (e.g., a CT slice),xUnit; fo-dicom; Testcontainers,8,TASK-021
E2E-ING-002,DICOM Ingestion,Functional,System,Highest,Yes,"Verify the full DICOM ingestion, persistence, and routing pipeline","The complete Windows Service is running. All dependencies (DB, MQ) are available. An auto-routing rule is pre-configured in the database.","1. Send a DICOM file via C-STORE that matches the routing rule. 2. Wait for the `DicomPersistenceConsumer` to process the message. 3. Query the database and check the file system.","The corresponding Patient, Study, Series, and Image records are created in the database. The DICOM file is moved from the temporary location to the final destination specified by the routing rule. The RabbitMQ queue is empty.",Sample DICOM file matching a routing rule (e.g., modality='CT'),xUnit; fo-dicom; Testcontainers; EF Core 8,12,TASK-025
E2E-ING-003,DICOM Ingestion,Resilience,System,Highest,Yes,"Verify a failing persistence job is routed to the DLQ","The service is running. The database is configured to be temporarily unavailable (e.g., container stopped after message is queued).","1. Send a DICOM file via C-STORE. 2. Verify the message is in the main queue. 3. Stop the PostgreSQL container. 4. Wait for the consumer to attempt processing and fail its retries.","The message is removed from the main queue and appears in the DLQ. The DICOM file remains in the temporary storage location.",Sample DICOM file,xUnit; fo-dicom; Testcontainers,9,TASK-025
UT-ROUTE-001,DICOM Ingestion,Functional,Unit,High,Yes,"Verify Auto-Routing Service correctly matches a rule by modality","The AutoRoutingService is instantiated with a mocked repository.","1. Mock the repository to return a list of rules, including one for `Modality == 'CT'`. 2. Call the service's `GetDestinationPath` method with metadata where modality is 'CT'.","The service returns the destination path associated with the 'CT' rule.",Mocked routing rules and DICOM metadata objects,xUnit; Moq,3,TASK-023
UT-ROUTE-002,DICOM Ingestion,Functional,Unit,High,Yes,"Verify Auto-Routing Service returns the default path when no rules match","The AutoRoutingService is instantiated with a mocked repository.","1. Mock the repository to return a list of rules. 2. Call the service with metadata that does not match any rule.","The service returns the system's configured default storage path.",Mocked routing rules and DICOM metadata objects,xUnit; Moq,2,TASK-023
E2E-PDF-001,PDF Generation,Functional,System,High,Yes,"Verify the PDF Generation consumer creates a file","The service is running with RabbitMQ.","1. Manually publish a valid `GeneratePdfCommand` message to the PDF generation queue. 2. Wait for the consumer to process it. 3. Check the target file system path.","A PDF file is created at the specified path. The file is not corrupt and can be opened.",A valid serialized `GeneratePdfCommand`,Testcontainers; RabbitMQ .NET Client,5,TASK-027
E2E-PRINT-001,Print Spooling,Functional,System,High,Yes,"Verify the Print Spooling consumer updates database status and spools a job","The service is running with RabbitMQ and PostgreSQL. A virtual printer (e.g., 'Microsoft Print to PDF') is installed.","1. Create a `PrintJob` record in the database with 'Queued' status. 2. Publish a corresponding `PrintJobCommand` message. 3. Wait for processing. 4. Query the DB and check the virtual printer's queue.","The `PrintJob` record's status in the database is updated to 'Processing' and then 'Completed'. A file appears in the output directory of the 'Print to PDF' printer.",A valid serialized `PrintJobCommand` and initial DB record,Testcontainers; EF Core 8; Windows OS with virtual printer,6,TASK-029
IT-IPC-001,IPC,Functional,Integration,High,Yes,"Verify Named Pipe server responds to PING with PONG","The `NamedPipeServerService` is running in a test host.","1. Create a `NamedPipeClientStream` and connect to the server. 2. Write the string 'PING'. 3. Read the response from the stream.","The client successfully connects. The response read from the stream is 'PONG'.",,xUnit; System.IO.Pipes,4,TASK-032
IT-IPC-002,IPC,Functional,Integration,High,Yes,"Verify Named Pipe server returns health data","The `NamedPipeServerService` and `HealthProbeService` are running. The health cache is populated with a known state.","1. Connect to the Named Pipe server. 2. Write the string 'GET_HEALTH'. 3. Read and deserialize the response.","The response is a valid JSON string that deserializes into the expected HealthStatus object.",A pre-populated HealthStatus object,xUnit; System.IO.Pipes; Moq,5,TASK-035
IT-HEALTH-001,System Monitoring,Functional,Integration,Highest,Yes,"Verify Health Probe reports 'Healthy' for running dependencies","The `HealthProbeService` is running in a test host with running PostgreSQL and RabbitMQ containers.","1. Allow the health probe to execute its check. 2. Retrieve the health status from the service's cache.","The status for both PostgreSQL and RabbitMQ is 'Healthy'.",,xUnit; Testcontainers,5,TASK-034
IT-HEALTH-002,System Monitoring,Functional,Integration,Highest,Yes,"Verify Health Probe reports 'Unhealthy' when a dependency is down","The `HealthProbeService` is running.","1. Start with running dependencies and verify 'Healthy' status. 2. Stop the PostgreSQL container. 3. Allow the health probe to execute its next check. 4. Retrieve the new health status.","The status for RabbitMQ remains 'Healthy', but the status for PostgreSQL changes to 'Unhealthy' and includes an error message.",,xUnit; Testcontainers,6,TASK-034
IT-ALERT-001,Alerting & Monitoring,Integration,Integration,High,Yes,"Verify a critical health status triggers an alert","The `HealthProbeService` is configured with a mocked `IAlertingService`.","1. Simulate a critical failure (e.g., by stopping the DB container). 2. Let the health probe run. 3. Verify the mock service's invocations.","The `SendAlertAsync` method on the mocked `IAlertingService` is called exactly once with a message indicating a database failure.",,xUnit; Testcontainers; Moq,5,TASK-039
IT-ALERT-002,Alerting & Monitoring,Integration,Integration,High,Yes,"Verify a message in the DLQ triggers an alert","The `DlqMonitorService` is configured with a mocked `IAlertingService`. A message exists in the DLQ.","1. Place a message in the DLQ using a RabbitMQ client. 2. Start the `DlqMonitorService`. 3. Let the monitor's timer tick. 4. Verify the mock service's invocations.","The `SendAlertAsync` method on the mocked `IAlertingService` is called with a message indicating a poison message was found.",A message in the DLQ,xUnit; Testcontainers; Moq,5,TASK-039
IT-DATA-001,Data Management,Functional,Integration,Low,Yes,"Verify Data Retention Service purges only old data","A test database is seeded with studies of various ages. A mock file system is used.","1. Configure the retention period to 7 years. 2. Seed the DB with a study 8 years old and one 6 years old. 3. Run the `DataRetentionService` logic. 4. Query the DB and check the mock file system.","The 8-year-old study is marked as deleted (or removed), and its corresponding file is deleted. The 6-year-old study and its file remain untouched.",DICOM studies with various timestamps,xUnit; Testcontainers; EF Core 8; Mock File System Library,7,TASK-042
IT-DATA-002,Data Management,Auditing,Integration,Low,Yes,"Verify Data Retention Service creates audit logs for purged studies","The retention service is configured with a mocked `IAuditLogService`.","1. Set up the test as in IT-DATA-001. 2. Run the retention service logic. 3. Verify the mock audit service invocations.","The `LogEventAsync` method on the mocked audit service is called once for each purged study, with event type 'AutomatedStudyPurge'.",,xUnit; Testcontainers; Moq,4,TASK-041
IT-DATA-003,Data Management,Functional,Integration,Low,Yes,"Verify Data Integrity Service detects and logs missing files","A test database is seeded with two `Image` records. The file for the second image is intentionally not created on the mock file system.","1. Set up the database and mock file system state. 2. Run the `DataIntegrityService` logic. 3. Capture log output.","The log output contains a specific warning message that includes the SOPInstanceUID or path of the missing file. It does not contain a warning for the file that exists.",,xUnit; Testcontainers; Mock File System Library,6,TASK-044
PERF-ING-001,DICOM Ingestion,Performance,System,High,Yes,"Verify C-STORE SCP can handle 10 simultaneous associations","The service is running in a performance test environment.","1. Create a test harness that spawns 10 concurrent DICOM SCU clients. 2. Have all clients send studies to the SCP simultaneously for a duration of 5 minutes. 3. Monitor service CPU/memory and message ingestion rate.","The service remains stable without crashing. UI responsiveness (if client is running) is not noticeably degraded. The system successfully ingests all sent studies without error responses.",A large set of unique DICOM studies,Custom test harness (e.g., C# console app); JMeter or similar for orchestration,16,TASK-019