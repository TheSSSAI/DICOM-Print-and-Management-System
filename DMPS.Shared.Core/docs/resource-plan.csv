task_id,task_name,primary_skill,secondary_skill,complexity_level,estimated_hours,required_experience,team_size,dependencies,critical_path,resource_notes,alternative_approach
TSK-001,"Initialize .NET Solution and Project Structure",Backend Development,DevOps,Low,3.2,Mid,1,"",Yes,"Foundational task for the entire solution. Must adhere to Clean Architecture principles from the start.","Use a pre-built .NET Clean Architecture template to accelerate setup."
TSK-002,"Implement .NET Generic Host for Windows Service",Backend Development,DevOps,Medium,4.2,Mid,1,TSK-001,Yes,"Core task for running the application as a service. Establishes DI and configuration patterns for all subsequent hosted services.","Use a third-party library like TopShelf for more fluent service configuration, though the native generic host is preferred for .NET 8+."
TSK-003,"Implement Serilog PHI Redaction Enricher",Backend Development,Security,Medium,6.3,Senior,1,TSK-002,Yes,"High compliance risk (RISK-002). Requires strong Regex skills and a deep understanding of HIPAA PHI definitions. Must be paired with comprehensive unit tests.","Use a commercial, pre-built PHI scanning/redaction library if available, though this might add licensing costs and performance overhead."
TSK-004,"Configure Serilog Sinks for File and Windows Event Log",Backend Development,Configuration,Low,3.2,Mid,1,TSK-003,Yes,"Ensures logging is correctly routed. Configuration must be robust for different environments (dev, prod).","Use a centralized logging platform sink (e.g., Seq, Datadog) instead of local files for better observability, but this introduces an external dependency."
TSK-005,"Write Unit Tests for PHI Redaction Enricher",Quality Assurance,Security,Medium,7.2,Senior,1,TSK-003,Yes,"Critical validation for compliance (RISK-002). Test cases must cover a wide range of PHI formats and edge cases.","Manual log review during testing is a supplement, not an alternative, to automated unit tests for this component."
TSK-006,"Define EF Core Entities for User Management",Backend Development,Database,Medium,4.2,Mid,1,TSK-001,Yes,"Defines the core data model for security. Must align perfectly with database design and security requirements (e.g., password history).","Use a schema-first approach where C# classes are generated from a database schema, but code-first is generally more flexible for .NET development."
TSK-007,"Define EF Core Entities for DICOM Data",Backend Development,Database,Medium,7.2,Mid,1,TSK-001,Yes,"Defines the primary data model for the application's core domain. Accuracy of relationships and constraints is crucial.","Consider using a NoSQL database for metadata flexibility, but PostgreSQL provides stronger transactional guarantees required by the system."
TSK-008,"Define EF Core Entities for System & Configuration",Backend Development,Database,Medium,7.2,Mid,1,TSK-001,Yes,"Defines the data model for all operational and administrative configurations. JSONB columns can be used for flexible rule criteria.","Store some settings in configuration files (appsettings.json) instead of the database, but DB storage allows for dynamic updates via the UI."
TSK-009,"Implement and Configure DicomAppDbContext",Backend Development,Database,High,8.3,Senior,1,"TSK-006,TSK-007,TSK-008",Yes,"Central point of data access configuration. TLS enforcement for the PostgreSQL connection is a critical security requirement.","Use a micro-ORM like Dapper for performance-critical queries, but EF Core is better for overall application development and migrations."
TSK-010,"Implement Generic Repository Pattern",Backend Development,Architecture,Medium,6,Mid,1,TSK-009,Yes,"Establishes a standard data access pattern, promoting testability and separation of concerns.","Directly use the DbContext in service layers for simpler applications, but the repository pattern provides better abstraction for this system's complexity."
TSK-011,"Implement Specific Repositories",Backend Development,Architecture,High,8.2,Senior,1,TSK-010,Yes,"Required for complex business queries that go beyond simple CRUD operations. This is where domain-specific data access logic resides.","Implement query logic directly in application services using LINQ on the DbContext, but this can lead to duplicated code and violates the separation of concerns."
TSK-012,"Set up and Create Initial EF Core Migration",Backend Development,Database,Low,3.3,Mid,1,TSK-009,Yes,"Critical step to translate the code-first model into a database schema. The initial migration must be complete and correct.","Manage database schema changes with raw SQL scripts, but this is error-prone and loses the benefits of the EF Core model consistency."
TSK-013,"Write Integration Test to Apply Migration and Verify Schema",Quality Assurance,DevOps,High,8.7,Senior,1,TSK-012,Yes,"Ensures that the data model and migrations are valid and can be deployed reliably. Testcontainers are essential for creating an isolated test environment.","Manually apply migrations and inspect the database, but this is not repeatable and cannot be integrated into an automated CI/CD pipeline."
TSK-014,"Implement RabbitMQ Singleton Connection Manager",Backend Development,Architecture,High,8.7,Senior,1,TSK-002,Yes,"A core component for system resilience. Automatic reconnection logic must be robust to handle network blips and broker restarts.","Create a new connection for every published message. This is highly inefficient and not recommended for production systems."
TSK-015,"Write Integration Tests for Connection Manager",Quality Assurance,DevOps,High,8.3,Senior,1,TSK-014,Yes,"Critical validation for a core resilience component. Test must simulate broker downtime to confirm the reconnection logic works as expected.","Rely on manual testing by stopping/starting the RabbitMQ service, which is inefficient and not suitable for automated regression testing."
TSK-016,"Implement Generic Message Publisher Service",Backend Development,Architecture,Medium,4.2,Mid,1,TSK-014,Yes,"Provides a clean, reusable interface for publishing messages, abstracting away the underlying RabbitMQ client details.","Publish messages directly using the RabbitMQ client library in every service that needs it, but this leads to code duplication and tight coupling."
TSK-017,"Implement Base Consumer IHostedService with DLQ Logic",Backend Development,Architecture,Very High,14.3,Lead,2,TSK-014,Yes,"Critical, high-risk task (RISK-004) forming the basis of system reliability. Recommend pair programming. Incorrect implementation can lead to message loss or queue blockage.","Leverage a higher-level library like MassTransit or NServiceBus to handle the consumer boilerplate, but this adds a significant new dependency and learning curve."
TSK-018,"Write Integration Tests for Base Consumer",Quality Assurance,Backend Development,Very High,14.3,Senior,1,TSK-017,Yes,"Critical validation for high-risk task TSK-017. Requires strong skills in Testcontainers, RabbitMQ, and testing complex failure scenarios (transient vs. persistent errors, DLQ routing).","Manual testing is not a viable alternative for this component due to the complexity and number of failure modes to validate."
TSK-019,"Implement Windows Credential Manager Provider",Backend Development,Security,High,9.3,Senior,1,TSK-002,Yes,"High-risk task (RISK-008) due to native OS integration. Requires careful error handling for permission issues.","Store secrets in an encrypted appsettings.json section, but this is less secure as the decryption key must be managed, and it ties secrets to the deployment artifact."
TSK-020,"Create Credential Setup Script",DevOps,Security,Medium,6.3,Mid,1,TSK-019,No,"Essential for secure deployment. The script must be idempotent and provide clear instructions for the administrator.","Require administrators to manually create credentials using the Windows UI, but this is error-prone and harder to document and automate."
TSK-021,"Integrate OWASP Dependency-Check into CI Pipeline",DevOps,Security,Medium,6.7,Mid,1,"",No,"DevSecOps task crucial for compliance. Potential risk of finding a critical vulnerability in a core library (RISK-010). Should be implemented early.","Use other integrated security scanning tools like Snyk or GitHub Advanced Security, which may offer better integration but could have different costs and features."
TSK-022,"Implement fo-dicom SCP Listener as an IHostedService",Backend Development,DICOM,High,8.5,Senior,1,TSK-002,Yes,"Requires specialized knowledge of the fo-dicom library and DICOM protocol (RISK-005). Performance and stability are key.","Use a different DICOM library, but fo-dicom is the most mature and widely used for .NET."
TSK-023,"Implement OnCStoreRequest Handler for Decoupled Ingestion",Backend Development,DICOM,Very High,12.3,Senior,1,"TSK-016,TSK-022",Yes,"Architecturally complex task to ensure high-throughput ingestion without blocking. File I/O must be fully asynchronous.","Write directly to the database from the C-STORE handler. This creates a simpler architecture but will not meet the performance requirement of handling 10 simultaneous associations."
TSK-024,"Write E2E Test for DICOM C-STORE Ingestion",Quality Assurance,DICOM,Very High,12,Senior,1,TSK-023,Yes,"Validates the entire initial ingestion pipeline from network reception to message queue. This is a critical integration point.","Manually test using a third-party DICOM tool, but this cannot be automated and included in the CI/CD pipeline for regression testing."
TSK-025,"Implement Auto-Routing Service Logic",Backend Development,Business Logic,High,8.2,Mid,1,TSK-011,Yes,"The core of the automated file organization feature. The rules engine must be efficient and handle priorities correctly.","Implement routing logic as a series of if-else statements, but a data-driven approach using database rules is more flexible and configurable by an admin."
TSK-026,"Write Unit Tests for Auto-Routing Service",Quality Assurance,Business Logic,Medium,7.5,Mid,1,TSK-025,Yes,"Ensures the routing logic is correct. Tests should cover matching on different criteria, priority handling, and the default fallback case.","Perform manual testing by sending various DICOM files and checking the output folder, which is inefficient for testing all rule combinations."
TSK-027,"Implement DICOM Persistence Consumer Logic",Backend Development,Database,Very High,12.7,Senior,1,"TSK-017,TSK-011,TSK-025",Yes,"High risk due to transactional complexity between the database and file system (RISK-001, RISK-007). Idempotency is critical.","Store files in the database as BLOBs to simplify transactions, but this is not recommended for performance and scalability with large DICOM files."
TSK-028,"Write Integration Test for Persistence Consumer",Quality Assurance,Database,Very High,16.5,Lead,1,TSK-027,Yes,"Critical end-to-end validation for the entire ingestion pipeline (RISK-001, RISK-007). The most complex integration test in the project.","Rely on separate tests for the database and file move, but this does not validate the transactional integrity of the combined operation."
TSK-029,"Implement PDF Generation Consumer Logic",Backend Development,PDF Generation,High,9.3,Mid,1,TSK-017,No,"Requires working with the QuestPDF library. Logic should handle various layouts and data sources from the job payload.","Generate PDFs synchronously on the client, but this would block the UI and not meet the responsiveness requirements."
TSK-030,"Write Integration Test for PDF Generation Consumer",Quality Assurance,PDF Generation,Medium,7,Mid,1,TSK-029,No,"Validates that the consumer can correctly process a job and produce a file. Can use file hash comparison to verify output consistency.","Manually trigger PDF generation and visually inspect the output, which is not suitable for automated regression testing."
TSK-031,"Implement Print Spooling Consumer Logic",Backend Development,Windows API,High,8.3,Senior,1,"TSK-017,TSK-011",No,"Requires interaction with native Windows Print APIs. The logic must gracefully handle printer-not-found or offline scenarios.","Attempt to print directly from the client application, but this would block the UI and fail if the client machine does not have direct access to the printer."
TSK-032,"Write Integration Test for Print Consumer",Quality Assurance,Windows API,Medium,6,Mid,1,TSK-031,No,"Validates the consumer's interaction with the database and print spooler. Using a virtual printer like 'Microsoft Print to PDF' is essential for automation.","Requires manual printing to a physical printer, which is slow, wasteful, and cannot be automated in a CI environment."
TSK-033,"Implement Named Pipes Server as an IHostedService",Backend Development,IPC,High,7.5,Senior,1,TSK-002,Yes,"Requires careful concurrency management to handle multiple client connections (RISK-011). Must be fully asynchronous to avoid blocking the service.","Use a local TCP socket for communication, which is more complex to secure and configure than Named Pipes for same-machine IPC."
TSK-034,"Implement IPC Request Handler for PING/PONG",Backend Development,IPC,Medium,4,Mid,1,TSK-033,Yes,"The simplest IPC command, used to verify the basic communication channel is working.","Implement a more complex health check as the initial IPC command, but a simple PING/PONG is better for initial connection testing."
TSK-035,"Write Integration Test for Named Pipes Server",Quality Assurance,IPC,Medium,6.3,Mid,1,TSK-034,Yes,"Validates that the IPC client and server can communicate successfully. This test ensures the foundation for other IPC-based features.","Manual testing with a separate client application, but an automated integration test is required for regression."
TSK-036,"Implement System Health Probe Hosted Service",Backend Development,Monitoring,High,9.3,Senior,1,"TSK-002,TSK-014,TSK-009",Yes,"Core of the system monitoring feature. Each check must have its own timeout and error handling to prevent one failed check from stopping others.","Have the client application perform its own health checks, but a centralized service-side probe provides a single source of truth and reduces client complexity."
TSK-037,"Write Integration Test for Health Probe Service",Quality Assurance,Monitoring,Very High,12,Senior,1,TSK-036,Yes,"Complex test setup requiring multiple Testcontainers (PostgreSQL, RabbitMQ) that can be individually stopped/started to simulate failures.","Rely on manual testing by stopping services, which is not suitable for automated CI/CD pipelines."
TSK-038,"Expose Health Data via Named Pipes",Backend Development,IPC,Medium,5.3,Mid,1,"TSK-034,TSK-036",Yes,"Connects the monitoring backend to the client frontend. The data contract for the health status must be well-defined and versioned.","Have the client query each dependency's status directly, but this would require the client to have credentials for the DB and MQ, which is a security risk."
TSK-039,"Implement SMTP Alerting Service",Backend Development,Alerting,Medium,7.2,Mid,1,TSK-019,No,"Requires a robust email library like MailKit. Must securely retrieve SMTP credentials from the Windows Credential Manager.","Write alerts only to the log file, but this is not proactive and requires an administrator to be constantly monitoring logs."
TSK-040,"Integrate Alerting with Health Probe and DLQ Monitor",Backend Development,Alerting,High,8.5,Senior,1,"TSK-036,TSK-039",No,"Connects the monitoring logic to the notification channel. Logic must prevent alert storms by using statefulness (e.g., only send an alert when status changes from Healthy to Unhealthy).","Send an alert on every failed health check, which would lead to an excessive number of emails for a persistent problem."
TSK-041,"Write Integration Tests for Alerting Triggers",Quality Assurance,Alerting,High,8.3,Mid,1,TSK-040,No,"Verify that the conditions for alerting are correctly detected and that the alerting service is invoked. Requires mocking the IAlertingService.","Manually trigger failures and check an email inbox, which is slow and not suitable for automated testing."
TSK-042,"Implement Data Retention Hosted Service",Backend Development,Data Management,High,9.7,Senior,1,"TSK-002,TSK-011",No,"High-risk task due to automated data deletion. Must include safeguards, such as a 'dry run' mode and extensive logging. The query for old studies must be carefully optimized.","Rely on manual scripts run by an administrator, which is error-prone and can be forgotten, leading to uncontrolled data growth."
TSK-043,"Add Audit Logging to Data Retention Service",Backend Development,Auditing,Low,3.2,Mid,1,TSK-042,No,"Critical for compliance. The audit log must provide an irrefutable record of what was deleted and when.","Do not log automated deletions, but this would violate HIPAA and other compliance requirements for data lifecycle tracking."
TSK-044,"Write Integration Test for Data Retention Service",Quality Assurance,Data Management,Very High,11.3,Senior,1,TSK-043,No,"Requires careful test data setup with specific timestamps. The test must verify that the correct data is deleted and that the audit logs are created.","Manually set up test data and run the service, but this is time-consuming and difficult to make repeatable for CI."
TSK-045,"Implement Data Integrity Hosted Service",Backend Development,Data Management,High,8.3,Mid,1,"TSK-002,TSK-011",No,"The query to iterate through all image records must be efficient and batched to avoid high memory usage and long-running transactions.","Assume data is always consistent, but this is a dangerous assumption that can lead to application errors when a file is missing (RISK-001)."
TSK-046,"Write Integration Test for Data Integrity Service",Quality Assurance,Data Management,High,8.7,Mid,1,TSK-045,No,"Requires setting up a test state with inconsistencies (e.g., a DB record pointing to a non-existent file) and verifying that the service correctly detects and logs it.","Manually delete files and check logs, which is not an efficient or reliable way to test this feature repeatedly."