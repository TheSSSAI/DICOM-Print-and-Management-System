risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
RISK-001,Technical,"The decoupled C-STORE SCP ingestion architecture (WI-010, WI-012) introduces complexity in ensuring data consistency between the file system and the database, potentially leading to 'orphan' files or database records if a transaction fails after the file move.","3","4","12","Medium","WI-010, WI-012","Architectural complexity of separating file reception from database persistence across a message queue.","Implement a two-phase commit-like pattern: 1. Persist metadata to DB with a 'pending' status. 2. Move the file. 3. Update DB status to 'complete'. Use a compensating transaction to revert DB changes if the file move fails. Rigorous integration testing of failure scenarios is required.","Develop a cleanup utility (similar to WI-021) that can run on-demand to identify and reconcile inconsistencies between the database and file storage. Failed messages in the DLQ will require manual reconciliation.","The Data Integrity Check service (WI-021) reports discrepancies. Errors related to file I/O or database transactions appear in the DicomPersistenceConsumer logs.","Lead Developer","TBD","Open"
RISK-002,Quality,"The PHI redaction logic for logs (WI-002) is incomplete or flawed, resulting in sensitive patient data being written to log files or the Windows Event Log, causing a major compliance breach.","3","5","15","High","WI-002","Complexity of identifying all possible formats of PHI within unstructured log messages.","Develop a comprehensive set of regular expressions based on DICOM standards for PHI. Implement unit tests that specifically target the PHI redaction enricher with a wide variety of sample log messages containing PHI. Conduct a manual review of logs in a staging environment before production deployment.","Immediately rotate and archive the affected logs. Update the redaction logic and deploy a patch. Perform a security audit to determine the extent of the data exposure.","Manual log reviews during testing reveal un-redacted PHI. A security audit or automated log scanning tool detects PHI.","Security Lead","TBD","Open"
RISK-003,External,"The pre-installed PostgreSQL (REQ-1-002) or RabbitMQ (REQ-1-002) environments are misconfigured, unstable, or use an incompatible version, preventing the service from starting or causing runtime failures.","4","4","16","High","WI-003, WI-006, EPIC-001","Dependency on external infrastructure not controlled by the development team.","The installer (MSIX) must include a prerequisite check to verify connectivity and required configurations (e.g., pgcrypto extension). Provide a detailed and clear deployment guide for infrastructure teams. Use Testcontainers for all integration tests to ensure the application is tested against a known-good configuration.","The deployment guide will include a troubleshooting section for common connectivity and configuration issues. The System Health Dashboard will immediately flag connectivity problems.","Installation prerequisite checks fail. The service fails to start with connection errors in the logs. The System Health Dashboard (WI-017) shows a disconnected state for DB or MQ.","DevOps Engineer","TBD","Open"
RISK-004,Technical,"The generic RabbitMQ consumer base class (WI-005) incorrectly handles message acknowledgements (ack/nack) or dead-lettering, leading to either message loss or an infinite loop of failing messages that block the queue.","3","5","15","High","WI-005, WI-012, WI-013, WI-014","High complexity of implementing reliable messaging patterns (retries, DLQ) correctly.","Implement extensive unit and integration tests for the BaseRabbitMqConsumer class, simulating all failure modes (transient errors, persistent errors) and verifying correct message routing to the DLQ. Use pair programming or code reviews by a RabbitMQ subject matter expert.","Manually purge the affected queue to unblock message processing. Move the poison message from the DLQ back to the main queue for reprocessing once the bug is fixed.","The number of messages in the main queue grows unexpectedly without being processed. The same message appears repeatedly in the logs with processing errors. Messages appear in the DLQ.","Lead Developer","TBD","Open"
RISK-005,Resource,"A lack of deep expertise with the `fo-dicom` library (WI-009, WI-010) leads to incorrect implementation of the C-STORE SCP, causing poor performance, connection handling issues, or inability to parse specific DICOM transfer syntaxes.","3","4","12","Medium","WI-009, WI-010","The `fo-dicom` library is a specialized, third-party component requiring niche knowledge.","Allocate time for a developer to create a proof-of-concept (PoC) specifically for the C-STORE SCP to de-risk the implementation. Develop a comprehensive suite of integration tests using DICOM test data from various modalities and vendors. Engage with the `fo-dicom` community for support if issues arise.","Allocate budget for external consultation with a DICOM or `fo-dicom` expert. Dedicate additional sprint time for bug fixing and performance tuning of the SCP component.","Performance testing shows the SCP cannot handle the target of 10 simultaneous associations. The SCP fails to parse valid DICOM files from a specific modality during testing. Unexplained connection drops occur under load.","Project Manager","TBD","Open"
RISK-006,Timeline,"The cumulative effort for the high-complexity tasks (WI-005, WI-006, WI-009, WI-010, WI-012) is underestimated, causing a significant delay in foundational epics (EPIC-001, EPIC-002) and impacting the entire project schedule.","4","3","12","Medium","WI-005, WI-006, WI-009, WI-010, WI-012","Multiple core components of the system are technically complex and interdependent.","Break down high-complexity work items into smaller, more manageable sub-tasks. Use spike/research tasks to clarify uncertainty before committing to an estimate. Prioritize the most complex and highest-risk tasks early in the project timeline.","Re-evaluate project scope and identify features that can be moved to a later phase. Allocate developer overtime or bring in additional resources if the budget allows. Communicate potential delays to stakeholders early.","Velocity drops significantly during sprints focused on these work items. Developers report that tasks are taking longer than estimated during daily stand-ups.","Project Manager","TBD","Open"
RISK-007,Technical,"The implementation of idempotent consumers (WI-012) is flawed, leading to data duplication or incorrect state updates when RabbitMQ redelivers a message due to a transient failure.","3","4","12","Medium","WI-012","At-least-once message delivery semantics require careful design to avoid side effects on redelivery.","Enforce the use of natural keys from the DICOM data (e.g., StudyInstanceUID, SeriesInstanceUID) with unique constraints in the database. Use 'UPSERT' (INSERT ON CONFLICT...) logic for all database write operations in the consumer. Write specific integration tests that force message redelivery and assert that no duplicate data is created.","Develop and test a data cleanup script to find and merge duplicate records. Manually inspect and handle affected messages that have been routed to the DLQ.","Data integrity checks (WI-021) report duplicate UIDs. Unique constraint violation errors appear in the service logs for the persistence consumer.","Lead Developer","TBD","Open"
RISK-008,Security,"The process for storing and retrieving secrets from the Windows Credential Manager (WI-022) is fragile or has permission issues, making deployment difficult and causing the service to fail on startup if it cannot access its credentials.","3","4","12","Medium","WI-022, WI-019","Dependency on a specific OS security feature which can be affected by domain policies, user account permissions, and deployment context.","The installer must run with elevated privileges and be responsible for setting up the credentials. The deployment guide must clearly document the exact permissions the 'DICOM Service' user account requires on the credential store. The service must have clear, actionable logging on startup if it fails to retrieve a credential.","Provide a PowerShell script that administrators can run to manually diagnose and fix credential store permissions. As a last resort, fall back to an encrypted configuration section, acknowledging the reduced security posture.","The service fails to start with an 'Access Denied' or similar error related to credentials in the Windows Event Log. The deployment script for setting credentials fails.","DevOps Engineer","TBD","Open"
RISK-009,Operational,"The System Health Dashboard (WI-018) provides inaccurate or misleading information due to bugs in the health probe service (WI-017), leading administrators to miss a real issue or react to a false alarm.","2","3","6","Low","WI-017, WI-018","Complexity of accurately and reliably polling the status of multiple distributed components (DB, MQ, file system).","Implement unit tests for each individual health check (e.g., a check for PostgreSQL, a check for RabbitMQ). Conduct end-to-end testing by deliberately stopping the database or RabbitMQ services and verifying that the dashboard reports the failure within the expected polling interval.","Provide administrators with command-line tools or scripts to independently verify the status of each dependency as a secondary check. Enhance logging in the HealthProbeService to show the raw success/failure result of each check.","The dashboard shows 'All Systems Operational' when the client application is reporting errors related to database connectivity. An administrator manually confirms a service is down, but the dashboard shows it as healthy.","QA Lead","TBD","Open"
RISK-010,Quality,"The automated dependency vulnerability scan (WI-023) identifies a critical vulnerability in a core, non-replaceable library (e.g., `fo-dicom` or EF Core), forcing a difficult choice between accepting the risk or a major project delay.","2","5","10","Medium","WI-023","Dependency on third-party open-source software introduces inherited security risks.","Run the OWASP scan early and frequently in the development process to get early warnings. Keep all third-party libraries updated to their latest stable patch versions. Isolate dependencies with security concerns behind abstraction layers to make them easier to replace if necessary.","Formally document the vulnerability and the decision to accept the risk with stakeholder sign-off. Investigate and apply any available mitigating controls (e.g., network segmentation, input validation) to reduce the exploitability of the vulnerability. Allocate time to replace the component in a future release.","A CI/CD build fails due to a newly discovered high-severity vulnerability in a key dependency. A security audit flags a known CVE in a NuGet package.","Security Lead","TBD","Open"
RISK-011,Technical,"The Named Pipes IPC implementation (WI-015, WI-016) is not robust, leading to deadlocks, race conditions, or crashes under concurrent access from multiple client application instances on the same machine.","2","4","8","Medium","WI-015, WI-016, WI-018","IPC requires careful management of system resources and concurrency.","Ensure the Named Pipe server is fully asynchronous and handles one client connection at a time per pipe instance, creating new instances for new clients. Implement timeouts on all client-side calls to prevent the client from hanging indefinitely. Load test the IPC channel with a test utility that simulates multiple, concurrent clients.","Add more detailed tracing and logging to the IPC server to help diagnose deadlocks. If the mechanism proves unstable, replace it with a local TCP or gRPC loopback connection as a more robust alternative.","The client application freezes when checking the service status. The background Windows Service crashes with errors related to System.IO.Pipes. CPU usage for the service spikes during status checks.","Lead Developer","TBD","Open"