"risk_id","risk_category","risk_description","probability","impact","risk_score","priority_level","affected_tasks","root_cause","mitigation_strategy","contingency_plan","monitoring_trigger","owner","due_date","status"
"RISK-001","Technical","The complexity of implementing a high-performance, GPU-accelerated DICOM viewer using the low-level DirectX API via `Vortice.Windows` (WI-024, WI-025) is very high and requires specialized skills. This could lead to significant development delays, performance bottlenecks, visual rendering artifacts, or resource leaks, jeopardizing core clinical usability.","4","5","20","High","EPIC-004: Advanced DICOM Viewer & Tools, specifically WS-008 (High-Performance Image Rendering) and all dependent viewer tools.","Dependency on a complex, low-level graphics API (DirectX) which has a steep learning curve and is prone to subtle implementation errors. Potential skill gap within the development team for this specific technology.","Create a dedicated technical proof-of-concept (PoC) for the rendering pipeline within the first project sprint to validate the approach, measure performance, and identify potential roadblocks. Ensure at least two developers are cross-trained on this component to avoid a single point of failure.","If the DirectX implementation proves too time-consuming or unstable, have a fallback plan to develop a simpler, non-GPU-accelerated renderer using WPF's native capabilities (e.g., WriteableBitmap). This would trade performance for lower risk and faster delivery, with an option to iterate on GPU acceleration in a future release.","PoC fails to meet baseline performance or stability targets by the end of Sprint 1. The assigned developer reports a confidence level below 70% for completing the feature on schedule after the PoC.","Lead Developer","2025-02-28","Not Started"
"RISK-002","Quality","Failure to correctly implement or maintain the custom Serilog enricher for PHI redaction (WI-052) could lead to sensitive patient data being written to log files or the Windows Event Log. This would constitute a severe HIPAA compliance violation and a major data breach.","3","5","15","High","WI-052: Implement Serilog with PHI Redaction, EPIC-007: Auditing & Compliance. Affects the entire system's compliance posture.","The complexity of accurately identifying all forms of PHI within structured and unstructured log messages. The risk of future development introducing new log messages that are not covered by the redaction logic.","Implement a comprehensive suite of automated unit and integration tests that specifically attempt to log various forms of PHI and assert that the output is correctly redacted. Mandate peer review by a security-focused developer for any changes to logging or redaction logic. Use a pattern-based approach for redaction rather than hardcoding field names.","In case of a suspected breach, have a documented incident response plan that includes immediate log quarantine, forensic analysis of the affected logs, and notification procedures as required by HIPAA.","A manual or automated code scan detects a direct logging call that bypasses the PHI redaction mechanism. A QA test reveals any unmasked PHI in log outputs.","QA Lead","2025-03-15","Not Started"
"RISK-003","External","The system's core functionality is entirely dependent on pre-installed instances of PostgreSQL and RabbitMQ. An outage, misconfiguration, or version incompatibility of either of these third-party services will cause a complete failure of the background Windows Service, halting all DICOM ingestion and other asynchronous tasks.","3","5","15","High","All asynchronous operations: DICOM C-STORE (WI-018), printing (WI-035), PDF export (WI-042), and database persistence (WI-022).","Architectural dependency on external services for core functionality, as specified in REQ-1-002. The application does not bundle these services, placing the burden of their reliability on the deploying organization's infrastructure.","Implement robust connection resiliency (e.g., using Polly for retries with exponential backoff) for both PostgreSQL and RabbitMQ clients. The System Health Dashboard (WI-065) and alerting (WI-066) are critical for early detection. The Deployment Guide must include detailed, validated configuration and troubleshooting steps for these dependencies.","The application is designed to queue work in RabbitMQ, which will persist through a broker restart. The Administrator's Guide must contain clear procedures for recovering from a broker/database outage, including how to monitor the Dead-Letter Queue (DLQ) for messages that failed during the outage.","The System Health Dashboard shows a disconnected state for either PostgreSQL or RabbitMQ for more than 5 minutes. The critical error alerting system sends an email due to persistent connection failures.","DevOps Engineer","2025-04-30","Not Started"
"RISK-004","Technical","The implementation of saving annotations as DICOM Grayscale Softcopy Presentation State (GSPS) objects (WI-030) is notoriously complex. An incorrect implementation could result in non-compliant or corrupt GSPS files that are not interoperable with other DICOM systems, defeating the purpose of using a standard.","4","3","12","Medium","WI-030: Implement Saving Annotations as DICOM GSPS. Impacts the reliability and interoperability of the annotation feature.","Inherent complexity and strictness of the DICOM standard for GSPS objects, which involves correctly referencing multiple UIDs and structuring graphical annotation data.","Acquire or create a validation suite of DICOM GSPS objects from other trusted viewers. Implement a dedicated integration test that creates a GSPS object and then validates it using a reputable third-party DICOM toolkit (e.g., dcmtk). Allocate specific time for research and prototyping this feature.","If a fully compliant GSPS implementation proves too costly or time-consuming for the initial release, a simpler, proprietary format for saving annotations (e.g., JSON file alongside the study) could be used as a short-term solution, with a clear product backlog item to achieve full GSPS compliance in a subsequent release.","Generated GSPS files fail validation against a third-party toolkit. Users report that annotations saved by the application cannot be opened in other viewers.","Lead Developer","2025-06-15","Not Started"
"RISK-005","Timeline","The project contains a high number of features with 'High' or 'Critical' complexity ratings (e.g., DirectX renderer, GSPS, PHI redaction, async architecture). The cumulative effect of estimation errors on these complex tasks could lead to significant schedule slippage and delay the project's completion date.","4","4","16","High","Overall project timeline, particularly EPIC-004 (Viewer), EPIC-007 (Auditing), and EPIC-001 (Core Architecture).","The project combines multiple technically challenging domains: medical imaging, enterprise messaging, systems programming, and stringent security compliance, leading to high inherent complexity and estimation uncertainty.","Employ agile development practices with short sprints (2 weeks) and regular reassessment of priorities and estimates. Tackle the highest-risk, highest-complexity items (like the DirectX PoC) early in the timeline to gain clarity. Maintain a prioritized backlog to allow for scope negotiation if delays occur.","Identify a Minimum Viable Product (MVP) feature set early on. If the project falls behind schedule, features outside the MVP scope (e.g., advanced hanging protocols, email integration) can be deferred to a later release to protect the core delivery date.","Velocity tracking shows the team is consistently completing fewer story points than planned for two consecutive sprints. A critical-path task is delayed by more than 20% of its original estimate.","Project Manager","2025-01-31","In Progress"
"RISK-006","Operational","The installer's prerequisite check for database and message queue connectivity (WI-063) is a critical deployment gatekeeper. A buggy or unreliable implementation could prevent successful installations, or worse, allow installation in a non-functional state, leading to significant support costs and customer dissatisfaction.","3","4","12","Medium","WI-063: Implement Installer Prerequisite Check. Impacts the entire deployment and first-run experience.","The MSIX packaging format offers limited native support for complex prerequisite checks with user input, forcing a less ideal in-application, first-run implementation. This process must handle a wide variety of network and configuration environments.","Develop the first-run configuration dialog as a standalone, testable module. Create a comprehensive test matrix covering various scenarios: correct configuration, incorrect passwords, firewalled ports, missing `pgcrypto` extension, etc. Provide clear, actionable error messages to the user.","The Deployment Guide must provide a detailed manual configuration guide as a fallback for customers who encounter issues with the automated check. The guide should explain how to manually create the configuration file with the correct connection strings.","Internal QA testing reveals more than a 10% failure rate for the first-run configuration process across different test environments. The first user support tickets are related to installation failures.","Lead QA Engineer","2025-07-31","Not Started"
"RISK-007","Security","The logic preventing an administrator from deleting or demoting the last remaining administrator account (WI-046) is a critical safeguard. A flaw in this logic could allow an admin to accidentally lock everyone, including themselves, out of the system's administrative functions, requiring manual database intervention to recover.","2","5","10","Medium","WI-046: Implement 'Add User' and 'Edit User' Logic. Affects system administrability and recoverability.","A single point of failure in a business rule that protects a critical system state. A potential race condition if two admins are performing user management simultaneously.","The check for the last administrator must be performed within a database transaction along with the user update/delete operation to prevent race conditions. This specific scenario must be covered by a dedicated, non-negotiable integration test.","The Administrator's Guide must include a 'Disaster Recovery' section detailing the SQL commands required to manually re-assign the administrator role to a user directly in the PostgreSQL database.","A code review identifies that the 'last admin' check is performed outside the database transaction. The integration test for this scenario fails.","Lead Developer","2025-05-15","Not Started"
"RISK-008","Resource","The project requires a diverse and specialized skillset, including WPF, DirectX, DICOM protocols, RabbitMQ, and PostgreSQL with `pgcrypto`. There is a significant risk of a key-person dependency, especially on the developer tasked with the DirectX rendering engine, whose departure or unavailability could severely impact the project timeline.","3","4","12","Medium","EPIC-004 (Viewer), EPIC-003 (DICOM Core), EPIC-001 (Architecture).","Concentration of highly specialized knowledge required for critical components in a small number of team members.","Enforce a policy of pair programming on all critical and complex components (especially the DirectX renderer). Mandate thorough code documentation and architectural decision records. Schedule regular internal knowledge-sharing sessions on these specialized topics. Identify secondary owners for each critical component.","Maintain a budget for short-term external contractors or consultants with the required specialized skills. If a key person is lost, the project plan will be immediately re-evaluated to pause non-essential work and focus all effort on knowledge transfer and onboarding a replacement.","Only one developer is contributing to a critical repository (e.g., the rendering engine) over a one-month period. A key developer announces their departure.","Development Manager","2025-02-15","In Progress"