"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"WI-008","Define User, Role, and PasswordHistory Entities","Create C# entity classes for `User`, `Role`, and `PasswordHistory` using EF Core Code-First. The `User` entity will include fields for username, password hash, role foreign key, and flags like `isActive` and `isTemporaryPassword`. Configure relationships and constraints.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-01-17","6.33","5","database,ef-core,backend,security","Sprint 1","Establish core security foundation (auth, secrets), reliable background service, and de-risk high-performance viewer with a technical spike.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-002","","EF Core 8,C#,PostgreSQL","Medium","Low","EF Core `Add-Migration` command successfully generates a migration script based on the entities. The migration can be applied to a PostgreSQL database without errors, creating the necessary tables and relationships.","Migration script generated and successfully applied. Code reviewed and merged.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-06","2025-01-17","80%","None","PostgreSQL Server availability","Database schema inspection after migration.","This is a foundational schema change.","Core data model for all user-related features."
"WI-009","Implement BCrypt Password Hashing Service","Create a password hashing service that uses the `BCrypt.Net` library to hash passwords for storage and verify passwords during login. This service will be a core security component used by authentication and user management.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-01-17","6","3","security,backend,cryptography","Sprint 1","Establish core security foundation (auth, secrets), reliable background service, and de-risk high-performance viewer with a technical spike.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","","C#,Cryptography,BCrypt","Medium","Medium","The `HashPassword` method returns a valid BCrypt hash string. The `VerifyPassword` method returns true for a correct password and false for an incorrect one. Hashing the same password twice produces two different hash strings, verifying salt generation.","Unit tests pass with 100% coverage. Code reviewed by another senior developer.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-06","2025-01-17","80%","None","","Extensive unit testing for all hashing and verification logic.","Critical security component.","Required for storing user passwords securely."
"WI-013","Implement Authentication Service","Create an `AuthenticationService` that orchestrates the login process: fetch user from DB via repository, verify password hash, handle disabled accounts, and create a user session object upon success.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-01-17","6.33","5","backend,security,authentication","Sprint 1","Establish core security foundation (auth, secrets), reliable background service, and de-risk high-performance viewer with a technical spike.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","WI-008,WI-009","C#,EF Core 8","Medium","Medium","Returns a success result with user details (including role) for valid credentials. Returns a failure result for invalid credentials or disabled accounts. Does not differentiate between 'user not found' and 'wrong password' in its primary failure response to prevent user enumeration.","Unit tests cover all authentication scenarios (success, wrong password, disabled account, user not found). Code reviewed and merged.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-06","2025-01-17","80%","None","","Unit testing of all authentication logic paths.","Core service for application access.","Depends on the user data model and password hashing."
"WI-011","Implement Secure Credential Storage Service","Develop a service that uses the Windows Credential Manager API to securely store and retrieve sensitive credentials. This service will be registered in the DI container for application-wide use.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-01-17","6.33","3","security,backend,windows-api","Sprint 1","Establish core security foundation (auth, secrets), reliable background service, and de-risk high-performance viewer with a technical spike.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","US-023","","C#,.NET,Windows Credential Manager API","Medium","Medium","Credentials saved via the service are visible in the Windows Credential Manager. The application can retrieve the credentials at runtime to connect to services like PostgreSQL. No sensitive credentials exist in appsettings.json or other config files in a production build.","Integration test that saves and retrieves a secret passes. Code reviewed and merged.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-06","2025-01-17","80%","None","Windows OS","Integration testing on a Windows machine; manual check of config files.","Requires correct permissions for the service account to access credentials.","Required before any service needing credentials can be implemented."
"WI-001","Create Windows Service Project using Generic Host","Scaffold a new .NET 8 Worker Service project. Configure Program.cs to use the Generic Host builder (`Host.CreateDefaultBuilder`), add support for running as a Windows Service (`UseWindowsService`), and set up DI container and basic Serilog logging.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-01-17","6.33","1","backend,architecture,windows-service","Sprint 1","Establish core security foundation (auth, secrets), reliable background service, and de-risk high-performance viewer with a technical spike.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","US-020","",".NET 8,Microsoft.Extensions.Hosting,Serilog","Low","Low","The project builds successfully. The service can be installed, started, and stopped on a Windows machine using sc.exe. Basic logging with Serilog is configured and writes to a file upon service start/stop.","Service installs and runs successfully. Code reviewed and merged.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-06","2025-01-17","80%","None","Windows OS","Manual installation and verification in services.msc; check for log file creation.","Foundational for all background processing.","Foundation for all background processing."
"WI-002","Implement Automatic Service Recovery","Create or update a deployment script (e.g., PowerShell) that uses `sc.exe failure` to configure the service's recovery options to 'Restart the Service' for first, second, and subsequent failures.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-01-17","3.17","","devops,powershell,windows-service","Sprint 1","Establish core security foundation (auth, secrets), reliable background service, and de-risk high-performance viewer with a technical spike.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","US-020","WI-001","PowerShell,Windows Service Control Manager (sc.exe)","Low","Low","After running the script, the service's properties in `services.msc` show the correct recovery settings. Killing the service process via Task Manager results in an automatic restart by the Windows Service Control Manager.","Script created and verified to set recovery options correctly. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-06","2025-01-17","80%","None","Windows OS","Manual verification in services.msc and by terminating the process.","Included as part of the installation process.","Requires the service to be created before its recovery options can be configured."
"WI-006","Scaffold WPF Project with MVVM, DI, and Base Shell","Create a new .NET 8 WPF project. Integrate `Microsoft.Extensions.DependencyInjection`. Set up the basic MVVM structure with folders for Views, ViewModels, and Models. Create a MainWindow and a MainViewModel to act as the application shell.","Task","Sprint Backlog","Critical","mid.frontend.dev@company.com","product.owner@company.com","2025-01-17","6.33","2","frontend,wpf,architecture,mvvm","Sprint 1","Establish core security foundation (auth, secrets), reliable background service, and de-risk high-performance viewer with a technical spike.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","US-021","","WPF,MVVM,Dependency Injection,C#","Low","Low","The application launches and displays the MainWindow. The MainWindow's DataContext is set to an instance of MainViewModel resolved from the DI container. A simple binding from a ViewModel property to a TextBlock in the View works correctly.","Project structure created and DI is functional. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-06","2025-01-17","80%","None","","Launch application and verify UI and data binding.","Foundation for all client-side UI.","Foundation for all client-side UI."
"WI-012","Implement Login View and ViewModel","Create a WPF View for the login screen with fields for username and password, and a corresponding LoginViewModel with data binding properties and an ICommand for the login action. The ViewModel will call an authentication service.","Task","Sprint Backlog","Critical","mid.frontend.dev@company.com","product.owner@company.com","2025-01-17","6.33","","frontend,wpf,security,mvvm","Sprint 1","Establish core security foundation (auth, secrets), reliable background service, and de-risk high-performance viewer with a technical spike.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","WI-006,WI-013","WPF,XAML,MVVM","Medium","Low","The login view is displayed on application startup. User input is correctly bound to ViewModel properties. Successful authentication navigates to the main application window. Failed authentication displays a generic, non-specific error message.","E2E test of login process passes. Code reviewed and merged.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-06","2025-01-17","80%","Backend team for AuthenticationService integration.","","E2E testing of the login process for success and failure cases.","Entry point for the application UI.","Requires the app shell and the authentication service it calls."
"WI-024","SPIKE: De-risk DirectX Rendering in WPF using Vortice.Windows","Create a time-boxed Proof of Concept (PoC) to validate the integration of `Vortice.Windows` into the WPF project for DirectX rendering. The goal is to create a custom WPF control that hosts a DirectX 11 swap chain, implement a basic rendering loop, and verify resource management to mitigate RISK-001.","Spike","Sprint Backlog","Critical","senior.frontend.specialist@company.com","product.owner@company.com","2025-01-17","16.5","8","spike,poc,directx,wpf,risk-mitigation","Sprint 1","Establish core security foundation (auth, secrets), reliable background service, and de-risk high-performance viewer with a technical spike.","Advanced DICOM Viewer & Tools","EPIC-004","DICOM Management & Printing System","US-009","WI-006","WPF,DirectX,Vortice.Windows,C#","High","High","A custom control in a WPF window successfully displays a solid color or simple shape rendered via DirectX. The application does not leak GPU resources when the window is resized or closed (verified by profiling). A summary document is produced outlining findings, challenges, and a confidence score for proceeding with this approach.","PoC completed and demoed. Findings documented. Decision made on proceeding with DirectX.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-06","2025-01-17","80%","None","","Profiling with GPU performance tools (e.g., in Visual Studio) to check for resource leaks.","This is an exploratory task, not for production deployment.","Mitigates the highest technical risk in the project (RISK-001) early in the lifecycle."
"WI-014","Implement Role-Based UI Control Mechanism","Develop a centralized authorization service and a reusable mechanism (e.g., custom attached properties, value converters) to dynamically show, hide, enable, or disable WPF UI elements based on the current user's role. Ensure checks are also enforced on the backend.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-01-31","10.33","5","security,wpf,backend,architecture","Sprint 2","Implement user and access management, including creation/editing of accounts, role-based controls, and session locking.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-004","WI-013","WPF,XAML,C#","High","Medium","An 'Administration' menu item is visible when an Admin is logged in, and hidden for a Technician. An 'Edit Metadata' button is enabled for an Admin and disabled for a Technician. A direct call to an admin-only service method from a Technician's session context is rejected with an authorization error.","Authorization service and UI mechanisms implemented and reviewed. E2E tests for both roles pass.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-20","2025-01-31","80%","Frontend team for UI integration.","","Unit tests for authorization logic; E2E tests to verify UI state for different roles.","A cross-cutting concern that will be widely used.","Requires the authentication service to establish a user session with a role."
"WI-045","Create User Management View","Develop a WPF view for Administrators that displays all system users in a data grid, showing username, role, and status. Provide UI controls for 'Add', 'Edit', 'Delete', and 'Reset Password' actions. This view must be protected by the RBAC mechanism.","Task","Sprint Backlog","Critical","mid.frontend.dev@company.com","product.owner@company.com","2025-01-31","6.33","5","frontend,wpf,admin,mvvm","Sprint 2","Implement user and access management, including creation/editing of accounts, role-based controls, and session locking.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-002","WI-014","WPF,MVVM,XAML","Medium","Low","An Admin can see a list of all users. Clicking 'Add' opens a dialog to create a new user. The 'Edit' and 'Delete' controls for the admin's own account are disabled. A Technician user cannot access this view.","UI is built, functional, and access is restricted by RBAC. Code reviewed and merged.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-20","2025-01-31","80%","Backend team for user data.","","E2E testing with both Admin and Technician roles.","Core administration feature.","Requires the RBAC mechanism to restrict access."
"WI-046","Implement 'Add User' and 'Edit User' Logic","Create the backend services and ViewModels to support adding a new user (specifying username, role, generating temporary password) and editing an existing user (changing role or status). Enforce business rules like preventing deletion of the last admin. All actions must be audited.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-01-31","10.33","8","backend,admin,security,business-logic","Sprint 2","Implement user and access management, including creation/editing of accounts, role-based controls, and session locking.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-002","WI-050,WI-045","C#,EF Core 8,MVVM","High","Medium","An Admin can create a new Technician user, and the 'force password change' flag is set. An Admin can change a user's role or status (enabled/disabled). An attempt to disable or demote the last administrator account fails with an error. All these actions are recorded in the audit trail.","All business logic implemented and unit tested. E2E tests for creating and editing users pass.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-20","2025-01-31","80%","None","","Unit tests for business rules; E2E tests for user creation and editing.","Contains critical 'last admin' safeguard logic.","Requires audit service and the management UI."
"WI-015","Implement Automatic Session Lock Feature","Create a service that monitors global user inactivity (mouse/keyboard) using low-level Windows hooks (P/Invoke). After 15 minutes of inactivity, trigger an event to display a lock screen overlay. The lock screen requires password re-entry to unlock, preserving the application state.","Task","Sprint Backlog","Critical","senior.frontend.specialist@company.com","product.owner@company.com","2025-01-31","16.5","8","security,wpf,p-invoke,compliance","Sprint 2","Implement user and access management, including creation/editing of accounts, role-based controls, and session locking.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-005","WI-013","C#,P/Invoke,WPF","High","High","After 15 minutes of no user input, a modal lock screen appears. Any user input resets the 15-minute timer. The application state is preserved behind the lock screen. Entering the correct password dismisses the lock screen and restores full interactivity.","Feature is functional and non-bypassable. Performance impact is negligible. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-01-20","2025-01-31","80%","None","Windows OS","Manual and automated E2E tests to verify locking and unlocking. Performance profiling to check hook overhead.","Critical HIPAA compliance feature.","Requires the authentication service to verify the password for unlocking."
"WI-003","Implement RabbitMQ Publisher and Consumer Abstractions","Create interfaces and concrete implementations for a generic RabbitMQ message publisher and consumer. Use the official RabbitMQ.Client library. Configure connection handling, channel management, serialization, and support for durable queues and persistent messages.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-02-14","12.33","8","backend,architecture,rabbitmq,messaging","Sprint 3","Build the core DICOM network functionality, enabling the system to receive studies (C-STORE SCP) and allowing administrators to configure external PACS connections.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","US-006","WI-001","RabbitMQ,.NET 8,C#","High","Medium","The publisher can successfully send a message to a durable queue. The consumer, running in the service, receives and deserializes the message. Messages marked as persistent survive a RabbitMQ broker restart.","Integration test verifies message persistence and delivery. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-03","2025-02-14","80%","None","RabbitMQ Server availability","Integration test that publishes a message and verifies its reception and persistence.","Foundation for all asynchronous processing.","Foundation for all asynchronous processing."
"WI-004","Implement RabbitMQ Dead-Letter Exchange (DLX) Mechanism","Configure RabbitMQ queues with arguments to specify a dead-letter exchange and routing key. Implement a corresponding Dead-Letter Queue (DLQ). The service consumer logic must be updated to NACK messages (with requeue=false) after a configurable number of failed processing attempts.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-02-14","6.33","","backend,rabbitmq,resiliency","Sprint 3","Build the core DICOM network functionality, enabling the system to receive studies (C-STORE SCP) and allowing administrators to configure external PACS connections.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","US-006","WI-003","RabbitMQ,.NET 8","Medium","Low","A message that fails processing N times is removed from the main queue. The failed message is successfully routed to and appears in the DLQ. The message in the DLQ retains its original headers and payload.","Integration test forcing failures verifies message routing to the DLQ. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-03","2025-02-14","80%","None","RabbitMQ Server availability","Integration test that forces processing failures and verifies message routing to the DLQ.","Essential for system reliability and error handling.","Requires the base consumer logic to be in place."
"WI-018","Implement DICOM C-STORE SCP Listener","Using `fo-dicom`, create a DICOM server as an `IHostedService` within the Windows Service. It will listen for incoming C-STORE requests, save DICOM files to a temporary location, and then publish a message to RabbitMQ with metadata for deferred processing.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-02-14","13","5","backend,dicom,integration,fo-dicom","Sprint 3","Build the core DICOM network functionality, enabling the system to receive studies (C-STORE SCP) and allowing administrators to configure external PACS connections.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","US-006","WI-001,WI-003","fo-dicom,.NET 8,DICOM","High","Medium","The service successfully starts and listens on the configured DICOM port. It can accept an association from a C-STORE SCU (e.g., `dcmtk`). Received DICOM files are saved to disk. A message containing metadata of the received study is published to RabbitMQ. A success response is sent back to the SCU.","E2E integration test with an external SCU tool passes. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-03","2025-02-14","80%","None","Test PACS/SCU tool (e.g. dcmtk)","Integration test using an external SCU tool like `storescu` from dcmtk.","Core DICOM ingestion feature.","Requires the service host and RabbitMQ publisher."
"WI-021","Implement DICOM C-ECHO SCU","Develop a utility service that performs a DICOM C-ECHO (verification) request to a specified AE Title, IP, and Port. This will be used in the PACS configuration UI to test connectivity. The function must have a timeout and return a clear success/failure status.","Task","Sprint Backlog","Should Have","junior.fullstack.dev@company.com","product.owner@company.com","2025-02-14","3.17","2","dicom,integration,fo-dicom","Sprint 3","Build the core DICOM network functionality, enabling the system to receive studies (C-STORE SCP) and allowing administrators to configure external PACS connections.","System Administration & Configuration","EPIC-006","DICOM Management & Printing System","US-008","","fo-dicom,.NET 8","Low","Low","When given valid PACS details, the function returns a success status. When given invalid details (wrong port, offline host), the function returns a failure status with a descriptive error. The operation does not block the UI thread.","Integration test against a known test PACS passes. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-03","2025-02-14","80%","None","Test PACS/SCU tool (e.g. dcmtk)","Integration test against a known test PACS.","Utility for admin UI.","Self-contained DICOM utility."
"WI-048","Implement PACS Configuration Management UI","Create a UI for Admins to perform CRUD operations on remote PACS configurations (AE Title, IP, Port). A 'Verify' button will trigger the C-ECHO service. Settings will be stored in a `PacsConfiguration` database table.","Task","Sprint Backlog","Should Have","mid.frontend.dev@company.com","product.owner@company.com","2025-02-14","10.33","3","frontend,wpf,admin,mvvm,dicom","Sprint 3","Build the core DICOM network functionality, enabling the system to receive studies (C-STORE SCP) and allowing administrators to configure external PACS connections.","System Administration & Configuration","EPIC-006","DICOM Management & Printing System","US-008","WI-021","WPF,MVVM,EF Core 8","Medium","Low","An Admin can add, edit, and delete a PACS configuration. The saved configuration is displayed in a list. Clicking 'Verify' on a valid configuration shows a 'Success' message. Clicking 'Verify' on an invalid configuration shows a 'Failure' message.","Full CRUD functionality implemented and tested. C-ECHO verification works. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-03","2025-02-14","80%","Backend for C-ECHO service.","Test PACS/SCU tool (e.g. dcmtk)","E2E test of adding, verifying, and deleting a PACS configuration.","Core admin configuration screen.","The UI is dependent on the verification service for its 'Verify' feature."
"WI-019","Implement DICOM C-FIND SCU","Create a service for the WPF client that uses `fo-dicom` to act as a C-FIND SCU. It will construct a C-FIND request from user search criteria, send it to a configured remote PACS, and parse the responses into a list of study results.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-02-28","10.33","5","dicom,integration,fo-dicom,backend","Sprint 4","Deliver core clinical workflow: query remote PACS for studies, enable secure PHI redaction in logs, and establish a comprehensive audit trail.","DICOM Core Functionality","EPIC-003","DICOM Management & Printing System","US-007","WI-048","fo-dicom,.NET 8,DICOM","High","Medium","The client can successfully send a C-FIND request to a test PACS. It correctly receives and parses multiple C-FIND responses. The parsed results are returned as a list of structured objects to the calling ViewModel. The operation is fully asynchronous and does not block the UI.","Integration test against a known test PACS passes. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-17","2025-02-28","80%","None","Test PACS/SCU tool (e.g. dcmtk)","Integration test against a known test PACS (e.g., Orthanc, dcm4chee).","Enables searching remote systems.","Requires PACS configuration to know where to send the query."
"WI-020","Implement DICOM C-MOVE SCU","Create a service for the WPF client that uses `fo-dicom` to act as a C-MOVE SCU. It will take a list of studies to retrieve and send a C-MOVE request to a remote PACS, directing it to send the studies to our application's C-STORE SCP.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-02-28","9.33","3","dicom,integration,fo-dicom,backend","Sprint 4","Deliver core clinical workflow: query remote PACS for studies, enable secure PHI redaction in logs, and establish a comprehensive audit trail.","DICOM Core Functionality","EPIC-003","DICOM Management & Printing System","US-007","WI-018,WI-019","fo-dicom,.NET 8,DICOM","High","High","A C-MOVE request is successfully sent to the remote PACS with our SCP's AE Title as the destination. The remote PACS initiates a C-STORE operation to our application's SCP. The client receives status updates (e.g., Pending, Success, Failure) from the C-MOVE response. The UI provides feedback on the retrieval progress.","E2E test of C-FIND, C-MOVE, and local verification passes. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-17","2025-02-28","80%","None","Test PACS/SCU tool (e.g. dcmtk)","E2E test: C-FIND a study, C-MOVE it, and verify its existence in the local database and file store.","Requires correct network configuration between PACS and the application's SCP.","Requires the SCP to receive the studies and the C-FIND to know what to retrieve."
"WI-052","Implement Serilog with PHI Redaction","Configure Serilog to write to a rolling text file and the Windows Event Log. Implement a custom Serilog `IDestructuringPolicy` or `ILogEventEnricher` that identifies and masks properties tagged as PHI before they are written to any log sink.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-02-28","10.33","5","security,compliance,hipaa,logging,serilog","Sprint 4","Deliver core clinical workflow: query remote PACS for studies, enable secure PHI redaction in logs, and establish a comprehensive audit trail.","Auditing & Compliance","EPIC-007","DICOM Management & Printing System","US-022","","Serilog,C#,.NET 8","High","High","A log message like `Processing study for patient {@Patient}` with a patient object appears in the log file with patient properties redacted. Log events are correctly written to both the text file and the Windows Event Log. The redaction logic is robust and does not crash on unexpected data.","Custom enricher/policy implemented. Unit tests with 100% coverage pass. Security review completed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-17","2025-02-28","80%","None","","Unit tests that attempt to log objects containing PHI and assert the output is redacted.","Critical security and compliance feature.","Foundational security requirement for all logging."
"WI-050","Design and Implement AuditLog Entity and Service","Create the `AuditLog` entity in EF Core to store event details: user ID, timestamp, event type, details (JSONB), and correlation ID. Develop a centralized `IAuditService` that other services will call to record actions.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-02-28","6.33","3","backend,database,security,auditing","Sprint 4","Deliver core clinical workflow: query remote PACS for studies, enable secure PHI redaction in logs, and establish a comprehensive audit trail.","Auditing & Compliance","EPIC-007","DICOM Management & Printing System","US-003","WI-008","EF Core 8,C#","Medium","Low","The `AuditLog` table is created via EF Core migration. Calling `IAuditService.LogEventAsync` creates a new record in the `AuditLog` table with all relevant details. The service can be injected and used from any other service.","AuditService and entity are implemented. Unit and integration tests pass.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-17","2025-02-28","80%","None","","Unit tests for the AuditService; integration test to verify DB record creation.","Foundation for all audit logging.","Extends the core database schema."
"WI-051","Integrate Auditing into All Required Workflows","Refactor all relevant business services (e.g., UserService, DicomEditService) to inject and call the `IAuditService` for all significant auditable events (user create/delete/edit, password reset, metadata edits, working copy creation).","Task","Sprint Backlog","Critical","junior.fullstack.dev@company.com","product.owner@company.com","2025-02-28","10.33","2","backend,security,auditing","Sprint 4","Deliver core clinical workflow: query remote PACS for studies, enable secure PHI redaction in logs, and establish a comprehensive audit trail.","Auditing & Compliance","EPIC-007","DICOM Management & Printing System","US-003","WI-050","C#,Dependency Injection","Medium","Medium","Resetting a user password creates a 'PasswordReset' audit log entry. Editing a DICOM tag creates a 'MetadataModified' entry with old and new values. Deleting a user creates a 'UserDeleted' audit log entry.","All required workflows have audit calls. Integration tests verify log creation.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-17","2025-02-28","80%","None","","Integration tests to verify log creation for each audited action.","A cross-cutting concern requiring changes in multiple services.","This task implements the usage of the audit service."
"WI-053","Implement Audit Trail Viewer","Create a read-only UI for Administrators to view the `AuditLog` table. The interface must provide controls to filter by user and date range, and include an 'Export to CSV' feature for the filtered data.","Task","Sprint Backlog","Critical","mid.frontend.dev@company.com","product.owner@company.com","2025-02-28","10.33","3","frontend,wpf,admin,auditing","Sprint 4","Deliver core clinical workflow: query remote PACS for studies, enable secure PHI redaction in logs, and establish a comprehensive audit trail.","Auditing & Compliance","EPIC-007","DICOM Management & Printing System","US-003","WI-014,WI-050","WPF,MVVM,EF Core 8","Medium","Low","An Admin can view a chronological list of all audit events. Filtering by a specific user shows only events initiated by that user. Filtering by a date range limits the results accordingly. The 'Export to CSV' button generates a CSV file of the currently filtered view.","UI is functional, including filtering and export. E2E tests pass. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-02-17","2025-02-28","80%","None","","E2E test: perform an audited action, then open the viewer, filter for it, and export it.","Admin-only compliance feature.","Requires the audit data to exist and the RBAC mechanism to protect the view."
"WI-022","Develop DICOM Metadata Persistence Consumer","Create an `IHostedService` that consumes messages from the DICOM ingestion RabbitMQ queue. It will parse the metadata, map it to EF Core entities (Patient, Study, Series, Image), and save the changes to the PostgreSQL database idempotently.","Task","Sprint Backlog","Critical","senior.backend.dev@company.com","product.owner@company.com","2025-03-14","13","","backend,rabbitmq,ef-core,postgresql","Sprint 5","Deliver the high-performance DICOM viewer with core manipulation tools, building on the Sprint 1 spike, and finalize session security features.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","US-006","WI-003,WI-008,WI-018","RabbitMQ,EF Core 8,.NET 8,PostgreSQL","High","Medium","The consumer successfully processes a message from the queue. Correct records for Patient, Study, Series, and Image are created or updated in the database. The message is acknowledged (ACK'd) and removed from the queue upon successful processing. If database insertion fails, the message is negatively-acknowledged (NACK'd) for retry or DLQ routing.","Integration test of E2E flow from message to DB passes. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-03-03","2025-03-14","80%","None","","Integration test verifying the E2E flow from RabbitMQ message to database records.","Core of the asynchronous DICOM ingestion pipeline.","Consumes messages produced by the SCP and uses the DB schema."
"WI-023","Implement Hierarchical File Storage Logic","As part of the persistence consumer, develop logic to move the received DICOM files from a temporary location to the permanent, structured storage path: `[Storage Path]\[PatientID]\[StudyInstanceUID]\[SeriesInstanceUID]`.","Task","Sprint Backlog","Critical","junior.fullstack.dev@company.com","product.owner@company.com","2025-03-14","6.33","","backend,file-io","Sprint 5","Deliver the high-performance DICOM viewer with core manipulation tools, building on the Sprint 1 spike, and finalize session security features.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","US-006","WI-022","C#,.NET 8,File I/O","Low","Low","DICOM files are correctly moved to a hierarchical folder structure based on their metadata. The `filePath` property in the `Image` database entity is updated with the final, correct location. The file move operation failure results in the entire persistence transaction being rolled back.","Integration test verifies correct file locations after processing. Code reviewed.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2025-03-03","2025-03-14","80%","None","","Integration test that verifies file locations after processing a study.","Must be transactional with the DB persistence.","This logic is part of the successful completion of the persistence task."