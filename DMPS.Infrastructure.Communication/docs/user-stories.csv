story_id,epic,title,user_role,description,priority,story_points,dependencies,acceptance_criteria_1,acceptance_criteria_2,acceptance_criteria_3,technical_tasks,definition_of_done
US-001,EPIC-001,Establish Core Application Framework,"Developer, System Architect","As a Developer, I want a well-structured, multi-project .NET solution with Dependency Injection and Hosting configured, so that we have a clean, maintainable, and scalable foundation for building all application features.","Must Have",8,"","Given the solution is opened in an IDE, When the projects are inspected, Then the solution contains separate projects for Client.Wpf, Service.Worker, Core, Infrastructure, and DataAccess, all targeting .NET 8.","Given the WPF Client or Windows Service application is started, When the application lifetime begins, Then the .NET Generic Host is used to build a service provider and manage application startup and shutdown.","Given the source code for both the client and service, When services are needed in a class, Then they are registered with appropriate lifetimes (Singleton, Scoped, Transient) in a central location and resolved via constructor injection.",WI-001, WI-002,"Code is peer-reviewed and merged into the main branch. All projects compile successfully against .NET 8. Dependency Injection is correctly configured in both the WPF client and Windows Service entry points. A sample service can be successfully registered and resolved in both applications. Unit tests are added for any new utility or base classes with >80% coverage."
US-002,EPIC-002,"Log in to the Application","Registered System User","As a Registered System User, I want to securely log in to the application using my unique username and password, so that I can gain access to the system and its features.","Must Have",8,US-003,"Given I am on the login screen, When I enter a valid username and the correct password and click 'Login', Then the login window closes and the main application window is displayed.","Given I am on the login screen, When I enter a valid username but an incorrect password, Then a generic error message 'Invalid username or password.' is displayed, the password field is cleared, and I remain on the login screen.","Given I am on the login screen, When I enter a username that does not exist in the system, Then the same generic error message 'Invalid username or password.' is displayed to prevent user enumeration.",WI-004, WI-005, WI-010,"Code is peer-reviewed and merged. Unit tests for the AuthenticationService are written, covering success, failure (bad password), and failure (unknown user) scenarios. Passwords are confirmed to be stored and verified using BCrypt. The UI adheres to the design specification. E2E tests for a successful and failed login are passing. All sensitive credentials (like DB connection strings) are loaded from the Windows Credential Manager, not config files."
US-003,EPIC-002,"Define User Roles and Data Model","Developer, Administrator","As a Developer, I want to define the User and Role data models and create repositories for them, so that the system can store and manage user accounts and their associated permissions.","Must Have",5,US-001,"Given the application's data model, When the User and Role entities are inspected, Then they are defined in the Core project with properties for username, password hash, role relationship, and an 'isActive' flag.","Given the DataAccess project, When the EF Core DbContext is configured, Then it includes DbSets for Users and Roles, and a database migration is successfully created from this model.","Given a service needs to perform user management, When it uses the UserRepository, Then it can perform CRUD (Create, Read, Update, Delete) operations on User entities.",WI-007,"Code is peer-reviewed and merged. User and Role entities are defined in the Core project. EF Core DbContext is updated, and a successful migration is generated and can be applied to a PostgreSQL database. A UserRepository is implemented with basic CRUD methods. Unit tests for the repository layer are created using an in-memory or testcontainer database."
US-004,EPIC-002,"Enforce Role-Based Access to Features (RBAC)","Technician, Administrator","As a system user, I want the application's features and UI controls to be enabled or disabled based on my assigned role, so that I only see and can interact with the functions I am authorized to use.","Must Have",8,"US-002, US-003","Given I am logged in as a 'Technician', When I navigate the application, Then the 'Administration' area and the 'Edit DICOM Metadata' button are hidden or disabled.","Given I am logged in as an 'Administrator', When I navigate the application, Then I have access to all features, including the 'Administration' area and the 'Edit DICOM Metadata' button.","Given a user with the 'Technician' role is logged in, When an attempt is made to programmatically call an admin-only API or service, Then the action is rejected with an authorization error.",WI-008,"Code is peer-reviewed and merged. A central IAuthorizationService is implemented and integrated with the user session. UI controls for admin-only features are correctly hidden/disabled for Technician roles. Unit tests for the IAuthorizationService are written for all role/permission combinations. E2E tests are created to log in as each role and verify the UI state."
US-005,EPIC-002,"Automatically Lock Session After Inactivity","Registered System User","As a registered user, I want the application to automatically lock itself after 15 minutes of inactivity, so that sensitive Protected Health Information (PHI) is protected from unauthorized viewing on my unattended workstation.","Must Have",8,US-002,"Given I am logged into the application, When I perform no keyboard or mouse actions for 15 minutes, Then a modal lock screen overlay is displayed, obscuring the entire application window and prompting me for my password.","Given the application is locked, When I enter my correct password and click 'Unlock', Then the lock screen is removed, and my application state is restored exactly as I left it.","Given the application is locked, When I enter an incorrect password, Then an error message is displayed, the password field is cleared, and the session remains locked.",WI-006,"Code is peer-reviewed and merged. The inactivity monitor is implemented with low performance overhead. The lock screen correctly overlays all application content. The unlock mechanism successfully validates the password against the current user's session. E2E tests are created to verify the lock screen appears after a configurable short timeout and can be successfully unlocked."
US-006,EPIC-002,"Encrypt Sensitive Patient Data in the Database","Administrator, Compliance Officer","As an Administrator, I want all Protected Health Information (PHI) stored in the database to be encrypted at the column level, so that we comply with HIPAA technical safeguards and protect patient data from unauthorized access even if the database is compromised.","Must Have",13,"US-003, US-001","Given the application is configured to connect to a PostgreSQL database, When patient data (e.g., Patient Name, Patient ID) is saved, Then the corresponding columns in the database table are stored as encrypted binary data using pgcrypto.","Given the application reads patient data via Entity Framework Core, When a query is executed, Then the encrypted data is transparently decrypted, and the application logic receives the plaintext string values without needing to manage encryption keys.","Given the application installer is run, When it checks prerequisites, Then it must verify that the `pgcrypto` extension is enabled on the target PostgreSQL database before allowing installation to complete.",WI-009,"Code is peer-reviewed and merged. EF Core is configured with custom Value Converters or a similar mechanism to handle pgcrypto functions. Direct inspection of the PostgreSQL database confirms that target PHI columns are unreadable ciphertext. Application-level integration tests confirm that data is written and read back correctly (encrypted/decrypted transparently). The installer prerequisite check is implemented and tested."
US-007,EPIC-003,"Receive and Queue Incoming DICOM Studies","System (External Modality), Technician","As an external DICOM modality, I want to send studies to the application via C-STORE, so that the studies can be ingested for local viewing and processing.","Must Have",21,"US-001, US-003","Given the background Windows Service is running, When an external DICOM SCU sends a study via a C-STORE operation, Then the service accepts the association, receives the DICOM files, and saves them to a temporary staging location.","Given a DICOM file has been successfully received, When the C-STORE operation is handled, Then key metadata is parsed from the file, a message containing this metadata is published to a durable RabbitMQ queue, and a C-STORE success response is immediately sent back to the SCU.","Given a message is published to the DICOM ingestion queue, When a background consumer process picks it up, Then it transactionally writes the metadata to the PostgreSQL database, moves the DICOM file to its permanent hierarchical storage location, and acknowledges the message to remove it from the queue.",WI-011, WI-012, WI-013, WI-014,"Code is peer-reviewed and merged. The entire end-to-end flow is tested: a DICOM file is sent via C-STORE, a message appears in RabbitMQ, a consumer processes it, a new record appears in the PostgreSQL database, and the file is moved to the correct permanent storage folder. The C-STORE response time is measured to be fast and independent of database write time. Error handling (message nack'ing to DLQ) is tested by simulating a database failure."
US-008,EPIC-001,"Check Background Service Health from Client","Technician, Administrator","As a user of the desktop client, I want the application to be able to check the real-time status of the background Windows Service, so that UI features dependent on the service (like printing) can be disabled with immediate feedback if the service is unavailable.","Must Have",5,US-001,"Given the background Windows Service is running, When the WPF client application starts or needs to check the service status, Then it can successfully send a 'PING' message over a Named Pipe and receive a 'PONG' response.","Given the background Windows Service is stopped or has crashed, When the WPF client attempts to check its status, Then the Named Pipe connection fails gracefully with a timeout or connection error, and the application knows the service is offline.","Given the background service is determined to be offline, When I view a feature in the UI that requires the service (e.g., the Print button), Then that feature is disabled, and a tooltip or status message indicates the service is unavailable.",WI-003,"Code is peer-reviewed and merged. Unit tests cover the Named Pipe client and server logic. Integration tests are created that start both the client and service processes and verify successful communication. A test case is created where the service is stopped, and the client correctly handles the connection failure. The UI correctly reflects the service status."