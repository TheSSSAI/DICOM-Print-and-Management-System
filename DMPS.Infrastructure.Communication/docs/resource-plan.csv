task_id,task_name,primary_skill,secondary_skill,complexity_level,estimated_hours,required_experience,team_size,dependencies,critical_path,resource_notes,alternative_approach
EPIC-001,"EPIC-001: Core Architecture & Application Framework",Backend Development,"DevOps,Architecture",High,60.5,Lead,2,"",Yes,"Foundational epic defining the entire application structure. Requires a strong technical lead to oversee and a senior developer to implement.",Stick to a simpler, monolithic architecture if scalability concerns are lower.
STORY-001,"STORY-001: Establish Core Application Framework",Backend Development,"DevOps,Frontend Development",High,34,Senior,1,EPIC-001,Yes,"Establishes the DI/Hosting pattern for both client and service. Critical for maintainability.",Use traditional startup patterns for WPF/Windows Service, but this would create architectural divergence.
TASK-001,"TASK-001: Scaffold .NET solution and projects using Clean Architecture principles",Backend Development,".NET SDK,Visual Studio",Low,3,Junior,1,STORY-001,Yes,"Straightforward scaffolding task, good for any developer to pick up.",Use a standard Visual Studio template, but this might not align with Clean Architecture principles.
TASK-002,"TASK-002: Configure project properties, target frameworks, and initial references",Backend Development,".NET SDK,MSBuild",Low,2,Junior,1,TASK-001,Yes,"Basic configuration task, suitable for a junior developer.",Let defaults stand, but this may lead to inconsistencies later.
TASK-003,"TASK-003: Implement HostBuilder and DI for the WPF Client",Frontend Development,".NET Hosting,Dependency Injection",Medium,8.3,Mid,1,TASK-002,Yes,"Risk TL-001 applies. This is an uncommon pattern for WPF, requiring a developer comfortable with modern .NET hosting.",Use a traditional App.xaml.cs startup without the Generic Host, sacrificing consistency with the backend service.
TASK-004,"TASK-004: Implement HostBuilder and DI for the Windows Service",Backend Development,".NET Hosting,Windows Services",Medium,6.3,Mid,1,TASK-002,Yes,"Ensure proper service lifecycle management (start, stop, dispose) is handled by the host.",Manually manage the service lifecycle without the `UseWindowsService` extension, which is more error-prone.
TASK-005,"TASK-005: Implement Integration Tests for DI/Hosting Setup",Quality Assurance,"Backend Development,.NET Hosting,xUnit",Medium,6,Mid,1,"TASK-003,TASK-004",Yes,"Verifies the core application startup. Assign to a developer or QA with strong testing skills.",Rely on manual verification of startup, but this is not repeatable or reliable.
STORY-002,"STORY-002: Check Background Service Health from Client",Backend Development,"Frontend Development,.NET IPC",High,26.5,Senior,1,STORY-001,Yes,"Implements critical inter-process communication for UI state management. Requires strong async programming skills.",Use a less reliable method like a heartbeat file, but this has higher latency and is less robust.
TASK-006,"TASK-006: Implement Named Pipe Server in Windows Service",Backend Development,".NET IPC,Asynchronous Programming",High,8.7,Senior,1,TASK-004,Yes,"Risk TR-004 applies. Named Pipes can be sensitive to permissions. Assign a senior developer with IPC experience.",Use an asynchronous heartbeat mechanism (e.g., service writes status to a file/DB) as per the contingency plan for risk TR-004.
TASK-007,"TASK-007: Implement Named Pipe Client in Infrastructure Library",Backend Development,".NET IPC,C#",Medium,6.3,Mid,1,TASK-006,Yes,"Risk TR-004 applies. Must handle connection failures and timeouts gracefully to prevent UI hangs.",Read the status from the alternative heartbeat location if the primary IPC is changed.
TASK-008,"TASK-008: Create Integration Test for Named Pipe Communication",Quality Assurance,".NET IPC,Integration Testing,xUnit",High,8.3,Senior,1,"TASK-006,TASK-007",Yes,"Requires careful process orchestration for testing. Assign a senior QA engineer or developer.",Perform manual testing by starting/stopping the service and observing the client UI, which is not scalable.
EPIC-002,"EPIC-002: Security & Compliance (HIPAA)",Backend Development,"Security,Compliance",Critical,218.4,Lead,3,"",Yes,"Critical epic for HIPAA compliance. Requires a dedicated security-focused lead and senior developers.",Descope certain security features for an internal-only release, but this is not viable for production.
STORY-003,"STORY-003: Define User Roles and Data Model",Backend Development,"Database,Entity Framework Core,Security",High,32.7,Senior,1,STORY-001,Yes,"Defines the foundational data structures for all user management and security features.",Use a simpler authentication model (e.g., shared credentials), but this is a major HIPAA violation.
TASK-009,"TASK-009: Define User, Role, and PasswordHistory entities",Backend Development,"Entity Framework Core,Domain-Model",Low,3,Mid,1,TASK-001,Yes,"Core data modeling task.",Combine entities or reduce complexity, but this may limit future security features like password history rules.
TASK-010,"TASK-010: Configure ApplicationDbContext for security entities",Backend Development,"Database,Entity Framework Core",Medium,6,Mid,1,TASK-009,Yes,"Requires understanding of EF Core Fluent API for relationships and constraints.",Rely on EF Core conventions, but this offers less control and may not meet specific requirements.
TASK-011,"TASK-011: Implement UserRepository for user management",Backend Development,"Database,Repository Pattern",Medium,8.3,Mid,1,TASK-010,Yes,"Standard implementation of the repository pattern.",Use the DbContext directly in services, but this violates Clean Architecture principles and couples services to the data layer.
TASK-012,"TASK-012: Write Integration Tests for UserRepository",Quality Assurance,"Database,Testcontainers,Docker",High,10.2,Senior,1,TASK-011,Yes,"Initial setup of Testcontainers requires Docker experience. Assign to a senior QA or dev with DevOps skills.",Use an in-memory database for testing, but this won't catch PostgreSQL-specific issues.
STORY-004,"STORY-004: Log in to the Application",Frontend Development,"Security,Backend Development,MVVM",High,49.6,Senior,1,STORY-003,Yes,"A critical user-facing security feature that ties together UI, backend logic, and data access.",Implement a simpler, non-role-based login, which would not meet project requirements.
TASK-013,"TASK-013: Develop wrapper for Windows Credential Manager",Backend Development,"Security,Infrastructure,Windows API",High,8.3,Senior,1,TASK-001,Yes,"Interaction with native Windows APIs is complex. Assign a senior developer.",Store credentials in an encrypted configuration file, but this is less secure than using the OS-level credential store.
TASK-014,"TASK-014: Integrate credential service into HostBuilder configuration",Backend Development,"Security,Configuration",Medium,4.2,Mid,1,"TASK-013,TASK-003,TASK-004",Yes,"Connects the secure credential storage to the application startup.",Hardcode connection strings during development, ensuring they are never committed.
TASK-015,"TASK-015: Implement AuthenticationService with BCrypt password verification",Backend Development,"Security,Authentication",High,8.3,Senior,1,TASK-011,Yes,"Risk TL-001 applies. Core security logic must be implemented correctly. Assign a senior developer.",Use a simpler hashing algorithm, but this would violate security best practices and compliance requirements.
TASK-016,"TASK-016: Create WPF LoginView and LoginViewModel",Frontend Development,"UI,MVVM,WPF",Medium,10.3,Mid,1,TASK-015,Yes,"Standard MVVM and UI development task.",Use a simpler UI pattern without MVVM, but this would be inconsistent and harder to maintain.
TASK-017,"TASK-017: Implement E2E Test for Login Flow",Quality Assurance,"E2E Testing,UI-Automation,Appium",High,12,Senior,1,TASK-016,No,"Appium/WinAppDriver setup for WPF is complex. Assign a senior QA engineer with UI automation experience.",Rely on manual login testing for each release, which is time-consuming and error-prone.
STORY-005,"STORY-005: Enforce Role-Based Access to Features (RBAC)",Backend Development,"Security,Authorization,Frontend Development",High,49.6,Senior,1,STORY-004,Yes,"Critical for security and HIPAA compliance. Requires careful implementation at both backend and frontend.",Implement permissions via ad-hoc checks, but a centralized service is more maintainable and secure.
TASK-018,"TASK-018: Design and Implement IAuthorizationService",Backend Development,"Security,Authorization,Architecture",High,8.3,Senior,1,TASK-015,Yes,"Risk SR-001 applies. A flaw here is a critical breach. Assign a senior developer with a security mindset.",Place authorization logic directly within each service, but this leads to code duplication and is hard to manage.
TASK-019,"TASK-019: Implement authorization checks in backend services",Backend Development,"Security,Authorization",Medium,10.3,Mid,1,TASK-018,Yes,"Risk SR-001 applies. All privileged operations must be covered. Requires thorough code review.",Omit backend checks and rely only on UI, which is a major security vulnerability that can be easily bypassed.
TASK-020,"TASK-020: Create reusable WPF converters/behaviors for UI authorization",Frontend Development,"WPF,UI,Authorization",Medium,8.3,Mid,1,TASK-018,Yes,"Creates a clean, declarative way to implement RBAC in the UI.",Use procedural code-behind logic to show/hide controls, but this is less maintainable than a XAML-based approach.
TASK-021,"TASK-021: Apply UI authorization rules to application views",Frontend Development,"WPF,UI,Authorization",Low,6,Mid,1,TASK-020,Yes,"Application of the reusable components to the actual UI.",Manually set visibility/enabled properties, which is prone to error if roles or permissions change.
TASK-022,"TASK-022: Create E2E Tests for RBAC UI State",Quality Assurance,"E2E Testing,Security",High,12,Senior,1,TASK-021,No,"Complex E2E tests asserting UI state. Requires a senior QA engineer.",Perform manual exploratory testing for each role, but this is not a scalable regression strategy.
STORY-006,"STORY-006: Automatically Lock Session After Inactivity",Frontend Development,"Security,Session-Lock,P/Invoke",High,49.3,Senior,1,STORY-004,Yes,"Core HIPAA security feature. The technical approach using P/Invoke is high-risk.",Implement a simpler timer based only on events within the app window, accepting it won't detect system-wide inactivity (contingency for TR-002).
TASK-023,"TASK-023: [Spike] Research global input monitoring approaches",Backend Development,"Research,Security,P/Invoke",Critical,6,Senior,1,"",Yes,"Risk TR-002 applies. This spike is to de-risk the technical approach for the entire story. Must be done by a senior dev.",Proceed with an implementation without research, but this carries a high risk of instability or rework.
TASK-024,"TASK-024: Implement user activity monitoring service",Backend Development,"Security,WPF,P/Invoke",High,12,Senior,1,TASK-023,Yes,"Risk TR-002, TL-001 apply. P/Invoke is inherently complex and risky. Assign a senior developer.",Use the alternative WPF-native approach identified in the contingency plan for risk TR-002.
TASK-025,"TASK-025: Create LockScreenView and ViewModel",Frontend Development,"UI,WPF,Security",Medium,10.3,Mid,1,TASK-015,Yes,"Standard UI/ViewModel task for the lock screen.",Reuse the login view, but a dedicated lock screen provides better UX and state management.
TASK-026,"TASK-026: Implement session lock orchestration service",Backend Development,"Session,WPF,Architecture",High,12,Senior,1,"TASK-024,TASK-025",Yes,"Ensuring UI state is perfectly preserved can be tricky. Requires a senior developer.",Simply overlay the screen without saving state, but this leads to a poor user experience and potential data loss.
STORY-007,"STORY-007: Encrypt Sensitive Patient Data in the Database",Backend Development,"Security,Encryption,Database",Critical,37.2,Lead,1,STORY-003,Yes,"A highly complex and critical HIPAA requirement. Success depends on the spike task.",Use application-level encryption, but this is more complex to manage and less performant than using native database functions.
TASK-027,"TASK-027: [Spike] Design and prototype EF Core Value Converters for pgcrypto",Backend Development,"Research,Security,Database",Critical,12,Lead,1,TASK-010,Yes,"Risk TR-003, RR-001 apply. Highly complex task requiring deep EF Core and PostgreSQL knowledge. Assign the most senior backend resource.",Skip the spike and attempt direct implementation, increasing the risk of failure and rework significantly.
TASK-028,"TASK-028: Implement and unit test pgcrypto Value Converters",Backend Development,"Security,Database,Encryption",High,12,Senior,1,TASK-027,Yes,"Risk TR-003, TL-001 apply. Translating the POC to robust production code is complex.",Use a third-party library for EF Core encryption, but this adds an external dependency.
TASK-029,"TASK-029: Apply encryption converters to PHI entities and update migrations",Backend Development,"Database,EF Core,Encryption",Medium,4.2,Mid,1,TASK-028,Yes,"Application of the converters to the data model.",Manually encrypt/decrypt properties in service logic, which is error-prone and inefficient.
TASK-030,"TASK-030: Write Integration Test for transparent encryption",Quality Assurance,"Testing,Security,Encryption",High,10.2,Senior,1,TASK-029,Yes,"Risk QR-001 applies. Requires Testcontainers with the pgcrypto extension enabled. Needs a senior QA engineer.",Manually verify encryption in the database, which is not suitable for regression testing.
EPIC-003,"EPIC-003: Asynchronous DICOM Ingestion Pipeline",Backend Development,"Architecture,Messaging,DICOM",Critical,160.5,Lead,2,"",Yes,"Defines the core, high-throughput data ingestion mechanism. Requires a tech lead and a senior dev with messaging expertise.",Implement a simpler synchronous pipeline writing directly to the DB, but this will not meet performance/reliability requirements.
STORY-008,"STORY-008: Receive and Queue Incoming DICOM Studies",Backend Development,"DICOM,RabbitMQ,Async",Critical,160.5,Senior,2,"STORY-001,STORY-003",Yes,"Large, multi-sprint story covering the entire ingestion pipeline. Requires at least one senior dev with deep knowledge of all involved technologies.",Build a synchronous pipeline, but this would block the C-STORE response and fail under load.
TASK-031,"TASK-031: Implement RabbitMQ connection management service",Backend Development,"RabbitMQ,Infrastructure,Messaging",Medium,8.3,Mid,1,TASK-004,Yes,"Robust connection retry logic is non-trivial.",Have each producer/consumer manage its own connection, but a centralized service is more efficient and reliable.
TASK-032,"TASK-032: Implement RabbitMQ topology declaration service",DevOps,"RabbitMQ,Infrastructure",Medium,8.7,Mid,1,TASK-031,Yes,"Risk SR-002 applies. Incorrect configuration can lead to message loss. Requires careful review.",Manually declare topology in the RabbitMQ management UI, but this is not automated or repeatable.
TASK-033,"TASK-033: Implement fo-dicom C-STORE SCP service",Backend Development,"DICOM,fo-dicom,Networking",Critical,14.3,Senior,1,"",Yes,"Risk EX-001, RR-001, TL-001 apply. fo-dicom has a steep learning curve. Assign a senior developer and budget for learning time. Consider pair programming.",Investigate alternative DICOM libraries, but this would be a significant change requiring a new spike (contingency for EX-001).
TASK-034,"TASK-034: Host C-STORE SCP within a managed IHostedService",Backend Development,"DICOM,Architecture",Medium,6,Mid,1,TASK-033,Yes,"Integrates the DICOM server into the application's hosting model.",Run the DICOM server as a separate, unmanaged process, but this is harder to monitor and control.
TASK-035,"TASK-035: Implement DICOM metadata parsing and publishing",Backend Development,"DICOM,RabbitMQ,fo-dicom",High,10.7,Senior,1,"TASK-031,TASK-033,TASK-034",Yes,"Risk QR-001 applies. This step must be fast to avoid delaying the C-STORE response. Needs a senior developer.",Do minimal parsing and publish the raw file path, but this pushes parsing logic to the consumer and may be less efficient.
TASK-036,"TASK-036: Design idempotent DICOM persistence consumer logic",Backend Development,"Architecture,RabbitMQ,Design",Critical,8,Lead,1,"",Yes,"Risk TR-001 applies. Designing for idempotency is a complex architectural challenge requiring a tech lead.",Ignore idempotency and rely on the DLQ for all failures, but this will cause data duplication if messages are retried.
TASK-037,"TASK-037: Implement RabbitMQ consumer as an IHostedService",Backend Development,"RabbitMQ,Consumer,Service",Medium,10.3,Mid,1,TASK-032,Yes,"Standard boilerplate for a hosted service consumer.",Create a simple console application for the consumer, but integrating it with logging and DI is more difficult.
TASK-038,"TASK-038: Implement consumer's data persistence logic",Backend Development,"Database,EF Core,Consumer",High,14.3,Senior,1,"TASK-011,TASK-036,TASK-037",Yes,"Risk TR-001 applies. All DB writes must be atomic. Requires a senior developer.",Break the persistence into multiple transactions, but this increases the risk of data inconsistency on failure.
TASK-039,"TASK-039: Implement consumer's file management and ack/nack logic",Backend Development,"Consumer,RabbitMQ,File-IO",High,10.7,Senior,1,TASK-038,Yes,"Risk TR-001 applies. This is the final step; logic must be robust to prevent message loss or incorrect processing.",Always ack the message and log errors, but this leads to permanent data loss if processing fails.
TASK-040,"TASK-040: Create E2E Integration Test for the entire DICOM Ingestion Pipeline",Quality Assurance,"E2E Testing,DICOM,Pipeline",Critical,24,Lead,1,"TASK-039,TASK-035",No,"Risk QR-001 applies. Extremely complex test. Assign the lead QA engineer or a senior developer with strong testing/DevOps skills.",Rely entirely on manual testing of the pipeline (contingency for QR-001), but this is slow and not suitable for CI/CD.
TASK-040-01,"TASK-040-01: Setup Testcontainers for PostgreSQL and RabbitMQ in test fixture",Quality Assurance,"Testcontainers,Setup,DevOps",High,6,Senior,1,TASK-040,No,"Requires Docker and Testcontainers expertise.",Use mocked services instead of real dependencies, but this won't catch integration bugs.
TASK-040-02,"TASK-040-02: Implement in-process host startup for Windows Service",Quality Assurance,"Hosting,Integration,Testing",Medium,4,Mid,1,TASK-040,No,"Allows the test to control the service lifecycle.",Test against a pre-deployed service instance, but this makes test setup and isolation more difficult.
TASK-040-03,"TASK-040-03: Implement fo-dicom SCU client logic to send test file",Quality Assurance,"Testing,DICOM,fo-dicom",Medium,6,Mid,1,TASK-040,No,"Requires knowledge of the fo-dicom library from a client (SCU) perspective.",Use a third-party, command-line DICOM SCU tool, but this is harder to automate and integrate into an xUnit test.
TASK-040-04,"TASK-040-04: Implement polling and assertion logic for DB and file system state",Quality Assurance,"Testing,Assertion,Async",Medium,6,Mid,1,TASK-040,No,"Requires writing robust asynchronous polling logic to handle the async nature of the pipeline.",Use fixed delays (`Thread.Sleep`), but this makes tests slow and unreliable.
TASK-040-05,"TASK-040-05: Integrate all parts and stabilize the E2E test",Quality Assurance,"E2E Testing,Stabilization",Medium,2,Senior,1,"TASK-040-01,TASK-040-02,TASK-040-03,TASK-040-04",No,"Final integration step to ensure the complex E2E test is reliable.",Mark the test as 'flaky' and run it manually, defeating the purpose of automation.