Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"EPIC-001: Core Architecture & Application Framework","Establish the foundational architecture for the client-server application, including project structure, dependency injection, hosting, and inter-process communication. This epic ensures a clean, scalable, and maintainable codebase.","Epic","Backlog","Critical","pm@project.com","pm@project.com","","60.5","architecture,foundation","","","DMPS Platform","","","","","","",
"STORY-001: Establish Core Application Framework","As a Developer, I want a well-structured, multi-project .NET solution with Dependency Injection and Hosting configured, so that we have a clean, maintainable, and scalable foundation for building all application features.","Story","Backlog","Critical","tech.lead@project.com","pm@project.com","","34","architecture,setup,di","Sprint 1","EPIC-001: Core Architecture & Application Framework","DMPS Platform","","","EPIC-001","","","",".NET SDK,Visual Studio,WPF,.NET Hosting,Dependency Injection"
"TASK-001: Scaffold .NET solution and projects using Clean Architecture principles","Create the .NET 8 solution file and the initial set of projects (Dmps.Client.Wpf, Dmps.Service.Worker, Dmps.Core, Dmps.Infrastructure, Dmps.DataAccess).","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","3","setup,architecture","Sprint 1","EPIC-001: Core Architecture & Application Framework","DMPS Platform","","","STORY-001","","","",".NET SDK,Visual Studio"
"TASK-002: Configure project properties, target frameworks, and initial references","Set up the dependency graph between the projects (e.g., WPF Client depends on Infrastructure and Core). Configure basic properties like C# language version (12).","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","2","setup,architecture","Sprint 1","EPIC-001: Core Architecture & Application Framework","DMPS Platform","","","STORY-001","TASK-001","","",".NET SDK,MSBuild"
"TASK-003: Implement HostBuilder and DI for the WPF Client","Configure the `App.xaml.cs` file to use `Microsoft.Extensions.Hosting` to set up dependency injection, configuration, and logging for the WPF application.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","8.3","wpf,architecture,di","Sprint 1","EPIC-001: Core Architecture & Application Framework","DMPS Platform","","Risk TL-001: Uncommon pattern for WPF requires careful setup.","STORY-001","TASK-002","","",".NET Hosting,Dependency Injection,WPF"
"TASK-004: Implement HostBuilder and DI for the Windows Service","Configure the `Program.cs` of the service project to use `Microsoft.Extensions.Hosting` with the `UseWindowsService` extension to set up a managed background service.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","6.3","service,architecture,di","Sprint 1","EPIC-001: Core Architecture & Application Framework","DMPS Platform","","Risk TL-001: Ensure proper service lifecycle management.","STORY-001","TASK-002","","",".NET Hosting,Windows Services"
"TASK-005: Implement Integration Tests for DI/Hosting Setup","Create basic integration tests for both the client and service to ensure that the DI container is configured correctly and can resolve key services.","Task","Backlog","High","qa.team@project.com","tech.lead@project.com","","6","testing,architecture","Sprint 1","EPIC-001: Core Architecture & Application Framework","DMPS Platform","","","STORY-001","TASK-003,TASK-004","","",".NET Hosting,xUnit"
"STORY-002: Check Background Service Health from Client","As a user of the desktop client, I want the application to be able to check the real-time status of the background Windows Service, so that UI features dependent on the service (like printing) can be disabled with immediate feedback if the service is unavailable.","Story","Backlog","Critical","tech.lead@project.com","pm@project.com","","26.5","ipc,health-check,service-communication","Sprint 2","EPIC-001: Core Architecture & Application Framework","DMPS Platform","","","EPIC-001","STORY-001","","",".NET IPC,C#,Asynchronous Programming,Integration Testing"
"TASK-006: Implement Named Pipe Server in Windows Service","Create an IHostedService that hosts a `NamedPipeServerStream` to listen for synchronous client connections and respond to health check messages.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","8.7","ipc,service,networking","Sprint 2","EPIC-001: Core Architecture & Application Framework","DMPS Platform","","Risk TR-004: Named Pipes can be sensitive to permissions and security contexts.","STORY-002","TASK-004","","",".NET IPC,C#,Asynchronous Programming"
"TASK-007: Implement Named Pipe Client in Infrastructure Library","Create a client-side service that can connect to the Named Pipe server, send a request, and await a response with a configurable timeout.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","6.3","ipc,client,networking","Sprint 2","EPIC-001: Core Architecture & Application Framework","DMPS Platform","","Risk TR-004: Must handle connection failures and timeouts gracefully.","STORY-002","TASK-006","","",".NET IPC,C#"
"TASK-008: Create Integration Test for Named Pipe Communication","Write a test that programmatically starts a host for the service-side pipe server and uses the client to verify successful communication.","Task","Backlog","High","qa.team@project.com","tech.lead@project.com","","8.3","testing,ipc","Sprint 2","EPIC-001: Core Architecture & Application Framework","DMPS Platform","","Testing IPC requires careful process orchestration.","STORY-002","TASK-006,TASK-007","","",".NET IPC,Integration Testing,xUnit"
"EPIC-002: Security & Compliance (HIPAA)","Implement all security-related features, including user authentication, role-based access control, session management, and data encryption, to meet HIPAA requirements and ensure the system is secure.","Epic","Backlog","Critical","pm@project.com","pm@project.com","","218.4","security,hipaa,compliance","","","DMPS Platform","","","","","","",
"STORY-003: Define User Roles and Data Model","As a Developer, I want to define the User and Role data models and create repositories for them, so that the system can store and manage user accounts and their associated permissions.","Story","Backlog","Critical","tech.lead@project.com","pm@project.com","","32.7","database,ef-core,domain-model,security","Sprint 1","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","EPIC-002","STORY-001","","",".NET Core,Entity Framework Core,Repository Pattern,Testcontainers"
"TASK-009: Define User, Role, and PasswordHistory entities","Create the POCO classes for User, Role, and PasswordHistory in the Dmps.Core project, including all required properties like password hash, flags, and relationships.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","3","database,ef-core,domain-model","Sprint 1","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","STORY-003","TASK-001","","",".NET Core,Entity Framework Core,C#"
"TASK-010: Configure ApplicationDbContext for security entities","Update the EF Core DbContext in the DataAccess project to include DbSets for the new entities. Configure relationships (one-to-many), keys, and constraints using the Fluent API.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","6","database,ef-core","Sprint 1","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","STORY-003","TASK-009","","",".NET Core,Entity Framework Core"
"TASK-011: Implement UserRepository for user management","Create an IUserRepository interface and a concrete implementation providing asynchronous methods for common user data operations (GetUserByUsernameAsync, AddUserAsync, UpdateUserAsync).","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","8.3","database,repository","Sprint 2","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","STORY-003","TASK-010","","",".NET Core,Entity Framework Core,Repository Pattern"
"TASK-012: Write Integration Tests for UserRepository","Create integration tests for the UserRepository using a real database instance via Testcontainers (PostgreSQL) to verify that data is correctly persisted and retrieved.","Task","Backlog","High","qa.team@project.com","tech.lead@project.com","","10.2","testing,database,testcontainers","Sprint 2","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Initial setup of Testcontainers requires Docker on the build agent.","STORY-003","TASK-011","","",".NET Core,Testcontainers,Docker,xUnit"
"STORY-004: Log in to the Application","As a Registered System User, I want to securely log in to the application using my unique username and password, so that I can gain access to the system and its features.","Story","Backlog","Critical","tech.lead@project.com","pm@project.com","","49.6","security,authentication,login","Sprint 2","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","EPIC-002","STORY-003","","",".NET Core,WPF,MVVM,Security,BCrypt,Appium"
"TASK-013: Develop wrapper for Windows Credential Manager","Create a service in the Infrastructure project that abstracts the storage and retrieval of secrets (like the database password) using the Windows Credential Manager.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","8.3","security,infrastructure,configuration","Sprint 1","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Interaction with native Windows APIs can be complex.","STORY-004","TASK-001","","",".NET Core,Windows API,Security,C#"
"TASK-014: Integrate credential service into HostBuilder configuration","Modify the HostBuilder setup in both client and service to use the Credential Manager service to fetch the database password and construct the final connection string.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","4.2","security,configuration","Sprint 1","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","STORY-004","TASK-013,TASK-003,TASK-004","","",".NET Hosting,Configuration"
"TASK-015: Implement AuthenticationService with BCrypt password verification","Create the IAuthenticationService and its implementation. It will take a username and password, fetch the corresponding user from the UserRepository, and use a BCrypt library to verify the password against the stored hash.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","8.3","security,authentication,backend","Sprint 2","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Risk TL-001: Authentication logic must be implemented carefully to avoid security flaws.","STORY-004","TASK-011","","",".NET Core,Security,BCrypt,C#"
"TASK-016: Create WPF LoginView and LoginViewModel","Develop the user interface for the login screen (LoginView.xaml) and its corresponding ViewModel (LoginViewModel.cs). The ViewModel will handle data binding, validation, and commanding.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","10.3","wpf,ui,mvvm","Sprint 2","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","STORY-004","TASK-015","","",".NET Core,WPF,XAML,MVVM"
"TASK-017: Implement E2E Test for Login Flow","Using Appium/WinAppDriver, create an end-to-end test that launches the application, enters credentials for both a successful and a failed login attempt, and asserts the correct application response.","Task","Backlog","High","qa.team@project.com","tech.lead@project.com","","12","testing,e2e,ui-automation","Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Setting up and writing stable tests with Appium/WinAppDriver for WPF can be complex.","STORY-004","TASK-016","","",".NET Core,Appium,WinAppDriver,E2E Testing"
"STORY-005: Enforce Role-Based Access to Features (RBAC)","As a system user, I want the application's features and UI controls to be enabled or disabled based on my assigned role, so that I only see and can interact with the functions I am authorized to use.","Story","Backlog","Critical","tech.lead@project.com","pm@project.com","","49.6","security,authorization,rbac","Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","EPIC-002","STORY-004","","",".NET Core,WPF,MVVM,Security,Appium"
"TASK-018: Design and Implement IAuthorizationService","Create a central service that is aware of the current authenticated user's session and can answer questions like `CurrentUserHasRole('Administrator')`. This service will be the single source of truth for permissions.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","8.3","security,authorization,architecture","Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Risk SR-001: A flaw in RBAC could lead to a critical HIPAA breach.","STORY-005","TASK-015","","",".NET Core,Dependency Injection,C#"
"TASK-019: Implement authorization checks in backend services","Inject the IAuthorizationService into application services and command handlers. Before executing a privileged operation (e.g., `DeleteUser`), check if the current user has the required role and throw an `UnauthorizedAccessException` if not.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","10.3","security,authorization,backend","Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Risk SR-001: All privileged operations must be covered.","STORY-005","TASK-018","","",".NET Core,C#"
"TASK-020: Create reusable WPF converters/behaviors for UI authorization","Develop general-purpose WPF components (e.g., a `RoleToVisibilityConverter`) that can be used in XAML to declaratively show, hide, or disable UI elements based on the current user's role.","Task","Backlog","High","dev.team@project.com","tech.lead@project.com","","8.3","wpf,ui,authorization","Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","STORY-005","TASK-018","","",".NET Core,WPF,XAML"
"TASK-021: Apply UI authorization rules to application views","Use the components created in the previous task to bind the `Visibility` and `IsEnabled` properties of admin-only controls (Administration tab, settings buttons, etc.) to the current user's role.","Task","Backlog","High","dev.team@project.com","tech.lead@project.com","","6","wpf,ui,authorization","Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","STORY-005","TASK-020","","",".NET Core,WPF,XAML"
"TASK-022: Create E2E Tests for RBAC UI State","Write automated UI tests that log in as a Technician and assert that admin controls are not visible/enabled. Write a parallel set of tests for an Admin user to assert that controls are visible/enabled.","Task","Backlog","High","qa.team@project.com","tech.lead@project.com","","12","testing,e2e,security","Sprint 4","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Asserting UI state across roles can make E2E tests complex.","STORY-005","TASK-021","","",".NET Core,Appium,WinAppDriver"
"STORY-006: Automatically Lock Session After Inactivity","As a registered user, I want the application to automatically lock itself after 15 minutes of inactivity, so that sensitive PHI is protected on my unattended workstation.","Story","Backlog","Critical","tech.lead@project.com","pm@project.com","","49.3","security,session-lock,hipaa","Sprint 2,Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Spike in Sprint 1, implementation in Sprint 2/3.","EPIC-002","STORY-004","","",".NET Core,WPF,MVVM,P/Invoke"
"TASK-023: [Spike] Research global input monitoring approaches","Time-boxed research (4-6 hours) to evaluate the stability, performance, and complexity of using low-level Windows hooks (P/Invoke) versus a WPF-native event aggregation approach for detecting application-wide user inactivity.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","6","spike,research,security","Sprint 1","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Risk TR-002: De-risk the technical approach for session lock.","STORY-006","","","",".NET Core,WPF,P/Invoke,C#"
"TASK-024: Implement user activity monitoring service","Based on the spike's outcome, implement the chosen service to track user mouse and keyboard input and reset an inactivity timer.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","12","security,wpf,session","Sprint 2","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Risk TR-002, TL-001: P/Invoke is inherently complex and risky.","STORY-006","TASK-023","","",".NET Core,WPF,P/Invoke,C#"
"TASK-025: Create LockScreenView and ViewModel","Develop the WPF View and ViewModel for the modal lock screen. This includes the password input field, unlock button, and display of the current username.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","10.3","ui,wpf,security","Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","STORY-006","TASK-015","","",".NET Core,WPF,MVVM"
"TASK-026: Implement session lock orchestration service","Create a service that listens to the `OnInactive` event from the activity monitor and is responsible for showing the lock screen, preserving application state, and handling the unlock result.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","12","session,wpf,architecture","Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Ensuring UI state is perfectly preserved can be tricky.","STORY-006","TASK-024,TASK-025","","",".NET Core,WPF,MVVM"
"STORY-007: Encrypt Sensitive Patient Data in the Database","As an Administrator, I want all PHI stored in the database to be encrypted at the column level, so that we comply with HIPAA technical safeguards.","Story","Backlog","Critical","tech.lead@project.com","pm@project.com","","37.2","security,encryption,database,hipaa","Sprint 1,Sprint 2,Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Spike in Sprint 1, implementation in Sprint 2/3.","EPIC-002","STORY-003","","",".NET Core,Entity Framework Core,PostgreSQL,pgcrypto"
"TASK-027: [Spike] Design and prototype EF Core Value Converters for pgcrypto","A time-boxed task to create a working proof-of-concept for an EF Core `ValueConverter` that can call PostgreSQL's `pgp_sym_encrypt` and `pgp_sym_decrypt` functions. This will de-risk the complex interaction between EF Core's query generation and native DB functions.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","12","spike,research,security,database,encryption","Sprint 1","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Risk TR-003, RR-001: Highly complex task requiring deep EF Core and PostgreSQL knowledge.","STORY-007","TASK-010","","",".NET Core,Entity Framework Core,PostgreSQL,pgcrypto"
"TASK-028: Implement and unit test pgcrypto Value Converters","Based on the spike, implement the production-ready `ValueConverter` classes for handling string encryption and decryption.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","12","security,database,encryption","Sprint 2","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Risk TR-003, TL-001: Translating POC to robust, production code is still complex.","STORY-007","TASK-027","","",".NET Core,Entity Framework Core,PostgreSQL"
"TASK-029: Apply encryption converters to PHI entities and update migrations","In the `ApplicationDbContext`, apply the new encryption value converter to all entity properties that contain PHI (e.g., Patient.PatientName). Generate a new database migration to reflect these changes (e.g., changing column types to `bytea`).","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","4.2","database,ef-core,encryption","Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","","STORY-007","TASK-028","","",".NET Core,Entity Framework Core"
"TASK-030: Write Integration Test for transparent encryption","Create an integration test that saves an entity with PHI, then reads it back. The test will assert that the in-memory object has the correct plaintext, but a direct SQL query to the database shows the column contains ciphertext.","Task","Backlog","High","qa.team@project.com","tech.lead@project.com","","10.2","testing,security,encryption","Sprint 3","EPIC-002: Security & Compliance (HIPAA)","DMPS Platform","","Risk QR-001: Requires Testcontainers with pgcrypto extension enabled.","STORY-007","TASK-029","","",".NET Core,Testcontainers,SQL,xUnit"
"EPIC-003: Asynchronous DICOM Ingestion Pipeline","Build a robust, high-throughput, asynchronous pipeline for receiving DICOM studies via C-STORE, queueing them for processing using RabbitMQ, and persisting the data and files reliably.","Epic","Backlog","Critical","pm@project.com","pm@project.com","","160.5","dicom,async,pipeline,rabbitmq","","","DMPS Platform","","","","","","",
"STORY-008: Receive and Queue Incoming DICOM Studies","As an external DICOM modality, I want to send studies to the application via C-STORE, so that the studies can be ingested for local viewing and processing.","Story","Backlog","Critical","tech.lead@project.com","pm@project.com","","160.5","dicom,c-store,rabbitmq,async","Sprint 4,Sprint 5","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","This is a large, multi-sprint story.","EPIC-003","STORY-001,STORY-003","","",".NET Core,fo-dicom,RabbitMQ,DICOM,Testcontainers"
"TASK-031: Implement RabbitMQ connection management service","Create a singleton service responsible for establishing and maintaining a persistent connection to the RabbitMQ broker, including retry logic for connection failures.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","8.3","rabbitmq,infrastructure,messaging","Sprint 4","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","Implementing robust connection retry logic is non-trivial.","STORY-008","TASK-004","","",".NET Core,RabbitMQ,C#"
"TASK-032: Implement RabbitMQ topology declaration service","Create a startup service (`IHostedService`) that uses the connection service to declare all necessary exchanges, durable queues, and dead-letter bindings (DLX/DLQ) on application start.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","8.7","rabbitmq,infrastructure","Sprint 4","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","Risk SR-002: Incorrect configuration can lead to message loss.","STORY-008","TASK-031","","",".NET Core,RabbitMQ"
"TASK-033: Implement fo-dicom C-STORE SCP service","Create a class that inherits from `fo-dicom`'s `DicomService` and overrides `OnCStoreRequest` to handle incoming DICOM files. This class will contain the core SCP logic.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","14.3","dicom,fo-dicom,service,networking","Sprint 4","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","Risk EX-001, RR-001, TL-001: fo-dicom is a complex library with a steep learning curve.","STORY-008","","","",".NET Core,fo-dicom,DICOM,C#"
"TASK-034: Host C-STORE SCP within a managed IHostedService","Create an `IHostedService` that instantiates and manages the lifecycle of the `fo-dicom` server, starting it when the Windows Service starts and stopping it gracefully on shutdown.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","6","dicom,service,architecture","Sprint 4","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","","STORY-008","TASK-033,TASK-004","","",".NET Hosting,fo-dicom"
"TASK-035: Implement DICOM metadata parsing and publishing","Within the `OnCStoreRequest` handler, use `fo-dicom` to parse the received file, extract key metadata tags, populate a DTO, and publish it as a persistent message to the RabbitMQ ingestion exchange.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","10.7","dicom,rabbitmq,fo-dicom","Sprint 4","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","Risk QR-001: Must be fast to not delay C-STORE response.","STORY-008","TASK-031,TASK-033,TASK-034","","",".NET Core,fo-dicom,RabbitMQ"
"TASK-036: Design idempotent DICOM persistence consumer logic","Architect the step-by-step, fault-tolerant logic for the consumer. This includes handling potential failures at each stage (DB write, file move) to ensure that retrying a message does not lead to data duplication or corruption.","Task","Backlog","Critical","tech.lead@project.com","tech.lead@project.com","","8","architecture,design,rabbitmq,consumer","Sprint 4","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","Risk TR-001: Designing for idempotency is a complex architectural challenge.","STORY-008","","","",".NET Core,System Design,RabbitMQ,Database"
"TASK-037: Implement RabbitMQ consumer as an IHostedService","Create the boilerplate for a background service that subscribes to the `dicom-ingestion` queue and processes messages one by one.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","10.3","rabbitmq,consumer,service","Sprint 5","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","","STORY-008","TASK-032","","",".NET Core,RabbitMQ,.NET Hosting,C#"
"TASK-038: Implement consumer's data persistence logic","Inside the consumer, use the UserRepository and other new repositories to save the Patient, Study, Series, and Image metadata from the message DTO to the PostgreSQL database within a single transaction.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","14.3","database,ef-core,consumer","Sprint 5","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","Risk TR-001: All DB writes for a study must be atomic.","STORY-008","TASK-011,TASK-036,TASK-037","","",".NET Core,Entity Framework Core,C#"
"TASK-039: Implement consumer's file management and ack/nack logic","After a successful database transaction, move the staged DICOM file to its final, permanent storage path. On total success, acknowledge (ack) the RabbitMQ message. If any step fails, negatively acknowledge (nack) the message without requeueing.","Task","Backlog","Critical","dev.team@project.com","tech.lead@project.com","","10.7","consumer,rabbitmq,file-io","Sprint 5","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","Risk TR-001: Final step of the consumer, must ensure nack on any failure.","STORY-008","TASK-038","","",".NET Core,RabbitMQ,.NET I/O,C#"
"TASK-040: Create E2E Integration Test for the entire DICOM Ingestion Pipeline","Develop a comprehensive integration test that orchestrates the full pipeline: 1. Use Testcontainers for PostgreSQL and RabbitMQ. 2. Start the Windows Service host in-process. 3. Use a `fo-dicom` SCU to send a test DICOM file. 4. Poll the database and file system to assert that the study was persisted correctly. 5. Check RabbitMQ to ensure the message was consumed and the queue is empty.","Task","Backlog","Critical","qa.team@project.com","tech.lead@project.com","","24","testing,e2e,dicom,pipeline","Sprint 5","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","Risk QR-001: This is an extremely complex test requiring multi-system orchestration.","STORY-008","TASK-039,TASK-035","","",".NET Core,Integration Testing,Testcontainers,fo-dicom,xUnit"
"TASK-040-01: Setup Testcontainers for PostgreSQL and RabbitMQ in test fixture","Configure the xUnit test fixture to manage the lifecycle of PostgreSQL and RabbitMQ Docker containers using Testcontainers.","Sub-task","Backlog","Critical","qa.team@project.com","tech.lead@project.com","","6","testing,testcontainers,setup","Sprint 5","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","","TASK-040","","","",".NET Core,Testcontainers,Docker"
"TASK-040-02: Implement in-process host startup for Windows Service","Develop a test helper that can build and run the entire Windows Service `IHost` within the test process to allow for direct interaction and inspection.","Sub-task","Backlog","Critical","qa.team@project.com","tech.lead@project.com","","4","testing,hosting,integration","Sprint 5","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","","TASK-040","","","",".NET Hosting,xUnit"
"TASK-040-03: Implement fo-dicom SCU client logic to send test file","Create a test utility class that acts as a DICOM C-STORE SCU, capable of sending a specified DICOM file to the service running in-process.","Sub-task","Backlog","Critical","qa.team@project.com","tech.lead@project.com","","6","testing,dicom,fo-dicom","Sprint 5","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","","TASK-040","","","",".NET Core,fo-dicom,DICOM"
"TASK-040-04: Implement polling and assertion logic for DB and file system state","Create asynchronous helper methods that poll the database and file system until a condition is met or a timeout occurs, and then assert the final state is correct.","Sub-task","Backlog","Critical","qa.team@project.com","tech.lead@project.com","","6","testing,assertion,async","Sprint 5","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","","TASK-040","","","",".NET Core,xUnit,Asynchronous Programming"
"TASK-040-05: Integrate all parts and stabilize the E2E test","Combine all the sub-task components into a single, cohesive test case. Debug and stabilize the test to ensure it runs reliably in the CI/CD pipeline.","Sub-task","Backlog","Critical","qa.team@project.com","tech.lead@project.com","","2","testing,e2e,stabilization","Sprint 5","EPIC-003: Asynchronous DICOM Ingestion Pipeline","DMPS Platform","","","TASK-040","TASK-040-01,TASK-040-02,TASK-040-03,TASK-040-04","","",".NET Core,xUnit,Integration Testing"