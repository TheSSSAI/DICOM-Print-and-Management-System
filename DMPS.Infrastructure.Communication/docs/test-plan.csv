test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
TEST-ARC-001,Core Architecture,Functional,Integration,Critical,Yes,"Verify Dependency Injection container can resolve registered services in the WPF Client.","The solution is built successfully.","1. Create an integration test project for the WPF client.
2. Configure the test to build the application host using the same DI setup as `App.xaml.cs`.
3. Attempt to resolve a core registered service (e.g., a sample `IMainViewModel`).","The service is resolved successfully without throwing an exception. The resolved instance is not null.","N/A - uses DI configuration.","xUnit, Microsoft.Extensions.Hosting",4,"TASK-005, TASK-003"
TEST-ARC-002,Core Architecture,Functional,Integration,Critical,Yes,"Verify Dependency Injection container can resolve registered services in the Windows Service.","The solution is built successfully.","1. Create an integration test project for the Windows Service.
2. Configure the test to build the application host using the same DI setup as `Program.cs`.
3. Attempt to resolve a core registered service (e.g., a sample `IHostedService`).","The service is resolved successfully without throwing an exception. The resolved instance is not null.","N/A - uses DI configuration.","xUnit, Microsoft.Extensions.Hosting",4,"TASK-005, TASK-004"
TEST-ARC-003,Core Architecture,Functional,Integration,Critical,Yes,"Verify successful health check communication between client and a running service via Named Pipes.","The solution is built successfully.","1. Start the Windows Service host in a test harness.
2. In a separate thread/process, instantiate the Named Pipe client service.
3. Call the client service to send a 'PING' request.
4. Await the response.","The client receives a 'PONG' response within the configured timeout (e.g., 5 seconds).","N/A","xUnit, .NET IPC",6,"TASK-008"
TEST-ARC-004,Core Architecture,Functional,Integration,Critical,Yes,"Verify graceful failure of health check when the service is not running.","The solution is built successfully. The Windows Service is NOT running.","1. Instantiate the Named Pipe client service.
2. Call the client service to send a 'PING' request.
3. Await the response.","The client method throws a `TimeoutException` or a specific connection failure exception after the configured timeout. It does not hang indefinitely.","N/A","xUnit, .NET IPC",4,"TASK-008"
TEST-ARC-005,Core Architecture,Functional,System,High,Yes,"Verify UI elements dependent on the background service are disabled when the service is offline.","The WPF client is running. The background Windows Service is stopped.","1. Launch the application.
2. Navigate to a view that has a service-dependent feature (e.g., the Print Preview screen with a 'Print' button).
3. Observe the state of the 'Print' button.","The 'Print' button is disabled. A tooltip or status message indicates the print service is unavailable.","Admin or Technician user account.","Appium, WinAppDriver",8,"STORY-002"
TEST-SEC-001,Security - Data Model,Functional,Integration,Critical,Yes,"Verify UserRepository can successfully create and retrieve a user.","A test database (PostgreSQL) is running in a container. EF Core migrations have been applied.","1. Instantiate the `UserRepository`.
2. Create a new `User` entity object.
3. Call `AddUserAsync` to persist the user.
4. Call `GetUserByUsernameAsync` with the new user's username.","The user is successfully retrieved. The properties of the retrieved user match the properties of the user that was saved.","N/A","xUnit, Testcontainers, EF Core",6,"TASK-012"
TEST-SEC-002,Security - Data Model,Functional,Integration,High,Yes,"Verify UserRepository correctly updates an existing user.","A test database is running and contains a pre-existing user.","1. Retrieve an existing user using the `UserRepository`.
2. Modify a property (e.g., set `IsActive` to false).
3. Call `UpdateUserAsync`.
4. Retrieve the same user again in a new context.","The retrieved user reflects the updated property (`IsActive` is false).","A pre-existing user record in the test database.","xUnit, Testcontainers, EF Core",4,"TASK-012"
TEST-SEC-003,Security - Authentication,Functional,Integration,Critical,Yes,"Verify successful user login with correct credentials.","A test user exists in the database with a known password hashed with BCrypt.","1. Instantiate the `AuthenticationService` with its dependencies.
2. Call the `LoginAsync` method with the correct username and password.","The method returns a success result containing the user's session information. No exceptions are thrown.","Active user account (e.g., 'test_technician') with a known password.","xUnit, Testcontainers, BCrypt library",4,"TASK-015"
TEST-SEC-004,Security - Authentication,Functional,Integration,Critical,Yes,"Verify failed user login with incorrect password.","A test user exists in the database.","1. Instantiate the `AuthenticationService`.
2. Call the `LoginAsync` method with the correct username but an incorrect password.","The method returns a failure result. The error message is generic and does not indicate that the password was the incorrect part.","Active user account with a known password.","xUnit, Testcontainers, BCrypt library",2,"TASK-015"
TEST-SEC-005,Security - Authentication,Security,Integration,Critical,Yes,"Verify failed user login with a non-existent username to prevent user enumeration.","The test database is running.","1. Instantiate the `AuthenticationService`.
2. Call the `LoginAsync` method with a username that is guaranteed not to exist.
3. Measure the response time.
4. Compare with the response time of TEST-SEC-004.","The method returns a failure result with a generic error message. The response time should be very similar to a failed password attempt to prevent timing attacks.","N/A","xUnit, Testcontainers",4,"TASK-015, STORY-004"
TEST-SEC-006,Security - Authentication,Functional,System,Critical,Yes,"Verify E2E successful login flow for an Administrator.","An active Administrator user account exists. The application is installed.","1. Launch the application using Appium.
2. Enter the admin username and password.
3. Click the 'Login' button.","The login window closes. The main application window appears. The 'Administration' tab/button is visible and enabled.","Active Administrator user account (e.g., 'test_admin').","Appium, WinAppDriver",8,"TASK-017"
TEST-SEC-007,Security - Authentication,Functional,System,Critical,Yes,"Verify E2E failed login flow.","The application is installed.","1. Launch the application using Appium.
2. Enter a valid username and an incorrect password.
3. Click the 'Login' button.","The login window remains open. An error message 'Invalid username or password.' is displayed. The password field is cleared.","Active user account with a known password.","Appium, WinAppDriver",6,"TASK-017"
TEST-SEC-008,Security - RBAC,Security,Integration,Critical,Yes,"Verify backend service rejects unauthorized access attempt.","The application host is running in a test harness. A 'Technician' user session is established.","1. In the test, get an instance of a service with an admin-only method (e.g., `IUserService.DeleteUserAsync`).
2. Directly invoke the admin-only method.","The method call throws an `UnauthorizedAccessException` or a similar custom security exception. The operation does not complete.","Technician user account.","xUnit, Microsoft.Extensions.Hosting",6,"TASK-019"
TEST-SEC-009,Security - RBAC,Functional,System,Critical,Yes,"Verify UI state for a logged-in Technician.","An active Technician user account exists. The application is installed.","1. Launch the application and log in as a Technician.
2. Navigate to the main dashboard.
3. Navigate to a study viewer.","The 'Administration' tab/button is not visible. Within the study viewer, the 'Edit DICOM Metadata' button is hidden or disabled.","Active Technician user account.","Appium, WinAppDriver",8,"TASK-022"
TEST-SEC-010,Security - RBAC,Functional,System,Critical,Yes,"Verify UI state for a logged-in Administrator.","An active Administrator user account exists. The application is installed.","1. Launch the application and log in as an Administrator.
2. Navigate to the main dashboard.
3. Navigate to a study viewer.","The 'Administration' tab/button is visible and enabled. Within the study viewer, the 'Edit DICOM Metadata' button is visible and enabled.","Active Administrator user account.","Appium, WinAppDriver",8,"TASK-022"
TEST-SEC-011,Security - Session Lock,Functional,System,High,Partial,"Verify session automatically locks after a period of inactivity.","The application is installed and a user is logged in. The inactivity timeout is configured to a short value (e.g., 5 seconds) for testing.","1. Log in to the application.
2. Perform no mouse or keyboard actions for the configured timeout period.","A modal lock screen overlay appears, covering the entire application and prompting for a password.","Any active user account.","Appium, WinAppDriver",6,"STORY-006"
TEST-SEC-012,Security - Session Lock,Functional,System,High,Yes,"Verify successful unlock of a locked session.","The application is locked as per TEST-SEC-011. The user has a study open.","1. On the lock screen, enter the correct password for the logged-in user.
2. Click the 'Unlock' button.","The lock screen disappears. The main application is visible and interactive. The previously open study is still visible in the same state it was before the lock.","Any active user account. A sample DICOM study.","Appium, WinAppDriver",6,"STORY-006"
TEST-SEC-013,Security - Session Lock,Functional,System,Medium,Yes,"Verify failed unlock attempt on a locked session.","The application is locked.","1. On the lock screen, enter an incorrect password.
2. Click the 'Unlock' button.","An error message is displayed. The password field is cleared. The application remains locked.","Any active user account.","Appium, WinAppDriver",4,"STORY-006"
TEST-SEC-014,Security - Session Lock,Non-Functional,Performance,High,No,"Measure performance impact of the user activity monitoring service.","The application is running and a user is logged in.","1. With the activity monitor enabled, perform standard UI interactions (scrolling, zooming, typing).
2. Measure the application's CPU usage and responsiveness.
3. Disable the activity monitor.
4. Repeat step 1 and 2.","The CPU usage with the monitor enabled should be negligibly higher (<1% on average) than with it disabled. UI responsiveness should not be perceptibly different.","Any active user account.","Windows Performance Analyzer, Visual Studio Profiler",8,"TASK-024"
TEST-SEC-015,Security - Encryption,Functional,Integration,Critical,Yes,"Verify transparent encryption and decryption of PHI data.","Testcontainers for PostgreSQL is running with the `pgcrypto` extension enabled. EF Core migrations are applied.","1. Create a Patient entity with a known `PatientName`.
2. Save the entity to the database using the `DbContext`.
3. Use a raw SQL query to select the `PatientName` column from the database.
4. Use the `DbContext` to read the same Patient entity back into memory.","The raw SQL query returns an encrypted value (e.g., `bytea` data) that is not the plaintext name. The entity read back through the `DbContext` has the correct, decrypted plaintext `PatientName`.","N/A","xUnit, Testcontainers, pgcrypto",8,"TASK-030"
TEST-SEC-016,Security - Configuration,Security,Integration,Critical,Yes,"Verify application successfully loads database credentials from Windows Credential Manager.","A specific credential for the application's database connection has been stored in the Windows Credential Manager.","1. Configure the application to use a specific credential name.
2. Run the application (or an integration test that builds the host).
3. The host builder should attempt to connect to the database.","The application successfully connects to the database. No plaintext passwords exist in any `appsettings.json` or other configuration files.","A pre-configured entry in Windows Credential Manager. A running PostgreSQL instance.","xUnit, .NET Hosting",6,"TASK-014"
TEST-SEC-017,Security - Configuration,Security,Integration,Critical,Yes,"Verify application fails gracefully if credentials are not found in Windows Credential Manager.","The credential the application is configured to look for does NOT exist in the Windows Credential Manager.","1. Configure the application to use a specific credential name.
2. Run the application.","The application fails to start. A clear error message is logged indicating that the required credential could not be found in the Credential Manager.","A running PostgreSQL instance.","xUnit, .NET Hosting",4,"TASK-014"
TEST-DICOM-001,DICOM Ingestion,Functional,Integration,Critical,Yes,"Verify RabbitMQ topology (exchanges, queues, DLX) is declared correctly on service startup.","Testcontainers for RabbitMQ is running.","1. Start the Windows Service host in a test harness.
2. After startup, use the RabbitMQ Management API (or a client library) to inspect the broker.","The required exchange (e.g., 'dicom_system_exchange'), main queue (e.g., 'dicom_ingestion_queue'), DLX, and DLQ all exist and are configured correctly (e.g., main queue is durable, has DLX configured).","N/A","xUnit, Testcontainers, RabbitMQ Client",6,"TASK-032"
TEST-DICOM-002,DICOM Ingestion,Functional,Integration,Critical,Yes,"Verify the C-STORE SCP receives a file and publishes a message to RabbitMQ.","Testcontainers for RabbitMQ is running. The Windows Service host is running.","1. Use a `fo-dicom` SCU client to send a valid DICOM file to the service's SCP port.
2. Check the RabbitMQ `dicom_ingestion_queue`.","The SCU client receives a C-STORE success response. A single message appears in the `dicom_ingestion_queue`. The message body contains the parsed metadata from the sent DICOM file. The message is marked as 'persistent'.","A valid sample DICOM file.","xUnit, fo-dicom, Testcontainers",10,"TASK-035"
TEST-DICOM-003,DICOM Ingestion,Functional,Integration,Critical,Yes,"Verify the consumer successfully processes a message and persists data.","Testcontainers for PostgreSQL and RabbitMQ are running. The Windows Service host is running. A message is on the `dicom_ingestion_queue`.","1. Manually place a valid DICOM ingestion message onto the `dicom_ingestion_queue`.
2. Monitor the database and the permanent file storage location.","The message is consumed from the queue. New records for Patient, Study, Series, and Image appear in the database. The corresponding DICOM file is moved to the correct hierarchical folder in storage.","A valid message payload. A staged DICOM file for the consumer to move.","xUnit, Testcontainers, RabbitMQ Client",10,"TASK-038, TASK-039"
TEST-DICOM-004,DICOM Ingestion,Functional,Integration,Critical,Yes,"Verify a failed message is routed to the Dead-Letter Queue (DLQ).","Testcontainers for PostgreSQL and RabbitMQ are running. The database is configured to be inaccessible (e.g., wrong password). The Windows Service host is running.","1. Use a `fo-dicom` SCU to send a DICOM file (this will place a message on the main queue).
2. The consumer will attempt to process it and fail due to the DB connection error.
3. Check the DLQ after a short time.","The message from the main queue is consumed and then disappears. A single message appears in the configured DLQ. The main queue is empty.","A valid sample DICOM file.","xUnit, fo-dicom, Testcontainers",8,"TASK-039"
TEST-DICOM-005,DICOM Ingestion,Functional,System,Critical,Yes,"Verify the full E2E DICOM ingestion pipeline.","Testcontainers for PostgreSQL and RabbitMQ are running. The Windows Service host is running in-process.","1. Use a `fo-dicom` SCU to send a test DICOM file to the service.
2. Poll the database until a new Study record appears or a timeout is reached.
3. Poll the file system until the DICOM file appears in its final storage location.
4. Check the RabbitMQ queues.","The SCU receives a success response. The study metadata is correctly written to the database. The DICOM file is located at the correct path (e.g., `.../[PatientID]/[StudyUID]/...`). Both the main queue and the DLQ are empty.","A valid sample DICOM file with known metadata.","xUnit, Testcontainers, fo-dicom",24,"TASK-040"
TEST-DICOM-006,DICOM Ingestion,Functional,Integration,High,Yes,"Verify consumer idempotency by processing a duplicate message.","Testcontainers for DB and MQ are running. Service host is running. A message is on the queue.","1. Manually place a valid DICOM ingestion message on the queue.
2. Wait for it to be processed successfully.
3. Manually place the *exact same* message on the queue again.
4. Check the database.","The second message is consumed without error. The database does not contain duplicate records for the study, series, or image. The system state is identical to after the first message was processed.","A valid message payload.","xUnit, Testcontainers, RabbitMQ Client",8,"TASK-036"
TEST-DICOM-007,DICOM Ingestion,Non-Functional,Performance,Critical,Yes,"Verify C-STORE SCP can handle concurrent associations.","The full E2E test setup (TEST-DICOM-005) is running on hardware meeting the recommended specification.","1. Create a load test script that uses multiple threads/clients.
2. Simultaneously initiate 10 C-STORE associations, each sending a unique study.
3. Monitor the processing time and client UI responsiveness (if possible).","All 10 studies are successfully ingested without errors. The client UI remains responsive (<500ms for simple actions) during the ingestion. The total time to ingest all studies is within an acceptable performance benchmark.","10 unique DICOM studies.","Custom C# load test client (using fo-dicom), JMeter (if adaptable), Windows Performance Monitor",16,"REQ-1-078"