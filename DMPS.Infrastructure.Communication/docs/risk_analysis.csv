risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
TR-001,Technical,"The DICOM persistence consumer (WI-014) may fail after a database write but before the corresponding file move, leading to data inconsistency (orphaned DB records without files).",3,5,15,High,"WI-014, WS-006","Lack of native distributed transaction support across a database (PostgreSQL) and a file system.",Implement an idempotent, multi-stage processing logic in the consumer: 1. Consume message. 2. Move file to a temporary 'processing' directory. 3. Perform database transaction. 4. If DB succeeds, move file to final storage location. 5. Acknowledge message. On failure, the process can be safely retried.,Develop a reconciliation script to be run by an administrator. This script will query the database for records and verify the existence of the corresponding file in storage, flagging any discrepancies for manual review and correction.,An increase in messages in the Dead-Letter Queue (DLQ) for the DICOM persistence queue. Error logs from the DicomPersistenceConsumer service indicating file I/O or DB failures.,Tech Lead,2025-02-28,Not Started
SR-001,Technical,"A flaw in the RBAC implementation (WI-008) allows a 'Technician' to access administrative functions, leading to a critical HIPAA breach.",2,5,10,Medium,"WI-008, WS-003","Complexity of implementing a cross-cutting authorization framework and risk of missing a permission check on new or existing features.",1. Enforce authorization checks at the service/application layer, not just in the UI. 2. Create a comprehensive suite of integration tests that attempt to access admin APIs/services with a Technician user context. 3. Conduct a formal security code review focused on all authorization logic.,If a flaw is discovered, immediately deploy a hotfix. Use audit logs to determine if the vulnerability was exploited, identify the scope of any potential breach, and follow the organization's incident response plan.,Audit logs showing a user accessing a resource inconsistent with their role. A failed penetration test result.,Security Lead,2025-03-15,Not Started
TR-002,Technical,"The low-level global input hooks (P/Invoke) for the session lock feature (WI-006) cause application instability, performance degradation, or conflicts with other software.",3,4,12,Medium,WI-006,"Reliance on unmanaged code and Windows internals, which can be brittle and hard to debug.",1. Isolate the P/Invoke logic in a dedicated, thoroughly tested class. 2. Implement the hook on a background thread to minimize impact on the UI thread. 3. Research and prototype alternative WPF-native approaches for detecting application-wide inactivity before committing to P/Invoke.,If the P/Invoke approach proves too unstable, switch to a simpler, less precise method of tracking inactivity based only on events within the main application window, accepting the reduced scope (won't detect system-wide inactivity).,Negative user feedback about application sluggishness. High CPU usage by the application when idle. Unexplained application crashes that trace back to the session lock service.,Senior Developer,2025-03-10,Not Started
TR-003,Technical,"The custom EF Core value converters for pgcrypto (WI-009) have a bug, leading to silent data corruption, incorrect data encryption, or inability to decrypt data.",3,5,15,High,WI-009,"Complexity of integrating native database functions with an ORM's change tracking and query generation.",1. Develop extensive unit and integration tests specifically for the encryption value converters, covering all data types and edge cases (nulls, empty strings). 2. Create a separate utility to perform out-of-band decryption of database values to verify encryption correctness. 3. Perform peer review of the converter logic by a developer with strong EF Core and SQL skills.,In case of data corruption, restore the database from the last known good backup. Develop a data migration script to re-encrypt all affected data using a corrected version of the value converter.,Integration tests for encrypted entities start failing. Manual database inspection shows unencrypted PHI or garbled, non-decryptable data in target columns.,Tech Lead,2025-03-20,Not Started
RR-001,Resource,"The development team lacks sufficient expertise in critical, specialized technologies like the fo-dicom library, RabbitMQ advanced patterns, or PostgreSQL's pgcrypto, leading to suboptimal or insecure implementations.",4,4,16,High,"WI-009, WI-011, WI-013, WI-014","The project combines multiple niche and complex technologies, increasing the likelihood of knowledge gaps.",1. Conduct a skills assessment. 2. Schedule focused training sessions or PoC spikes for each high-risk technology. 3. Enforce pair programming on all critical, complex work items (e.g., WI-014). 4. Budget for external consultancy.,If a flawed implementation is discovered, engage an external subject matter expert to review the code and guide refactoring. Simplify the architecture if a feature proves too complex to implement correctly within the project constraints.,Developer velocity on complex tasks is significantly lower than estimated. Code reviews for these components reveal fundamental misunderstandings of the technology. High bug rate for features using these technologies.,Project Manager,2025-02-15,Not Started
QR-001,Quality,"The asynchronous nature of the DICOM ingestion pipeline makes end-to-end testing difficult, potentially allowing bugs in the handoff between SCP -> RabbitMQ -> Consumer to go undetected.",4,4,16,High,"WI-012, WI-014, EPIC-003","Difficulty in orchestrating and asserting outcomes across multiple independent processes (SCU tool, Windows Service, RabbitMQ, Database) in an automated test.",1. Utilize Testcontainers in integration tests to spin up real RabbitMQ and PostgreSQL instances. 2. Create a test harness that uses a DICOM SCU to send a file, then polls the database and file system to assert the final correct state after a timeout. 3. Heavily instrument the pipeline with structured logging and correlation IDs to make manual and automated verification easier.,Rely on extensive manual end-to-end testing by the QA team for each release. Develop diagnostic tools for administrators to trace a study through the pipeline in production.,Automated E2E tests are flaky or consistently fail. Discrepancies are found between studies sent and studies appearing in the application during manual testing.,QA Lead,2025-03-01,Not Started
TL-001,Timeline,"The numerous high-complexity tasks (WI-002, WI-005, WI-006, WI-008, WI-009, WI-011, WI-014) are underestimated, causing significant schedule slippage and a cascading delay effect due to their foundational nature.",4,3,12,Medium,"WI-002, WI-005, WI-006, WI-008, WI-009, WI-011, WI-014","Inherent uncertainty in estimating novel or highly complex technical work.",1. For each high-complexity task, create a time-boxed technical spike/PoC to de-risk the implementation and refine the estimate. 2. Prioritize the highest-risk, highest-complexity tasks first to identify schedule problems early. 3. Build a buffer into the project plan for these specific tasks.,If delays become critical, descope non-essential features planned for the same release. Re-evaluate the project timeline with stakeholders and secure additional resources if necessary.,Velocity reports show consistent underperformance against estimates for high-complexity work items. A foundational epic (e.g., EPIC-002) is not completed by its internal deadline.,Project Manager,2025-02-20,Not Started
EX-001,External,"The third-party fo-dicom library has a critical bug or performance limitation that blocks a key requirement (e.g., handling a specific DICOM transfer syntax), and a fix is not readily available.",2,4,8,Medium,"WI-011, WI-012","Dependency on an external open-source library for core business functionality.",1. During initial development, build a prototype that specifically tests the most complex and critical DICOM operations required by the project. 2. Create an abstraction layer (adapter pattern) around the fo-dicom library so that swapping it out, while difficult, is not impossible. 3. Encourage the team to engage with the fo-dicom community to understand its limitations and roadmap.,Allocate development time to create a patch for the library and submit a pull request. If that is not feasible, investigate alternative DICOM libraries for .NET, accepting the significant refactoring cost.,During testing, the C-STORE SCP fails to process valid DICOM files from a specific modality. Performance profiling reveals a bottleneck deep within the fo-dicom library itself.,Tech Lead,2025-03-25,Not Started
OP-001,Operational,"The MSIX installer fails to correctly configure database/MQ connection details or set permissions for the Windows Service, leading to widespread deployment failures in customer environments.",3,4,12,Medium,"BuildProcess, DeploymentMethod","Complexity of creating a robust installer that handles external dependencies and system configuration.",1. Make the installer's prerequisite check (DB/MQ connectivity) extremely thorough and provide clear, actionable error messages. 2. Automate the installer build and deployment to a clean test environment as part of the CI/CD pipeline. 3. Document all permissions and prerequisites required by the service and installer in a clear deployment guide.,Provide a separate configuration utility that administrators can run post-installation to test and set connection strings and other critical settings. Enhance logging during service startup to clearly state the cause of any connection failures.,Initial deployments to QA or staging environments fail consistently. The Windows Service fails to start after a successful installation, with connection errors in the Windows Event Log.,DevOps Engineer,2025-04-01,Not Started
SR-002,Technical,"Improper configuration of RabbitMQ durable queues or persistent messages (WI-013) leads to message loss (and therefore data loss) if the RabbitMQ broker is restarted or crashes.",2,5,10,Medium,"WI-013, WS-006","Misunderstanding of messaging middleware configuration, which defaults to transient behavior.",1. Use a pre-deployment checklist to verify all critical queues are declared as 'durable' and producers are publishing messages with the 'persistent' flag. 2. Create an automated test that publishes a persistent message, restarts the RabbitMQ container (using Testcontainers), and then verifies the message can still be consumed.,Develop a manual process for reconciling lost data by comparing source system records (if available) with the application database. If no source is available, acknowledge the data loss and investigate the root cause to prevent recurrence.,During testing, messages disappear from a queue after restarting the RabbitMQ service. A production RabbitMQ outage results in reports of missing studies that were sent during the outage window.,Senior Developer,2025-03-05,Not Started
TR-004,Technical,"The Named Pipe IPC mechanism (WI-003) is unreliable due to Windows permission issues (e.g., client and service running as different users) or hangs, making the client UI state (e.g., 'Print' button) incorrect.",3,3,9,Medium,WI-003,"IPC on Windows is sensitive to security contexts and can have complex failure modes.",1. Define and document the required security context for the client and service to communicate. 2. Implement aggressive timeouts and robust error handling in the Named Pipe client. 3. The client UI should default to a 'service unavailable' state and only become active upon a successful 'PONG' response.,If Named Pipes prove unreliable in target environments, replace the synchronous status check with an asynchronous one. The service could periodically write a heartbeat status to a known location (e.g., a file or a database field) that the client reads.,The client application frequently hangs when trying to check the service status. Users report that UI features are disabled even when they can see the background service is running in `services.msc`.,Senior Developer,2025-02-25,Not Started