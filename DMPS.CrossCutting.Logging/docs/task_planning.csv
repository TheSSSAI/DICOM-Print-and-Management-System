"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-001","Initialize .NET 8 Solution and Project Structure","Create the .NET 8 solution and all required projects based on the defined architecture: DMPS.Client.Wpf, DMPS.Service, DMPS.Core, DMPS.Infrastructure, and DMPS.Common. Configure project references and target frameworks.","Task","Sprint Backlog","Critical","fullstack.dev1@company.com","product.owner@company.com","2024-01-19","3","1","architecture,setup,backend","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","",".NET,Visual Studio","Low","Low","The solution file `DMPS.sln` and all five project files exist; All projects are configured to target `net8.0` and use C# 12; The entire solution builds successfully without errors.","Code reviewed; Builds successfully in CI pipeline; Project structure matches architectural diagram.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Successful build validation.","Establishes the repository for all future work.","Creates the essential technical backbone of the application, enabling all further development."
"TASK-002","Design and Implement RabbitMQ Abstraction Service","In DMPS.Infrastructure, create an `IRabbitMqService` interface and a `RabbitMqService` implementation to manage connections, channels, and automatic recovery. Implement generic `PublishAsync` and a mechanism to register consumers.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-19","12","3","architecture,rabbitmq,ipc,backend","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-001","RabbitMQ,C#,async/await","Medium","Medium","The service encapsulates the `RabbitMQ.Client` library; The service automatically reconnects if the RabbitMQ broker restarts; A generic message can be published; A message handler can be registered.","Code reviewed; Unit tests passing with >80% coverage; Integration tests passing against a live RabbitMQ instance.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","Local or dev RabbitMQ server must be available.","Unit and Integration tests.","Core component for all asynchronous operations.","Decouples application components, ensuring scalability and reliability for background tasks."
"TASK-003","Implement RabbitMQ Durability, Persistence, and DLQ Configuration","Extend the RabbitMQ service to support declaring durable queues/exchanges, publishing persistent messages, and configuring dead-lettering (DLX/DLQ) for specified queues.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-19","8.7","3","architecture,rabbitmq,ipc,backend,reliability","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-002","RabbitMQ,C#","Medium","High","A durable queue survives a broker restart; A persistent message in a durable queue is recovered after a broker restart; A negatively acknowledged message is correctly routed to the configured DLQ.","Code reviewed; Integration tests for durability, persistence, and dead-lettering are implemented and passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","Local or dev RabbitMQ server.","Integration tests simulating broker restarts and message failures.","Critical for data integrity of asynchronous tasks.","Prevents loss of critical data like study metadata and print jobs in case of system failures."
"TASK-004","Implement Named Pipes for Synchronous IPC Status Check","Create a `NamedPipeServer` in the Windows Service and a `NamedPipeClient` in the WPF app for a simple 'PING'/'PONG' status check. The client must handle timeouts.","Task","Sprint Backlog","High","fullstack.dev1@company.com","product.owner@company.com","2024-01-19","6.3","2","architecture,ipc,backend,frontend","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-001","C#,.NET IPC,Named Pipes","Medium","Low","WPF client can successfully send 'PING' and receive 'PONG' from the running service; Client call returns a failure/timeout result within 3 seconds if the service is not running or responsive.","Code reviewed; Integration test demonstrating client/server communication is passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Integration test.","Enables real-time UI feedback about service health.","Provides immediate feedback to users about the availability of background services like printing."
"TASK-005","Configure Generic Host and DI for Windows Service","In the DMPS.Service project, set up `IHost` using `Microsoft.Extensions.Hosting`, configure it to run as a Windows Service, and register infrastructure services in the DI container.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-19","6","2","architecture,backend,hosting,di","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-003,TASK-004","Microsoft.Extensions.Hosting,DI","Low","Low","The service can be installed using `sc.exe`; The service starts and stops cleanly; Registered services are successfully resolved and injected at runtime.","Code reviewed; Service installs and runs correctly on a test machine.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Manual test of service installation and operation.","Finalizes the hosting model for the background service.","Creates a robust, manageable, and modern hosting environment for all background processing tasks."
"TASK-006","Configure DI for WPF Application","In the DMPS.Client.Wpf project, set up the `Microsoft.Extensions.DependencyInjection` container in `App.xaml.cs`. Register ViewModels, services, and configure resolution of the `MainWindow`.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-01-19","5","1","architecture,frontend,wpf,di","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-004","WPF,MVVM,DI","Low","Low","The DI container is built successfully on application startup; The `MainWindow` and its `MainViewModel` are resolved from the DI container.","Code reviewed; Application starts and displays the main window without DI errors.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Manual startup test.","Establishes the dependency management pattern for the entire client application.","Enables a maintainable and testable client application architecture through Inversion of Control."
"TASK-007","Integrate Serilog for Structured Logging","Integrate Serilog into both the WPF client and Windows Service generic hosts. Configure sinks for a local rolling text file and the Windows Event Log.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-19","5.2","2","architecture,logging,serilog,observability","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-005,TASK-006","Serilog,C#","Low","Low","Logs from both client and service are written to their respective rolling text files; Error/Fatal logs from the service are also written to the Windows Event Log.","Code reviewed; Manual inspection of log files and Windows Event Viewer confirms correct log output.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Manual verification.","Critical for debugging and monitoring in all environments.","Provides essential observability into the application's behavior for troubleshooting and auditing."
"TASK-008","Implement Serilog Enricher for PHI Redaction","Create a custom Serilog `ILogEventEnricher` that inspects log messages and properties for patterns matching PHI (e.g., patient names, IDs) and redacts them before the log event is written to any sink.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-19","10.3","3","security,logging,hipaa,backend","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-007","Serilog,C#,Regex","Medium","High","A log message like `Processing study for patient 'John Doe'` is logged as `Processing study for patient '[REDACTED]'`; Redaction logic is applied to all configured sinks.","Code reviewed; Unit tests with comprehensive PHI patterns achieve 100% coverage; Manual inspection of logs confirms redaction.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Extensive unit testing and manual log inspection.","A critical HIPAA security control.","Protects patient privacy and ensures HIPAA compliance by preventing PHI leakage into log files."
"TASK-009","Define EF Core Entities for User, Role, PasswordHistory","In DMPS.Core, define `User`, `Role`, and `PasswordHistory` POCO classes. Configure relationships, constraints, and indexes using EF Core's Fluent API in the `DbContext`.","Task","Sprint Backlog","Critical","fullstack.dev1@company.com","product.owner@company.com","2024-01-19","5","2","database,ef-core,architecture,backend","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-001","C#,Entity Framework Core","Low","Low","Entity classes contain all specified properties; Relationships are correctly defined; A unique index is configured on the User's `username` column; An EF Core migration can be successfully generated.","Code reviewed; A successful EF Core migration is generated from the model.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Migration generation.","Defines the database schema for all user management features.","Establishes the data model required for secure user authentication and management."
"TASK-010","Implement and Test BCrypt Password Hashing Service","Create an `IPasswordHasher` service and a `BCryptPasswordHasher` implementation. It must provide methods to hash a password and to verify a password against a hash.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-19","4","1","security,backend,cryptography","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-001","C#,Cryptography,Security","Low","High","`HashPassword` method returns a valid BCrypt hash string; `VerifyPassword` returns true for the correct password and false for an incorrect one; Unit tests achieve 100% coverage.","Code reviewed by a second developer; 100% unit test coverage is achieved and all tests are passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","100% unit test coverage.","Core security component for storing user credentials.","Ensures user passwords are not stored in plaintext, a fundamental security requirement for HIPAA compliance."
"TASK-011","Research and POC for EF Core with pgcrypto","Investigate the best approach for integrating `pgcrypto` with EF Core 8 for transparent column encryption. Create a proof-of-concept demonstrating encryption and decryption.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-01-19","12","3","security,database,poc,research,hipaa","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","","PostgreSQL,pgcrypto,Entity Framework Core","High","Medium","A proof-of-concept project successfully writes and reads an encrypted PHI field; A document is produced outlining the chosen implementation pattern and performance considerations.","POC solution successfully demonstrates transparent encryption/decryption; Technical design document is peer-reviewed and approved.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","PostgreSQL instance with `pgcrypto` extension enabled.","POC execution.","Informs the implementation of encryption at rest.","De-risks and defines the technical approach for encrypting all PHI at rest in the database, a critical HIPAA control."
"TASK-012","Implement EF Core pgcrypto Integration","Based on the POC, implement the chosen pattern for `pgcrypto` integration across all entities and properties containing PHI (e.g., Patient, Study tables).","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-02-02","10.7","3","security,database,hipaa,backend","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-011","PostgreSQL,Entity Framework Core,C#","Medium","High","The main application's DbContext is configured for encryption on all required PHI columns; Integration tests confirm that data written is stored as ciphertext; Integration tests confirm read data is correctly decrypted.","Code reviewed; Integration test suite for encryption is passing; Manual database inspection confirms data is encrypted.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","PostgreSQL instance with `pgcrypto` extension enabled.","Integration testing.","Requires secure management of the encryption key.","Implements encryption at rest for all PHI, a non-negotiable HIPAA security requirement."
"TASK-013","Implement Secure Credential Storage Service","Create a service that uses the Windows Credential Manager to store and retrieve sensitive configuration values like the database connection string and pgcrypto encryption key.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-01-19","6.3","2","security,backend,windows-api","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","","C#,Windows API,Security","Medium","Medium","A service can write a secret to the Windows Credential Manager; The same service can read the secret back; The application fails gracefully if a required secret is not found.","Code reviewed; Integration test that writes and reads a temporary credential is passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Integration test.","A critical security measure to avoid storing secrets in config files.","Prevents sensitive credentials from being stored in plaintext configuration files, significantly improving the security posture of the application."
"TASK-014","Integrate Credential Manager into Configuration Provider","Extend the .NET `IConfigurationBuilder` in both client and service to use the `CredentialManagerService` as a configuration source, allowing transparent loading of secrets at startup.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-01-19","6","2","security,backend,architecture","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","Core Architecture & Technology Foundation","EPIC-001","DICOM Management & Printing System","STORY-ARCH-01","TASK-013","C#,.NET Configuration","Medium","Low","The application's `IConfiguration` object contains secrets loaded from the Credential Manager; The `appsettings.json` file no longer contains sensitive values.","Code reviewed; The application successfully starts and connects to the database using the securely loaded connection string.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Manual end-to-end test of application startup.","Requires a setup step to store secrets in Credential Manager on deployment.","Operationalizes the secure storage of secrets, making the application secure by default."
"TASK-015","Create User Management Backend Service","Implement a `UserManagementService` that handles the business logic for creating a user. This includes checking for duplicate usernames, hashing the temporary password, and saving the new `User` entity to the database.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-19","8.3","2","backend,user-management,security","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-006","TASK-009,TASK-010","C#,Entity Framework Core","Medium","Low","Service method throws exception if username already exists; A new user is saved with a hashed password and `IsTemporaryPassword` flag set to true; The database transaction is atomic.","Code reviewed; Unit and integration tests for all service logic are passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","PostgreSQL database.","Unit and integration tests.","Backend logic for the first administrative feature.","Provides the core business logic for provisioning new user accounts."
"TASK-016","Integrate User Creation with Audit Trail","Extend the `UserManagementService` to create and save an `AuditLog` entry within the same database transaction as the user creation.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-19","4.5","2","backend,user-management,security,hipaa,auditing","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-006","TASK-015","C#,Entity Framework Core","Medium","Medium","An `AuditLog` entity is saved upon successful user creation; If saving the audit log fails, the user creation is rolled back.","Code reviewed; Integration test that verifies both User and AuditLog records are created or neither is.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Integration test for transactional atomicity.","A critical HIPAA requirement.","Ensures all administrative actions are auditable for compliance and security investigations."
"TASK-017","Create 'Add User' View and ViewModel","In the WPF client, create the `AddUserView.xaml` and `AddUserViewModel.cs`. The view should be a modal dialog with fields for username and role selection, and buttons to create or cancel.","Task","Sprint Backlog","High","frontend.dev1@company.com","product.owner@company.com","2024-02-02","10.3","3","frontend,wpf,ui,user-management","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-006","TASK-016","WPF,XAML,MVVM","Medium","Low","The UI adheres to the Material Design style; The 'Create' button is disabled until the form is valid; A success notification with the temporary password is shown upon completion.","UI/UX peer reviewed; ViewModel logic unit tested; E2E test passes.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","Backend team for service integration.","None","Unit and E2E testing.","First administrative UI feature.","Enables administrators to provision new user accounts through the application interface."
"TASK-018","E2E Test for User Creation Workflow","Create an automated end-to-end test that logs in as an Admin, navigates to User Management, opens the 'Add User' dialog, creates a new user, and verifies the user appears in the list.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-02-02","9","3","testing,qa,e2e","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-006","TASK-017","Appium,WinAppDriver,C#","High","Medium","The test successfully automates all UI interactions; The test asserts that the new user is visible in the user list; The test includes cleanup steps; The test passes reliably in the CI pipeline.","Test case reviewed and approved; Test is integrated into the CI pipeline and passes reliably.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","Frontend developer to ensure stable UI automation IDs.","E2E testing framework.","Execution in CI.","Provides regression safety for the user creation feature.","Ensures the user creation feature remains functional and stable through future development cycles."
"TASK-019","Implement WPF Login View (XAML)","Create the `LoginView.xaml` using the Material Design in XAML Toolkit. It must include a `TextBox` for username, a `PasswordBox` for the password, a `Button` for login, and a `TextBlock` for error messages.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-02-02","6","2","frontend,wpf,ui,login","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-001","TASK-006","WPF,XAML","Low","Low","The view is styled according to Material Design principles; Controls are correctly named for binding; Password input is masked.","UI/UX reviewed and approved; XAML code is clean and adheres to standards.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","None","Visual inspection.","The entry point for the entire application.","Provides the user interface for the mandatory authentication process."
"TASK-020","Implement WPF Login ViewModel","Create `LoginViewModel.cs` with properties for Username and Password, an `ICommand` for the login action, and properties for displaying error messages and managing view state. Inject the `AuthenticationService`.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-02-02","8","2","frontend,wpf,mvvm,login","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-001","TASK-019,TASK-021","WPF,MVVM,C#","Medium","Low","ViewModel properties are correctly bound to the View; Successful login navigates to the main application window; Failed login updates the error message property.","Code reviewed; Unit tests for ViewModel logic are passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","Backend team for service integration.","None","Unit tests.","Orchestrates the login user experience.","Contains the client-side logic for the user authentication process."
"TASK-021","Implement Authentication Service Logic","Create `AuthenticationService.cs` to handle the core login logic. It will retrieve a user by username from the database, use the `BCryptPasswordHasher` to verify the password, check if the account is active, and return a user session object.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-19","10.3","3","backend,security,login,authentication","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-001","TASK-009,TASK-010","C#,Entity Framework Core,Security","Medium","High","Service correctly validates credentials for an active user; Service rejects login for non-existent users, incorrect passwords, and disabled users; Error results do not enable user enumeration.","Code reviewed for security vulnerabilities; Comprehensive unit tests for all login scenarios are implemented and passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Comprehensive unit testing.","The heart of the system's authentication security.","Provides the secure, server-side validation of user credentials, which is the cornerstone of the application's access control."
"TASK-022","Create Session Management Service","Implement a `UserSessionService` as a singleton that holds the current authenticated user's session information (UserID, Username, Role). This service will be the source of truth for the user's identity.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-19","4.2","1","backend,security,session,architecture","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-001","TASK-021","C#,DI","Low","Low","Service can store the current user session after a successful login; Service can clear the user session on logout; Service is registered as a singleton in the DI container.","Code reviewed; Unit tests verifying state changes are implemented and passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Unit tests.","Central component for managing application state related to the user.","Maintains the authenticated user's context, enabling personalized experiences and consistent authorization checks."
"TASK-023","E2E Test for Login Workflow","Create an automated E2E test that launches the application, enters credentials for a Technician, verifies successful login, logs out, then logs in as an Administrator and verifies successful login.","Task","Sprint Backlog","High","qa.engineer1@company.com","product.owner@company.com","2024-02-02","10.2","3","testing,qa,e2e,login","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-001","TASK-020","Appium,WinAppDriver,C#","High","Medium","Test successfully automates entering credentials and clicking login; Test asserts that the main window appears after successful login; Test handles both Technician and Administrator roles.","Test case reviewed and approved; Test is integrated into the CI pipeline and passes reliably.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","Frontend developer for UI automation IDs.","E2E testing framework.","Execution in CI.","Provides regression safety for the login feature.","Ensures the critical login workflow remains functional and stable through future development cycles."
"TASK-024","Design and Implement Authorization Service and Policies","Create an `AuthorizationService` that uses the `UserSessionService` to check permissions. Define authorization policies (e.g., `CanEditDicom`, `CanAccessAdminSettings`) that can be checked from ViewModels.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-19","6.3","2","backend,security,authorization,rbac","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-002","TASK-022","C#,Security","Medium","Low","Service provides methods like `IsAuthorized(Policy.CanAccessAdminSettings)`; The service correctly returns true/false based on the current user's role from the session.","Code reviewed; Unit tests that mock different user roles and check policy outcomes are implemented and passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Unit tests.","Centralizes all permission-checking logic.","Provides a centralized, reusable, and testable mechanism for enforcing role-based access control throughout the application."
"TASK-025","Create WPF Visibility/Enablement Converters or Helpers","Develop a reusable mechanism in WPF to bind a control's `Visibility` or `IsEnabled` property to an authorization policy. This could be an `IValueConverter` or a custom attached property.","Task","Sprint Backlog","High","frontend.dev1@company.com","product.owner@company.com","2024-02-02","8.7","3","frontend,wpf,ui,rbac","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-002","TASK-024","WPF,XAML","Medium","Low","A XAML binding can be used to hide a button if the user is not authorized for a specific policy; The mechanism is easy to apply to any `UIElement`.","Code reviewed; A sample view demonstrates successful use of the converter/helper.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","None","Visual confirmation in a sample app.","Enables declarative security in the UI.","Allows developers to easily secure UI elements based on user roles directly in XAML, reducing boilerplate code and errors."
"TASK-026","Apply RBAC to Admin and Metadata Edit UI","Apply the new authorization mechanism to the main application shell to hide the 'Administration' tab/button, and to the study viewer to disable the 'Edit DICOM Metadata' button for the 'Technician' role.","Task","Sprint Backlog","High","frontend.dev1@company.com","product.owner@company.com","2024-02-02","6","2","frontend,wpf,ui,rbac,security","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-002","TASK-025","WPF,XAML","Low","Low","The 'Administration' navigation element is not visible when logged in as a Technician; The 'Edit DICOM Metadata' button is disabled when logged in as a Technician.","Code reviewed; E2E test verifying UI state for both Technician and Admin roles is passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","None","E2E testing.","First implementation of UI-level security.","Directly implements the principle of least privilege, preventing unauthorized access to sensitive features."
"TASK-027","Implement Backend Authorization Checks","On the backend services that perform sensitive actions (e.g., `UserManagementService`), add checks at the beginning of each method to verify the calling user has the required role. Throw an `UnauthorizedAccessException` if the check fails.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-19","6.3","2","backend,security,authorization,rbac","Sprint 1","Deliver a fully functional, secure backend for user authentication, authorization, and management, including all foundational architecture, IPC, logging, and data persistence layers.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-002","TASK-015,TASK-024","C#,Security","Low","Medium","Calling `UserManagementService.CreateUserAsync` without an Admin role throws an exception; These checks are covered by unit tests.","Code reviewed; Unit tests for authorization logic are implemented and passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","68%","None","None","Unit tests.","Defense-in-depth security layer.","Ensures that even if the UI is bypassed, unauthorized actions are still blocked at the service layer, providing a critical layer of security."
"TASK-028","E2E Test for RBAC UI States","Create an automated E2E test that logs in as a Technician and asserts that the 'Administration' button is not visible. The test then logs in as an Administrator and asserts that the button IS visible.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-02-02","12","3","testing,qa,e2e,rbac","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-002","TASK-026","Appium,WinAppDriver,C#","High","Medium","Test logs in as both roles; Test correctly asserts the visibility of the Administration UI element based on the role; Test passes reliably in CI.","Test case reviewed and approved; Test is integrated into the CI pipeline and passes reliably.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","Frontend developer for UI automation IDs.","E2E testing framework.","Execution in CI.","Provides regression safety for RBAC.","Ensures the role-based security of the UI is not accidentally broken by future changes."
"TASK-029","Research and Implement Low-Level Input Monitor","Investigate and implement a reliable, low-performance-impact method for monitoring application-wide keyboard and mouse input in a WPF application. This may require P/Invoke and low-level Windows hooks.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-02-02","12","5","frontend,wpf,security,hipaa,session","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-003","","C#,WPF,.NET Interop,Windows API","High","High","A service is created that can subscribe to global mouse and keyboard events; The mechanism has a measured CPU impact of less than 1%; The implementation is encapsulated in a service that raises a `UserActivityDetected` event.","Code reviewed; Performance profiling confirms minimal CPU impact; Service correctly fires events on all user input types.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","None","Performance profiling.","Technically complex and high-risk component.","Provides the core mechanism for detecting user inactivity, which is required for the automatic session lock feature."
"TASK-030","Implement Session Inactivity Timer Service","Create a service that uses the `InputMonitorService`. It will start a 15-minute timer. On each `UserActivityDetected` event, the timer is reset. If the timer elapses, it raises a `SessionTimeout` event.","Task","Sprint Backlog","Critical","fullstack.dev1@company.com","product.owner@company.com","2024-02-02","6.3","2","frontend,security,session","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-003","TASK-029","C#,async/await","Medium","Low","Service correctly starts the timer upon user login; Service correctly resets the timer upon activity; Service correctly raises the `SessionTimeout` event after exactly 15 minutes of inactivity.","Code reviewed; Unit tests with mocked timers are implemented and passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","None","Unit tests.","Orchestrates the session timeout logic.","Implements the business logic for the automatic session lock, enforcing the 15-minute inactivity rule."
"TASK-031","Create Lock Screen View and ViewModel","Create `LockScreenView.xaml`, a modal overlay that covers the entire window. Create `LockScreenViewModel.cs` to handle the password input and unlock logic.","Task","Sprint Backlog","High","frontend.dev1@company.com","product.owner@company.com","2024-02-02","8.3","2","frontend,wpf,ui,session,security","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-003","TASK-030","WPF,XAML,MVVM","Medium","Low","The view appears on top of all other content and blocks interaction with the underlying UI; The view displays the current username.","UI/UX reviewed and approved; ViewModel is implemented with placeholder logic for unlock.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","None","Visual inspection.","The user-facing component of the session lock feature.","Provides the user interface for re-authentication to unlock a locked session."
"TASK-032","Implement Unlock Logic in LockScreenViewModel","The `UnlockCommand` in the `LockScreenViewModel` will call the `AuthenticationService` to verify the entered password. On success, it will close the lock screen. On failure, it will display an error message and increment a failure counter.","Task","Sprint Backlog","High","frontend.dev1@company.com","product.owner@company.com","2024-02-02","6","2","frontend,wpf,mvvm,session,security","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-004","TASK-031,TASK-021","C#,MVVM","Medium","Low","Correct password dismisses the lock screen; Incorrect password shows 'Invalid password' message and clears the password field; The ViewModel tracks the number of consecutive failed attempts.","Code reviewed; Unit tests for unlock logic are passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","None","Unit tests and E2E test.","Core logic for the unlock feature.","Allows users to securely resume their sessions after they have been locked."
"TASK-033","Implement Forced Logout After 5 Failed Unlock Attempts","Extend the `LockScreenViewModel` logic. If the failed attempt counter reaches 5, the ViewModel will command the application to perform a full logout (clear session, return to login screen).","Task","Sprint Backlog","High","frontend.dev1@company.com","product.owner@company.com","2024-02-02","5.2","2","frontend,security,session","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-004","TASK-032","C#,MVVM,Security","Low","Low","On the 5th consecutive incorrect password entry, the user is logged out; The application returns to the main `LoginView`; A security event is logged to the audit trail.","Code reviewed; Unit and E2E tests verify the forced logout.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","None","E2E test.","Security feature to prevent brute-force attacks on a locked session.","Protects against brute-force password guessing on a locked, unattended workstation."
"TASK-034","Add Audit Logging for All Unlock Attempts","Integrate with the `AuditLogService` to log every unlock attempt. Successful attempts are logged as 'SessionUnlockSuccess', failed attempts as 'SessionUnlockFailure'.","Task","Sprint Backlog","High","fullstack.dev1@company.com","product.owner@company.com","2024-02-02","4.2","1","backend,security,auditing,hipaa","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-004","TASK-032","C#","Low","Low","A successful unlock creates a 'SessionUnlockSuccess' audit log entry; A failed unlock creates a 'SessionUnlockFailure' audit log entry.","Code reviewed; Manual inspection of the audit log table after tests confirms correct entries are created.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","None","Database verification.","HIPAA requirement for access control monitoring.","Provides a detailed audit trail of access attempts to locked sessions, which is critical for security monitoring and incident investigation."
"TASK-035","E2E Test for Lock and Unlock Workflow","Create an automated test that logs in, forces an inactivity timeout (by waiting), attempts one failed unlock, then successfully unlocks. The test must verify the UI is restored to its pre-lock state.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-02-02","16.5","5","testing,qa,e2e,session","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-004","TASK-033","Appium,WinAppDriver,C#","High","High","Test can reliably trigger the lock screen; Test automates a failed unlock attempt and verifies the error message; Test automates a successful unlock and verifies the lock screen is gone.","Test case reviewed and approved; Test is integrated into the CI pipeline and passes reliably.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","Frontend developer to add test hooks for timers.","E2E testing framework.","Execution in CI.","High-risk test to automate due to timing sensitivity.","Ensures the critical session lock and unlock workflow is not broken by future changes."
"TASK-036","Implement State Preservation for Lock Screen","Ensure the lock screen is a non-destructive overlay. The main window and its entire visual tree must be preserved in memory, not rebuilt. Upon unlock, the overlay is simply removed.","Task","Sprint Backlog","High","frontend.dev1@company.com","product.owner@company.com","2024-02-02","12.3","3","frontend,wpf,ui,ux","Sprint 2","Build, integrate, and test the complete user-facing experience for authentication, authorization, and session management, including the high-risk session lock feature and comprehensive E2E test coverage.","User Authentication, Authorization, and Session Management","EPIC-002","DICOM Management & Printing System","US-004","TASK-031","WPF,XAML","Medium","Low","Opening a study, zooming in, and then having the session lock and unlock returns the view to the same zoomed-in state; Any unsaved data in a form is preserved after an unlock cycle.","Code reviewed; Manual testing of complex UI states confirms preservation.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-22","2024-02-02","79%","None","None","Manual exploratory testing.","Critical for user experience.","Prevents loss of work and user frustration when a session is locked, maintaining workflow continuity."