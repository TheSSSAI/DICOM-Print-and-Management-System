"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"US-001","User Authentication, Authorization, and Session Management","User Login with Role-Based Access","Registered System User (Technician or Administrator)","As a Registered System User (Technician or Administrator), I want to securely log in to the application using my unique username and password so that I can gain access to the system and use the features and functions authorized for my specific role.","Ensures that only authorized personnel can access sensitive Protected Health Information (PHI), thereby enforcing security, meeting HIPAA compliance requirements, and enabling the fundamental role-based access control model.","Must Have","5","[""US-006""]","[{""scenario"":""Successful login with valid credentials"",""given"":""a user has a valid and active account in the system"",""when"":""the user enters their correct username and password into the login form and clicks the 'Login' button"",""then"":""the system validates the credentials, the login window closes, and the main application window is displayed with features corresponding to the user's assigned role.""},{""scenario"":""Login attempt with an incorrect password"",""given"":""a user has a valid and active account in the system"",""when"":""the user enters their correct username but an incorrect password"",""then"":""the system displays a non-specific error message 'Invalid username or password.', the password field is cleared, and the user remains on the login screen.""},{""scenario"":""Login attempt with a disabled account"",""given"":""a user's account has been disabled by an administrator"",""when"":""the user enters their correct credentials for the disabled account"",""then"":""the system displays an error message 'Your account has been disabled. Please contact an administrator.' and prevents login.""}]","[""Create WPF Login Screen"",""Implement Authentication Service""]","[""Login screen UI is implemented as per Material Design specifications."",""Authentication logic correctly verifies credentials against BCrypt hashes in the database."",""Unit tests for AuthenticationService cover all success and failure scenarios with >80% coverage."",""E2E test for both a Technician and an Administrator login is implemented and passing."",""Security review confirms password handling is secure and prevents user enumeration."",""Performance of the login process is under 2 seconds on target hardware.""]"
"US-002","User Authentication, Authorization, and Session Management","Role-Based Feature Access","System user (Technician or Administrator)","As a system user, I want the application's features and UI controls to be enabled or disabled based on my assigned role, so that I can only perform actions I am authorized for, ensuring system security and compliance with the principle of least privilege.","Enforces the principle of least privilege, a core HIPAA requirement, preventing unauthorized access to sensitive data and system configurations, which reduces the risk of data breaches and operational errors.","Must Have","5","[""US-001""]","[{""scenario"":""Technician role has restricted access to administrative functions"",""given"":""a user is authenticated and has been assigned the 'Technician' role"",""when"":""the user navigates through the application"",""then"":""the 'Administration' main area and all its sub-features (User Management, System Settings, Audit Trail) must be hidden and inaccessible.""},{""scenario"":""Technician role has restricted access to data modification functions"",""given"":""a user with the 'Technician' role is viewing a study"",""when"":""the user interacts with the study data and metadata views"",""then"":""the UI control to 'Edit DICOM Metadata' must be disabled or hidden.""},{""scenario"":""Administrator role has full access to all application functions"",""given"":""a user is authenticated and has been assigned the 'Admin' role"",""when"":""the user navigates through the application"",""then"":""all features, including administrative functions, are visible and enabled.""},{""scenario"":""Backend authorization prevents unauthorized actions"",""given"":""a user with the 'Technician' role is logged in"",""when"":""an attempt is made to programmatically invoke an admin-only action"",""then"":""the action is rejected by the system's business logic layer and the attempt is logged.""}]","[""Implement Role-Based Access Control (RBAC)""]","[""An AuthorizationService is implemented and integrated with the user's session."",""UI controls for admin-only functions are correctly hidden/disabled for the Technician role."",""All UI controls are enabled for the Administrator role."",""Integration tests verify that service-layer calls to admin-only functions fail when initiated by a Technician session."",""E2E tests for both Technician and Admin roles confirm the correct UI state.""]"
"US-006","User Authentication, Authorization, and Session Management","Admin Creates a New User Account","Administrator","As an Admin, I want to create a new user account with a username, temporary password, and role so that I can provision access for new staff members.","Enables secure and efficient onboarding of new personnel by provisioning system access with appropriate permissions, which is a fundamental requirement for multi-user operational readiness and security compliance.","Must Have","5","[""US-001"",""US-002""]","[{""scenario"":""Admin successfully creates a new Technician user"",""given"":""I am an Admin logged into the User Management page"",""when"":""I enter a unique username, select the 'Technician' role, and click 'Create'"",""then"":""a new user record is created with a BCrypt hashed temporary password, a 'force password change' flag is set to true, and a success notification is displayed containing the temporary password.""},{""scenario"":""Attempting to create a user with a duplicate username"",""given"":""I am an Admin on the 'Add User' form and a user with the username 'jdoe' already exists"",""when"":""I enter 'jdoe' as the username and click 'Create'"",""then"":""the system prevents the creation and displays an error message stating 'Username already exists'.""},{""scenario"":""User creation is logged in the audit trail"",""given"":""an Admin has successfully created a new user named 'asmith'"",""when"":""I navigate to the 'Audit Trail' viewer"",""then"":""I see a new log entry with my user ID, the event type 'User Created', and the target user 'asmith'.""}]","[""Create EF Core Entities for User, Role, and PasswordHistory"",""Implement BCrypt for Password Hashing""]","[""User, Role, and PasswordHistory entities are created and a database migration is successfully applied."",""BCrypt password hashing and verification service is implemented and unit tested."",""The User Management UI allows for the creation of new users."",""The database transaction for creating a user and its audit log entry is atomic."",""E2E test of creating a new user and logging in with the temporary password is passing.""]"
"US-003","User Authentication, Authorization, and Session Management","Automatic Session Lock After Inactivity","Clinician or Administrator","As a clinician or administrator, I want the application to automatically lock itself after a defined period of inactivity, so that sensitive Protected Health Information (PHI) is protected from unauthorized viewing on an unattended workstation.","Enhances security and ensures HIPAA compliance by automatically securing sessions on unattended workstations, mitigating the risk of unauthorized PHI access and potential data breaches.","Must Have","8","[""US-001""]","[{""scenario"":""Session locks after the 15-minute inactivity period"",""given"":""a user is logged into the application"",""when"":""the user performs no keyboard or mouse actions for 15 minutes"",""then"":""a modal lock screen overlay is displayed, obscuring the entire application window.""},{""scenario"":""Inactivity timer resets upon user interaction"",""given"":""a user is logged into the application"",""when"":""the user moves the mouse or presses a key after 14 minutes of inactivity"",""then"":""the inactivity timer is reset, and the session remains active and unlocked.""},{""scenario"":""Application state is preserved behind the lock screen"",""given"":""a user has a study open with unsaved annotations"",""when"":""the session automatically locks due to inactivity"",""then"":""the application state, including the open study and unsaved work, is preserved in memory behind the lock screen.""}]","[""Implement Automatic Session Lock""]","[""A low-performance-impact, application-wide user activity monitor is implemented."",""The session correctly locks after exactly 15 minutes of inactivity."",""The lock screen overlay reliably covers all application UI elements."",""The activity monitor correctly resets the timer on all forms of user input."",""Automated tests verify the timer logic and lock screen invocation.""]"
"US-004","User Authentication, Authorization, and Session Management","Unlock Session with Password","Logged-in user","As a logged-in user whose session has been locked, I want to enter my password into a lock screen so that I can securely unlock my session and resume my work from where I left off, without losing my current application state.","Ensures HIPAA compliance by protecting PHI on unattended workstations while providing a seamless user experience that maintains workflow continuity and prevents loss of work.","Must Have","5","[""US-003""]","[{""scenario"":""Successful Unlock with Correct Password"",""given"":""the application session is locked and the lock screen is displayed"",""when"":""the user enters their correct password and clicks 'Unlock'"",""then"":""the lock screen is removed, and the application UI is restored to its exact pre-lock state.""},{""scenario"":""Unlock Attempt with Incorrect Password"",""given"":""the application session is locked"",""when"":""the user enters an incorrect password and clicks 'Unlock'"",""then"":""an error message 'Invalid password. Please try again.' is displayed, and the session remains locked.""},{""scenario"":""Exceeding Maximum Failed Unlock Attempts"",""given"":""the session is locked and the user has made 4 consecutive incorrect password attempts"",""when"":""the user enters an incorrect password for the 5th time"",""then"":""the session is immediately terminated, the application returns to the main login screen, and a security event is logged.""}]","[""Implement Automatic Session Lock""]","[""Lock screen UI allows password entry and unlock attempts."",""Correct password successfully unlocks the session and restores the previous UI state."",""Incorrect password attempts are handled gracefully with clear error messages."",""The session is forcibly terminated after 5 consecutive failed unlock attempts."",""All unlock attempts (successful and failed) are recorded in the audit trail."",""E2E test of lock, failed unlock, and successful unlock is implemented and passing.""]"