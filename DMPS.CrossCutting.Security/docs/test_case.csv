"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-AUTH-001","User Authentication","Security","Integration","Critical","true","High","Verify user authentication fails for a valid username with an incorrect password, and the response is generic to prevent user enumeration.","High - Vulnerability could allow attackers to identify valid usernames.","Medium","A valid user account (e.g., 'test_technician') exists in the PostgreSQL database with a known password.","1. Initiate a login request via the AuthenticationService. 2. Provide the valid username 'test_technician'. 3. Provide an incorrect password. 4. Capture the response/exception from the service.","The service rejects the authentication attempt. A generic error (e.g., 'Invalid username or password') is returned. The time taken is computationally indistinguishable from a failed login with a non-existent username.","Active 'Technician' user account with a BCrypt hashed password.","xUnit, Moq (for dependencies), EF Core Test Harness (In-Memory or Testcontainers)","2","4","1","AuthenticationService, IPasswordHasher (BCrypt), UserRepository","Integration test environment with PostgreSQL access.","Authentication fails; generic error is returned; security audit log shows 'Failed Login Attempt'.","Critical - Exposes system to user enumeration attacks.","Every build","Low","Database transaction rollback.","Verify response timing and error message content.","Response within 1.5 seconds to mitigate timing attacks.","N/A"
"TEST-HIPAA-001","Data Security & Compliance","Functional","Integration","Critical","true","High","Verify that columns containing Protected Health Information (PHI) are correctly encrypted at rest in the PostgreSQL database using pgcrypto.","Critical - Failure results in a direct HIPAA violation and potential data breach.","High","EF Core is configured with Value Converters for pgcrypto. A test PostgreSQL database with the pgcrypto extension enabled is available.","1. Use EF Core to create and save a new 'Patient' entity with a name (e.g., 'John Doe'). 2. Use a direct, non-EF Core SQL client to connect to the database. 3. Execute a `SELECT` query on the `patientName` column for the newly created record. 4. Use EF Core to read the same 'Patient' entity back from the database.","The direct SQL query returns an encrypted binary blob, not 'John Doe'. The EF Core read operation returns a Patient object with the `patientName` property correctly decrypted to 'John Doe'.","Sample patient data.","xUnit, EF Core, Npgsql, DBeaver/psql (for direct verification)","6","12","2","EF Core DbContext, PostgreSQL with pgcrypto extension.","Integration environment with a correctly configured PostgreSQL instance.","Data is confirmed encrypted via direct SQL query; Data is confirmed decrypted via application layer.","Critical - Severe compliance failure and data breach.","Every release","Medium","Delete test records from the database.","Encryption key management must be secure (using Windows Credential Manager).","Negligible performance impact on CRUD operations.","N/A"
"TEST-DICOM-INGEST-001","DICOM Ingestion","Functional","System","Critical","true","High","Verify the end-to-end asynchronous ingestion of a DICOM study via C-STORE SCP, ensuring data is correctly persisted and files are moved.","High - Failure means the system cannot receive any clinical data.","High","Windows Service is running. RabbitMQ and PostgreSQL are running and configured. A test DICOM SCU is available.","1. Use a DICOM toolkit (e.g., dcmtk's storescu) to send a multi-file DICOM study to the service's SCP port. 2. Monitor the RabbitMQ management UI to confirm a message is published to the durable queue. 3. Wait for the message to be consumed. 4. Query the PostgreSQL database to verify Patient, Study, Series, and Image metadata has been created. 5. Check the configured storage path on the filesystem to verify the DICOM files exist in the correct hierarchical structure.","The storescu tool reports a success status. A message is briefly visible in the queue. All metadata exists in the database. DICOM files are in their final storage location. The temporary staging directory is empty.","A valid, multi-file DICOM study.","dcmtk, RabbitMQ Management UI, PostgreSQL client, Windows Service Control Manager","8","24","8","Windows Service, fo-dicom SCP, RabbitMQ, PostgreSQL","Staging environment with all services configured.","End-to-end data flow is successful with data integrity maintained between DB and filesystem.","Critical - Core functionality of data reception is broken.","Every release","Medium","Delete study from database and filesystem.","N/A","Can handle 10 concurrent associations without data loss.","N/A"
"TEST-PRINT-001","Asynchronous Printing","Functional","System","High","true","Medium","Verify a print job is correctly submitted asynchronously and the UI remains responsive, with the print button disabled if the service is unavailable.","Medium - Printing is a key workflow for sharing results.","High","WPF Client is running. A DICOM study is open.","1. Stop the 'DICOM Service' Windows Service. 2. Navigate to the Print Preview screen in the WPF Client. 3. Verify the 'Print' button is disabled and a notification is shown. 4. Start the 'DICOM Service'. 5. Re-enter the Print Preview screen. 6. Verify the 'Print' button is enabled. 7. Click 'Print'. 8. Immediately attempt to interact with other UI elements (e.g., switch tabs).","The print button state correctly reflects the service's availability via the Named Pipe check. After submission, the UI remains fully responsive and does not freeze. A 'Queued' job appears in the Print Queue UI.","Any viewable DICOM study.","WinAppDriver (for UI automation), Windows Service Control Manager","4","16","6","WPF Client, Windows Service, Named Pipes IPC, RabbitMQ","Staging environment.","Service status check is accurate; Asynchronous submission is successful; UI remains responsive.","High - Poor user experience and inability to print.","Every release","Low","Clear print queue.","N/A","UI response time <500ms during print submission.","Disabled state of print button must be announced by screen readers."
"TEST-VIEWER-PERF-001","DICOM Viewer","Performance","System","Critical","","Low","Verify the performance of the DirectX-based DICOM viewer for interactive tools (WW/WL, Zoom, Pan) and check for GPU resource leaks.","High - A slow or unstable viewer makes the application unusable for clinical review.","High","WPF Client is running on a machine with recommended hardware. A large (500+ slice) CT study is available.","1. Open the large CT study. 2. Vigorously and continuously use the WW/WL, zoom, and pan tools for 5 minutes. 3. Observe the UI for any stuttering, lag, or visual artifacts. 4. Monitor GPU memory usage with a profiling tool. 5. Close the study viewer. 6. Repeat steps 1-5 ten times.","All interactions are smooth with no perceptible lag. No visual artifacts appear. The GPU memory profiler shows that memory allocated for the study is fully released each time the viewer is closed (no leaks).","A large, multi-frame DICOM CT study.","GPU Memory Profiler (e.g., NVIDIA Nsight, RenderDoc), Stopwatch","8","","","Vortice.Windows rendering pipeline.","Physical machine meeting recommended hardware specs.","Smooth interaction; No visual artifacts; No GPU memory leaks after 30 minutes of repeated use.","Critical - Core clinical functionality is compromised.","Every major release","Medium","N/A","N/A","Real-time visual feedback during mouse manipulation.","N/A"