"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-001","Scaffold .NET Solution and Project Structure (Clean Architecture)","Create the main .sln file and scaffold projects for DMPS.Client (WPF), DMPS.Service (Windows Service), DMPS.Core (Domain), DMPS.Application (Services), DMPS.Infrastructure (Persistence/Messaging), and associated xUnit test projects, targeting .NET 8.","Task","Sprint Backlog","Critical","senior.dev1@company.com","product.owner@company.com","2024-11-01","6","2","architecture,setup,dotnet","Sprint 1","Establish the core solution architecture and implement the secure, encrypted database persistence layer.","Core Architecture & Solution Setup","EPIC-001","DICOM Management & Printing System","US-000","",".NET 8,Visual Studio 2022","Low","Low","Solution contains all specified projects. Project references are correctly configured according to Clean Architecture principles. The entire solution builds successfully without errors.","Code reviewed; Solution builds in CI pipeline; Project structure approved.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-21","2024-11-01","100%","None","None","Successful build verification.","Foundation for all subsequent development.","Ensures maintainability, scalability, and consistency for the entire project."
"TASK-002","Configure Generic Host and DI for WPF Client and Windows Service","Implement `IHost` builders for both the WPF client (`App.xaml.cs`) and the Windows Service (`Program.cs`) using `Microsoft.Extensions.Hosting` to manage application lifetime and service dependency injection.","Task","Sprint Backlog","Critical","senior.dev1@company.com","product.owner@company.com","2024-11-01","8.33","2","architecture,di,dotnet","Sprint 1","Establish the core solution architecture and implement the secure, encrypted database persistence layer.","Core Architecture & Solution Setup","EPIC-001","DICOM Management & Printing System","US-000","TASK-001",".NET 8,Microsoft.Extensions.Hosting,Microsoft.Extensions.DependencyInjection","Medium","Low","WPF application's `App.xaml.cs` successfully builds and uses a DI container. Windows Service's `Program.cs` is configured as a hosted service. A sample service can be registered and resolved in both applications at startup.","Code reviewed; Sample service can be resolved in both client and service; Unit tests pass.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-21","2024-11-01","100%","None","None","Unit testing for DI configuration.","Enables dependency injection for all future services.","Decouples components and improves testability and maintainability."
"TASK-003","Implement Serilog with PHI Redaction Enricher","Configure Serilog for structured logging to a rolling file and the Windows Event Log. Develop a custom Serilog enricher to identify and redact PHI (e.g., Patient Name, Patient ID) from all log messages before they are written to sinks.","Task","Sprint Backlog","Critical","senior.dev2@company.com","product.owner@company.com","2024-11-01","12","3","architecture,logging,security,hipaa","Sprint 1","Establish the core solution architecture and implement the secure, encrypted database persistence layer.","Core Architecture & Solution Setup","EPIC-001","DICOM Management & Printing System","US-000","TASK-002","Serilog,C# 12,Regular Expressions","Medium","High","Logs are successfully written to both the rolling file and the Windows Event Log. The custom enricher correctly masks known PHI patterns in log messages. Log configuration is managed through the DI host builder.","Code reviewed; Unit tests for enricher pass with 100% coverage; Manual inspection of log files confirms redaction; Security review passed.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-21","2024-11-01","100%","Security Lead for review","None","Unit tests for redaction logic; Security testing.","Critical for HIPAA compliance.","Ensures compliance and protects sensitive patient data in logs."
"TASK-026","Configure EF Core DbContext for PostgreSQL with Secure Connection","Set up the `DicomAppDbContext` and `AuditDbContext`. Implement connection string handling to read secrets (password) from Windows Credential Manager and enforce TLS (`SslMode=Require`) for all database connections.","Task","Sprint Backlog","Critical","mid.dev1@company.com","product.owner@company.com","2024-11-01","10","3","database,security,efcore,postgresql","Sprint 1","Establish the core solution architecture and implement the secure, encrypted database persistence layer.","Database and Persistence","EPIC-003","DICOM Management & Printing System","US-010","TASK-002","Entity Framework Core 8,PostgreSQL,C#","Medium","Medium","The DbContext is registered in the DI container. Application successfully connects to a PostgreSQL instance requiring TLS. The database password is not present in source-controlled files.","Code reviewed; Integration test confirms successful TLS connection; Security scan validates no hardcoded secrets.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-21","2024-11-01","100%","None","TLS-enabled PostgreSQL server","Integration testing against a secure PostgreSQL instance.","Requires Windows Credential Manager setup on deployment target.","Secures data in transit between the application and the database."
"TASK-027","Implement pgcrypto Column Encryption in EF Core","Configure EF Core to use `pgp_sym_encrypt`/`pgp_sym_decrypt` for all columns containing PHI. This will likely require creating custom EF Core Value Converters or interceptors and managing the encryption key securely via the CredentialManagerService.","Task","Sprint Backlog","Critical","senior.dev2@company.com","product.owner@company.com","2024-11-01","14.33","5","database,security,efcore,postgresql,encryption,hipaa","Sprint 1","Establish the core solution architecture and implement the secure, encrypted database persistence layer.","Database and Persistence","EPIC-003","DICOM Management & Printing System","US-010","TASK-026","Entity Framework Core 8,PostgreSQL,SQL,Cryptography Concepts","High","High","Data written to a PHI column is stored as encrypted bytes in the database. Data read from a PHI column via EF Core is transparently decrypted in the application. Direct database queries confirm the data is encrypted at rest.","Code reviewed; Integration tests verify transparent encryption/decryption; Direct DB inspection confirms data is encrypted; Security review passed.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-21","2024-11-01","100%","Security Lead for review","PostgreSQL server with pgcrypto extension enabled.","Integration tests and manual database verification.","Requires pgcrypto extension on production database.","Secures sensitive patient data at rest, a critical HIPAA requirement."
"TASK-005","Define User, Role, and PasswordHistory EF Core Entities","Create C# entity classes for `User`, `Role`, and `PasswordHistory`. Configure relationships and properties (e.g., password hash, status flags) using data annotations or Fluent API according to the ERD.","Task","Sprint Backlog","Critical","mid.dev1@company.com","product.owner@company.com","2024-11-15","6","2","database,efcore,authentication","Sprint 2","Implement the complete user login and role-based access control (RBAC) systems.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-026","Entity Framework Core 8,C#","Low","Low","Entity classes are defined in the DMPS.Core project. Relationships (User-Role, User-PasswordHistory) are correctly configured. The entities are added to the `DicomAppDbContext`.","Code reviewed; Entities added to DbContext; Successful compilation.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-04","2024-11-15","100%","None","None","Code compilation and review.","Foundation for user data model.","Defines the data structure for user authentication and authorization."
"TASK-006","Create and Seed Initial EF Core Migration for User Schema","Use `dotnet ef migrations add` to generate the SQL script for creating the `Users`, `Roles`, and `PasswordHistory` tables. Add seed data to the migration to create the default 'Administrator' and 'Technician' roles.","Task","Sprint Backlog","Critical","mid.dev1@company.com","product.owner@company.com","2024-11-15","3.17","1","database,efcore,migrations","Sprint 2","Implement the complete user login and role-based access control (RBAC) systems.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-005","Entity Framework Core 8,.NET CLI","Low","Low","The EF Core migration is successfully generated. Applying the migration to a clean database creates the required tables. The `Roles` table is populated with 'Administrator' and 'Technician' entries.","Migration file generated; Applying migration to test DB is successful.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-04","2024-11-15","100%","None","None","Database schema verification.","Prepares the database for user data.","Establishes the necessary database schema for user management."
"TASK-007","Implement BCrypt Password Hashing Service","Create an `IPasswordHasher` service that abstracts the BCrypt.NET library. Implement `HashPassword` and `VerifyPassword` methods. Register it as a singleton in the DI container.","Task","Sprint Backlog","Critical","senior.dev1@company.com","product.owner@company.com","2024-11-15","5.33","2","security,authentication,backend","Sprint 2","Implement the complete user login and role-based access control (RBAC) systems.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-002","C#,Security Best Practices","Medium","High","`HashPassword` returns a valid BCrypt hash string. `VerifyPassword` returns true for a correct password and false for an incorrect one. The service is registered in DI and injectable.","Code reviewed; Unit tests pass with 100% coverage; Security review passed.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-04","2024-11-15","100%","Security Lead for review","None","Unit testing and security review.","Critical security component for password storage.","Ensures user passwords are stored securely and not in plaintext."
"TASK-008","Develop Login View and ViewModel","Create the WPF `LoginView.xaml` using Material Design in XAML components. Implement `LoginViewModel.cs` to handle data binding for username/password, command for the login button, and display of error messages.","Task","Sprint Backlog","Critical","mid.dev2@company.com","product.owner@company.com","2024-11-15","12","3","frontend,wpf,mvvm,ui","Sprint 2","Implement the complete user login and role-based access control (RBAC) systems.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-002","WPF,XAML,MVVM,Material Design in XAML","Medium","Low","The UI contains fields for username and password, and a login button. Password input is masked. The login button's command is wired to the ViewModel. A designated area for error messages is present.","UI/UX review passed; ViewModel is data-bound to the view; Basic interaction is functional.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-04","2024-11-15","100%","None","None","UI interaction testing.","Entry point for the application.","Provides the user interface for authentication."
"TASK-009","Implement Authentication Service Logic","Create the `AuthenticationService` that orchestrates the login process. It will use the UserRepository to fetch user data and the `IPasswordHasher` service to verify credentials. It must handle all login scenarios: success, user not found, wrong password, disabled account.","Task","Sprint Backlog","Critical","senior.dev1@company.com","product.owner@company.com","2024-11-15","14.33","5","backend,authentication,security","Sprint 2","Implement the complete user login and role-based access control (RBAC) systems.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-006,TASK-007","C#,Entity Framework Core 8,Asynchronous Programming","Medium","Medium","The service returns a user session object on successful authentication. The service throws a specific, handled exception for failed login attempts. The error for 'user not found' is indistinguishable from 'wrong password'.","Code reviewed; Integration tests cover all authentication scenarios; Security review of logic passed.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-04","2024-11-15","100%","None","None","Integration testing against a test database.","Core service for application access control.","Implements the business logic for verifying user credentials."
"TASK-011","Develop Centralized Authorization Service","Create an `IAuthorizationService` that holds the current user's session information (including their role). Provide simple methods like `IsAdmin()` and `IsTechnician()` for easy consumption by other services and ViewModels.","Task","Sprint Backlog","Critical","senior.dev2@company.com","product.owner@company.com","2024-11-15","6","2","backend,authorization,security,rbac","Sprint 2","Implement the complete user login and role-based access control (RBAC) systems.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-002","TASK-009","C#","Low","Low","The service is registered as a singleton. After login, the service is populated with the authenticated user's data. Methods correctly return true/false based on the current user's role.","Code reviewed; Unit tests pass for mocked user sessions.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-04","2024-11-15","100%","None","None","Unit testing.","Foundation for all role-based access checks.","Provides a centralized, testable way to manage user permissions."
"TASK-012","Implement RBAC Visibility/State in ViewModels","Inject the `IAuthorizationService` into relevant ViewModels (e.g., `MainViewModel`, `MetadataViewModel`). Create boolean properties (e.g., `IsAdminAreaVisible`) based on authorization checks, and bind UI element `Visibility` and `IsEnabled` properties to them.","Task","Sprint Backlog","Critical","mid.dev2@company.com","product.owner@company.com","2024-11-15","16.67","5","frontend,wpf,mvvm,authorization,rbac","Sprint 2","Implement the complete user login and role-based access control (RBAC) systems.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-002","TASK-011","WPF,MVVM","Medium","Medium","The 'Administration' tab in the main window is bound to a property that is true only for Admins. The 'Edit Metadata' button is bound to a property that is true only for Admins. All administrative UI elements are correctly controlled.","Code reviewed; E2E tests validate UI state for both Technician and Admin roles.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-04","2024-11-15","100%","None","None","E2E testing with different user roles.","Enforces security policies at the presentation layer.","Prevents users from seeing or interacting with unauthorized UI elements."
"TASK-015","Implement Global Input Monitor Service using P/Invoke","Create a service that uses low-level Windows hooks (e.g., `SetWindowsHookEx` via P/Invoke) to monitor global mouse and keyboard activity. This service will host a timer that resets on any detected input.","Task","Sprint Backlog","Critical","senior.dev1@company.com","product.owner@company.com","2024-11-29","14.33","5","backend,security,winapi,p-invoke","Sprint 3","Implement critical security features: session inactivity lock/unlock and the complete audit trail system.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-003","TASK-002","C#,P/Invoke,Windows API","High","High","The service correctly detects mouse moves, clicks, and key presses. The inactivity timer is reset upon each detected input. The service can be started and stopped cleanly without resource leaks.","Code reviewed; Performance impact measured and deemed acceptable; Service lifecycle is managed correctly.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-18","2024-11-29","100%","None","None","Performance testing; Manual testing of input detection.","Requires careful handling of unmanaged resources.","Provides the core mechanism for detecting user inactivity for HIPAA compliance."
"TASK-016","Develop Lock Screen View and ViewModel","Create the WPF `LockScreenView.xaml` as a modal overlay. Implement the `LockScreenViewModel.cs` to handle displaying the locked user's name, accepting password input, and commanding the unlock action.","Task","Sprint Backlog","Critical","mid.dev1@company.com","product.owner@company.com","2024-11-29","8.33","3","frontend,wpf,mvvm,ui,security","Sprint 3","Implement critical security features: session inactivity lock/unlock and the complete audit trail system.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-003","","WPF,XAML,MVVM","Medium","Low","The view covers the entire application window. It displays the current username. It has a masked password box and an 'Unlock' button.","UI/UX review passed; ViewModel is data-bound to the view.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-18","2024-11-29","100%","None","None","UI interaction testing.","Part of the session security feature.","Provides the user interface for re-authentication after inactivity."
"TASK-018","Implement Unlock Logic in LockScreenViewModel","Implement the `UnlockCommand` in the `LockScreenViewModel`. This command will take the entered password, call the `AuthenticationService` to verify it against the current user's hash, and handle the success or failure result.","Task","Sprint Backlog","Critical","mid.dev1@company.com","product.owner@company.com","2024-11-29","8.33","3","frontend,wpf,mvvm,security","Sprint 3","Implement critical security features: session inactivity lock/unlock and the complete audit trail system.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-004","TASK-016,TASK-019","WPF,MVVM,C#","Medium","Low","The command calls a password verification method in the backend. On success, it dismisses the lock screen. On failure, it displays an 'Invalid password' error message.","Code reviewed; E2E test for full unlock flow is passing.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-18","2024-11-29","100%","None","None","Unit tests for ViewModel logic; E2E test.","Completes the session lock/unlock feature.","Allows users to securely resume their work sessions."
"TASK-019","Add Password Verification Method to AuthenticationService","Extend the `IAuthenticationService` with a new method, e.g., `VerifyCurrentUserPassword(string password)`. This method will retrieve the current user's hash from the session and use the `IPasswordHasher` service to verify the provided password.","Task","Sprint Backlog","Critical","senior.dev1@company.com","product.owner@company.com","2024-11-29","6.33","2","backend,security,authentication","Sprint 3","Implement critical security features: session inactivity lock/unlock and the complete audit trail system.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-004","TASK-009,TASK-118","C#","Low","Low","The method returns true for the correct password of the currently logged-in user. The method returns false for an incorrect password. The verification attempt is logged to the audit trail.","Code reviewed; Unit tests pass.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-18","2024-11-29","100%","None","None","Unit testing.","Backend support for the session unlock feature.","Provides the secure backend logic for re-authentication."
"TASK-117","Define AuditLog Entity and Database Schema","Create the `AuditLog` EF Core entity in a separate `AuditDbContext`. The table should include fields for user ID, timestamp, event type, and a `jsonb` column for event details. Generate the migration.","Task","Sprint Backlog","Critical","mid.dev2@company.com","product.owner@company.com","2024-11-29","6","2","database,efcore,auditing,security","Sprint 3","Implement critical security features: session inactivity lock/unlock and the complete audit trail system.","System Administration","EPIC-008","DICOM Management & Printing System","US-013","TASK-026","Entity Framework Core 8,PostgreSQL","Low","Low","The `AuditLog` entity is defined. A separate `AuditDbContext` is configured. An EF Core migration is generated and successfully creates the `AuditLog` table.","Migration successfully applied to test DB; Schema verified.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-18","2024-11-29","100%","None","None","Database schema verification.","Foundation for the audit trail system.","Defines the data structure for all system audit logs."
"TASK-118","Create Centralized Audit Logging Service","Create an `IAuditService` with a method `LogEventAsync`. This service will be injectable throughout the application and will be responsible for creating and saving `AuditLog` entities to the database.","Task","Sprint Backlog","Critical","senior.dev2@company.com","product.owner@company.com","2024-11-29","8.33","3","backend,auditing,security","Sprint 3","Implement critical security features: session inactivity lock/unlock and the complete audit trail system.","System Administration","EPIC-008","DICOM Management & Printing System","US-013","TASK-117","C#,Entity Framework Core 8","Medium","Low","The service can be injected via DI. Calling `LogEventAsync` with event details creates a new row in the `AuditLog` table. The service is thread-safe.","Code reviewed; Integration tests pass, confirming log creation.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-18","2024-11-29","100%","None","None","Integration testing.","Core component for HIPAA compliance.","Provides a consistent, centralized mechanism for logging all auditable events."
"TASK-032","Implement fo-dicom C-STORE SCP Listener Service","Create an `IHostedService` in the Windows Service that uses the `fo-dicom` library to start and manage a DICOM C-STORE SCP listener on a configurable port. Received files should be saved to a temporary staging directory.","Task","Sprint Backlog","Critical","senior.dev1@company.com","product.owner@company.com","2024-12-13","16.67","5","backend,dicom,fo-dicom,scp","Sprint 4","Deliver the core DICOM ingestion pipeline and User Administration UI foundation.","DICOM Services & Processing","EPIC-005","DICOM Management & Printing System","US-008","TASK-002","fo-dicom,C#,DICOM","High","High","The SCP listener starts when the Windows Service starts. The listener successfully receives a complete DICOM study from a test SCU. All received DICOM files are stored in a temporary local folder.","Code reviewed; Integration test using a DICOM SCU tool to send a study passes.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-02","2024-12-13","100%","None","DICOM test toolkit (e.g., dcmtk)","Integration test with an external DICOM SCU.","Requires firewall port to be opened on deployment target.","Enables the system to receive medical imaging data from modalities."
"TASK-034","Implement DICOM Ingest Message Consumer","Create a RabbitMQ consumer in the Windows Service to process `DicomStudyReceived` messages. The consumer will perform the database write (persisting Patient, Study, Series, Image metadata) and move the DICOM files from staging to the final structured storage path.","Task","Sprint Backlog","Critical","senior.dev2@company.com","product.owner@company.com","2024-12-13","20.67","8","backend,dicom,rabbitmq,efcore","Sprint 4","Deliver the core DICOM ingestion pipeline and User Administration UI foundation.","DICOM Services & Processing","EPIC-005","DICOM Management & Printing System","US-008","TASK-033,TASK-036,TASK-029,TASK-037","RabbitMQ,C#,Entity Framework Core 8","High","High","Processing a message correctly inserts all related metadata into the database. DICOM files are moved to the correct hierarchical storage location. The message is acknowledged (ACK) on success. The message is NACK'd on failure.","Code reviewed; E2E integration test from C-STORE to data verified in DB and filesystem is passing; Logic is confirmed to be idempotent.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-02","2024-12-13","100%","None","None","End-to-end integration testing.","Core of the asynchronous data persistence pipeline.","Reliably persists incoming medical imaging data."
"TASK-109","Develop User Management List View and ViewModel","Create the main `UserManagementView` to display a data grid of all users. The ViewModel will fetch the user list and expose properties for the grid. It will also contain commands for Add, Edit, and Delete actions.","Task","Sprint Backlog","Critical","mid.dev1@company.com","product.owner@company.com","2024-12-13","10.33","3","frontend,wpf,mvvm,ui,admin","Sprint 4","Deliver the core DICOM ingestion pipeline and User Administration UI foundation.","System Administration","EPIC-008","DICOM Management & Printing System","US-005","TASK-110,TASK-012","WPF,XAML,MVVM","Medium","Low","A data grid correctly displays a list of users from the database. Buttons for 'Add', 'Edit', 'Delete' are present. The view is only accessible to users with the 'Administrator' role.","UI/UX review passed; View is correctly restricted to Admins; Buttons are wired to ViewModel commands.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-02","2024-12-13","100%","None","None","E2E testing of UI elements.","Foundation of the user management admin area.","Provides administrators with an interface to view and manage users."
"TASK-110","Implement User Management CRUD Application Service","Create the `UserManagementService` with methods for `CreateUser`, `UpdateUser`, and `DeleteUser`. Implement business logic such as preventing self-deletion and deletion of the last admin. All actions must create an audit log entry.","Task","Sprint Backlog","Critical","senior.dev2@company.com","product.owner@company.com","2024-12-13","20.67","8","backend,admin,security,auditing","Sprint 4","Deliver the core DICOM ingestion pipeline and User Administration UI foundation.","System Administration","EPIC-008","DICOM Management & Printing System","US-005","TASK-118","C#,Entity Framework Core 8","High","Medium","A new user can be created. A user's role and status can be updated. A user can be deleted. An attempt to delete the last administrator throws a specific exception. Each successful CRUD operation results in a corresponding record in the audit log.","Code reviewed; Integration tests cover all CRUD operations and business rules; Audit log integration is verified.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-02","2024-12-13","100%","None","None","Integration testing.","Core logic for all user account management.","Implements the secure and auditable business logic for user lifecycle management."
"TASK-041","Integrate Vortice.Windows and Set Up DirectX Host Control in WPF","Create a custom WPF control (`DicomViewportControl`) that initializes a DirectX 11 device and swap chain using the `Vortice.Windows` library. This control will serve as the canvas for all GPU-accelerated rendering.","Task","Sprint Backlog","Critical","senior.dev1@company.com","product.owner@company.com","2025-01-10","25.33","8","frontend,wpf,directx,graphics,high-risk","Sprint 5","Deliver the high-performance DICOM viewer with core image manipulation tools.","DICOM Viewer","EPIC-006","DICOM Management & Printing System","US-011","","WPF,DirectX,Vortice.Windows,C#","High","High","The custom control can be placed in a WPF window. It successfully initializes a D3D11 device and swap chain without errors. It can clear the render target to a solid color. It properly handles resizing and releases all GPU resources on unload.","Code reviewed; Proof-of-concept renders a solid color; GPU memory profiler shows no leaks after repeated load/unload cycles.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-16","2025-01-10","100%","None","None","GPU memory profiling; Stress testing.","RISK-001: Foundational component for the entire viewer. Requires specialized skills.","Provides the GPU-accelerated canvas required for a high-performance clinical viewer."
"TASK-042","Implement DICOM Pixel Data Loading and Texture Creation","Use `fo-dicom` to parse DICOM files and extract raw pixel data. Implement logic to process various photometric interpretations and transfer syntaxes, then upload the processed pixel data to a D3D11 texture.","Task","Sprint Backlog","Critical","senior.dev1@company.com","product.owner@company.com","2025-01-10","16.67","5","backend,dicom,fo-dicom,directx","Sprint 5","Deliver the high-performance DICOM viewer with core image manipulation tools.","DICOM Viewer","EPIC-006","DICOM Management & Printing System","US-011","TASK-041","fo-dicom,C#,DirectX","High","Medium","Can load pixel data from both monochrome (8, 12, 16-bit) and color DICOM files. The data is correctly formatted and uploaded to a GPU texture. Multi-frame series can be loaded.","Code reviewed; Graphics debugger confirms texture contents are correct for various DICOM sample files.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-16","2025-01-10","100%","None","None","Testing with a diverse set of DICOM files.","Core logic for getting image data onto the GPU.","Enables the display of DICOM image data."
"TASK-043","Develop HLSL Shaders for WW/WL and Rendering","Write and compile HLSL pixel shaders to perform the window/level (WW/WL) calculation on the GPU. Create a vertex shader to draw a full-screen quad. The C# rendering code will pass WW/WL values to the pixel shader as constants.","Task","Sprint Backlog","Critical","senior.dev2@company.com","product.owner@company.com","2025-01-10","16.67","5","frontend,directx,hlsl,graphics","Sprint 5","Deliver the high-performance DICOM viewer with core image manipulation tools.","DICOM Viewer","EPIC-006","DICOM Management & Printing System","US-011","TASK-042","DirectX,HLSL","High","Medium","The pixel shader correctly applies the WW/WL formula. The shaders compile successfully and are loaded by the application. The monochrome DICOM texture is correctly rendered to the screen via the shaders.","Code reviewed; Visual output matches reference viewer for given WW/WL settings.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-16","2025-01-10","100%","senior.dev1@company.com","None","Visual comparison testing.","Core rendering logic for DICOM images.","Provides the GPU-based processing for essential DICOM image manipulations like window/level."
"TASK-045","Implement Image Manipulation Tools (Zoom, Pan, WW/WL)","Implement the user input handling (mouse drag, scroll wheel) for interactive window/level, zoom, and pan. This involves updating transformation matrices or shader constants in real-time in response to input.","Task","Sprint Backlog","Critical","senior.dev2@company.com","product.owner@company.com","2025-01-10","16","5","frontend,wpf,directx,interaction","Sprint 5","Deliver the high-performance DICOM viewer with core image manipulation tools.","DICOM Viewer","EPIC-006","DICOM Management & Printing System","US-011","TASK-043","WPF,C#,Linear Algebra","Medium","Low","Dragging the mouse with the left button interactively changes WW/WL. Using the mouse scroll wheel zooms in and out. Dragging with the right mouse button pans the image. All interactions are smooth and performant.","Code reviewed; All viewer interactions are manually tested and meet performance targets.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-16","2025-01-10","100%","None","None","Manual E2E testing of viewer interactions.","Provides the core user interactivity for the DICOM viewer.","Allows clinicians to perform essential image review tasks."
"TASK-112","Implement 'Reset Password' Service Logic","Extend the `UserManagementService` with a `ResetPasswordAsync` method. This method will generate a cryptographically secure temporary password, hash it, and update the user's record with the new hash and a flag.","Task","Sprint Backlog","High","senior.dev1@company.com","product.owner@company.com","2025-01-24","8.33","3","backend,admin,security","Sprint 6","Complete the user management lifecycle features and configure external DICOM communications.","System Administration","EPIC-008","DICOM Management & Printing System","US-006","TASK-110","C#,Security Best Practices","Medium","Low","The method returns the plaintext temporary password. The user's password hash in the database is updated. The user is flagged for a forced password change. The action is logged to the audit trail.","Code reviewed; Integration test validates password update, flag, and audit log entry.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-13","2025-01-24","100%","None","None","Integration testing.","Core logic for admin-initiated password resets.","Provides a secure mechanism to restore user access."
"TASK-115","Modify Authentication Service to Handle Forced Password Change","Update `AuthenticationService.LoginAsync`. After a successful login, check the user's flag. If true, return a specific result indicating a password change is required.","Task","Sprint Backlog","High","senior.dev2@company.com","product.owner@company.com","2025-01-24","8.33","3","backend,authentication,security","Sprint 6","Complete the user management lifecycle features and configure external DICOM communications.","System Administration","EPIC-008","DICOM Management & Printing System","US-007","TASK-009,TASK-112","C#","Medium","Medium","Logging in with a temporary password returns a unique status. Logging in with a regular password returns the standard user session. The application startup logic correctly interprets this status.","Code reviewed; Unit and integration tests for the new login flow pass.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-13","2025-01-24","100%","None","None","Unit and Integration tests.","Critical modification to the core authentication workflow.","Enforces the mandatory password change security policy."
"TASK-120","Develop PACS Configuration CRUD UI and ViewModel","Create a `PacsConfigurationView` for Admins to manage a list of remote PACS. Implement a dialog for adding/editing PACS details (AE Title, IP, Port). The ViewModel will handle data binding and calls to the backend service.","Task","Sprint Backlog","High","mid.dev1@company.com","product.owner@company.com","2025-01-24","14","5","frontend,wpf,mvvm,admin,dicom","Sprint 6","Complete the user management lifecycle features and configure external DICOM communications.","System Administration","EPIC-008","DICOM Management & Printing System","US-014","TASK-121","WPF,MVVM","Medium","Low","The view displays a list of currently configured PACS. Admins can open a dialog to add/edit a PACS. The 'Verify' button is present for each entry.","UI/UX review passed; All CRUD operations are functional via the UI.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-13","2025-01-24","100%","None","None","E2E testing.","Interface for configuring system interoperability.","Allows administrators to configure connections to external imaging systems."
"TASK-039","Implement fo-dicom C-FIND/C-MOVE SCU Service","Create an application service that wraps the `fo-dicom` library's SCU functionality. Implement asynchronous methods for performing C-FIND and C-MOVE operations against a given PACS configuration. Handle DICOM response statuses.","Task","Sprint Backlog","High","senior.dev1@company.com","product.owner@company.com","2025-02-07","33.33","13","backend,dicom,fo-dicom,scu,high-risk","Sprint 7","Deliver external DICOM query/retrieve functionality and the asynchronous printing system.","DICOM Services & Processing","EPIC-005","DICOM Management & Printing System","US-009","TASK-032,TASK-125","fo-dicom,C#,DICOM","High","High","The C-FIND method can successfully query a test PACS and return results. The C-MOVE method can successfully initiate a retrieval. The service correctly handles and reports error statuses from the PACS. All network operations are async.","Code reviewed; Integration tests against multiple open-source PACS (Orthanc, dcm4chee) pass; Error handling is validated.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-27","2025-02-07","100%","None","Test PACS environment (e.g., Orthanc)","Integration testing against live test PACS.","RISK-002: Interoperability with different PACS vendors is a major risk.","Enables the core clinical workflow of retrieving patient studies from a central archive."
"TASK-048","Develop Interactive Print Preview UI with Layouts","Create the `PrintPreviewView` with a WYSIWYG canvas. Implement controls for selecting predefined page layouts (e.g., '2x2 on A4'), page orientation, margins, and scaling. The `PrintPreviewViewModel` will manage the state and update the preview.","Task","Sprint Backlog","High","mid.dev1@company.com","product.owner@company.com","2025-02-07","24","8","frontend,wpf,mvvm,ui,printing","Sprint 7","Deliver external DICOM query/retrieve functionality and the asynchronous printing system.","Printing, PDF, and Email","EPIC-007","DICOM Management & Printing System","US-012","","WPF,XAML,MVVM","High","Medium","The UI provides a visually accurate preview of the final print page. Changing layout options updates the preview in real-time. Users can drag and drop images between slots in the layout grid.","UI/UX review passed; All layout controls are functional; Drag-and-drop is implemented.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-27","2025-02-07","100%","None","None","Manual UI testing and review.","Core UI for the entire printing feature.","Provides users an intuitive interface to prepare images for physical printing."
"TASK-050","Implement Print Job Consumer in Windows Service","Create a RabbitMQ consumer for the 'print-jobs' queue. It will parse the job, update the job status in the DB to 'Processing', use the Windows Print API to generate and spool the document, and finally update the status to 'Completed' or 'Failed'.","Task","Sprint Backlog","High","senior.dev2@company.com","product.owner@company.com","2025-02-07","16.67","5","backend,printing,rabbitmq,winapi","Sprint 7","Deliver external DICOM query/retrieve functionality and the asynchronous printing system.","Printing, PDF, and Email","EPIC-007","DICOM Management & Printing System","US-012","TASK-049","C#,.NET,RabbitMQ,Windows Print API","High","Medium","The consumer processes a message from the queue. The job status is updated correctly. A print job is successfully sent to the Windows Print Spooler. Printer errors are caught and logged.","Code reviewed; Integration test successfully sends a job to a virtual printer.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-27","2025-02-07","100%","None","None","Integration testing with a virtual printer.","Core backend processing for the print feature.","Handles the asynchronous processing of print jobs, ensuring UI responsiveness."
"TASK-124","Create and Configure MSIX Packaging Project","Add a Windows Application Packaging Project to the solution. Configure the `Package.appxmanifest` to include the WPF client and the Windows Service as an extension. Set the service name to 'DICOM Service' and configure it to start automatically.","Task","Sprint Backlog","High","senior.dev1@company.com","product.owner@company.com","2025-02-21","12","5","deployment,msix,devops","Sprint 8","Deliver the application installer, first-run configuration wizard, and license validation.","Deployment & External Integration","EPIC-009","DICOM Management & Printing System","US-015","TASK-001","MSIX,Visual Studio","Medium","Medium","The solution builds a signed `.msix` package. Installing the package creates a start menu entry. The 'DICOM Service' is present in Windows Services and set to 'Automatic'. The service starts after installation.","Signed MSIX package builds successfully; Manual installation on a clean VM is successful and all criteria are met.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-02-10","2025-02-21","100%","None","Code signing certificate","Manual installation on a clean test machine.","Creates the deliverable for customer deployment.","Provides a reliable and modern installation experience for administrators."
"TASK-125","Develop First-Run Prerequisite Configuration Wizard","Implement logic that, on first launch, checks if core configuration is present. If not, display a modal wizard that prompts for PostgreSQL and RabbitMQ connection details. The wizard must test the connections and verify prerequisites before saving.","Task","Sprint Backlog","High","mid.dev2@company.com","product.owner@company.com","2025-02-21","20.67","8","frontend,wpf,mvvm,deployment,setup","Sprint 8","Deliver the application installer, first-run configuration wizard, and license validation.","Deployment & External Integration","EPIC-009","DICOM Management & Printing System","US-015","TASK-026,TASK-030","WPF,MVVM,PostgreSQL,RabbitMQ","Medium","Medium","On first launch, the wizard appears. Entering invalid credentials and clicking 'Test' displays an error. Successful validation saves the configuration and transitions to the login screen. Subsequent launches go directly to the login screen.","Code reviewed; E2E test of the first-run experience passes for both success and failure scenarios.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-02-10","2025-02-21","100%","None","None","E2E testing of the first-run experience.","Critical for ensuring a smooth customer onboarding and setup process.","De-risks deployment by ensuring prerequisites are met and correctly configured."
"TASK-127","Implement License Validation State Machine","Create a `LicenseService` that is called at application startup. This service will use the Odoo API client to validate the license. It will manage the application's license state (Licensed, GracePeriod, ReadOnly) and persist the state.","Task","Sprint Backlog","High","senior.dev2@company.com","product.owner@company.com","2025-02-21","14.33","5","backend,licensing,api-integration","Sprint 8","Deliver the application installer, first-run configuration wizard, and license validation.","Deployment & External Integration","EPIC-009","DICOM Management & Printing System","US-016","TASK-126","C#","Medium","High","On startup, the service calls the API. If API fails, it enters GracePeriod or ReadOnly mode correctly. If API returns an invalid status, it enters ReadOnly mode. The current license state is exposed.","Code reviewed; Unit tests cover all state transitions (Licensed, GracePeriod, ReadOnly).","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-02-10","2025-02-21","100%","None","Odoo Licensing API","Unit tests with a mocked API client.","RISK-007: Core logic for enforcing the product's business model.","Implements the commercial licensing model and handles connectivity issues gracefully."