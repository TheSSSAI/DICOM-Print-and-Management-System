test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
TST-TASK-001-01,Core Application Architecture & Setup,Functional,Smoke,Critical,High,"Verify all projects in the solution build successfully","The .NET 8 SDK is installed. The solution and project files have been created.","1. Open a terminal in the root solution directory. 2. Run `dotnet restore`. 3. Run `dotnet build`.","The build command completes successfully with 0 errors and 0 warnings for all projects (Client, Service, Core, etc.).",N/A,".NET 8 SDK, CLI",0.5,TASK-001
TST-TASK-002-01,Core Application Architecture & Setup,Functional,Unit,High,High,"Verify the WPF client's DI container can resolve registered services","The WPF client project is set up with `Microsoft.Extensions.DependencyInjection`. A sample service and interface (`ITestService`) are created.","1. In the `App.xaml.cs` or a test setup, register `ITestService` with the DI container. 2. Build the service provider. 3. Attempt to resolve `ITestService` from the container. 4. Assert that the resolved instance is not null.","The `GetService<ITestService>()` call returns a valid instance of the test service.",N/A,"xUnit, Microsoft.Extensions.DependencyInjection",1,TASK-002
TST-TASK-003-01,Core Application Architecture & Setup,Functional,Unit,High,High,"Verify the Windows Service's DI container can resolve registered services and hosted services","The Windows Service project is set up with the Generic Host builder. A sample service (`ITestService`) and a sample hosted service (`ITestHostedService`) are created.","1. In `Program.cs` or a test setup, register `ITestService` and `ITestHostedService` with the Host builder. 2. Build the host. 3. Attempt to resolve `ITestService` from the host's services. 4. Assert that the resolved instance is not null and that the hosted service is present in the host's services collection.","The DI container successfully resolves the registered service. The host is built without errors.",N/A,"xUnit, Microsoft.Extensions.DependencyInjection",1,TASK-003
TST-TASK-004-01,Core Application Architecture & Setup,Functional,Integration,High,High,"Verify the RabbitMQ connection service successfully connects to a running broker","A RabbitMQ server is running and accessible. Connection details are correctly configured.","1. Instantiate the RabbitMQ connection management service. 2. Invoke the connection method. 3. Check the status of the connection.","The service establishes a connection to the RabbitMQ broker, and the connection status is reported as 'Connected'.",RabbitMQ server URL and credentials,"xUnit, RabbitMQ.Client, Testcontainers (optional)",2,TASK-004
TST-TASK-004-02,Core Application Architecture & Setup,Non-Functional (Resiliency),Integration,High,High,"Verify the RabbitMQ connection service automatically retries on connection failure","The RabbitMQ server is initially running and then stopped.","1. Connect the service to the running RabbitMQ broker. 2. Stop the RabbitMQ broker. 3. Monitor the service logs or events. 4. Restart the RabbitMQ broker. 5. Verify the service re-establishes the connection.","The service detects the lost connection, logs retry attempts at expected intervals, and successfully reconnects once the broker is available again.",RabbitMQ server URL and credentials,"xUnit, RabbitMQ.Client, Docker",3,TASK-004
TST-TASK-005-01,Core Application Architecture & Setup,Functional,Integration,High,High,"Verify the Message Producer service can publish a persistent message to a durable queue","A durable queue is declared on a running RabbitMQ broker. The producer service is connected.","1. Create a sample message object. 2. Use the `IMessageProducer` to publish the message to the target exchange/queue, marking it as persistent. 3. Use the RabbitMQ Management UI or a test consumer to retrieve the message. 4. Inspect the message's properties.","The message is successfully published and can be retrieved from the queue. The message's `delivery_mode` property is set to 2 (persistent).","RabbitMQ exchange and queue names, sample message payload",xUnit, RabbitMQ.Client, RabbitMQ Management UI,2,TASK-005
TST-TASK-006-01,Core Application Architecture & Setup,Functional,Integration,High,High,"Verify the startup service correctly declares a durable queue and exchange","A running RabbitMQ broker is available.","1. Run the component of the application responsible for declaring queues. 2. Connect to the RabbitMQ Management UI. 3. Navigate to the Queues and Exchanges tabs.","The specified exchange exists with the correct type. The specified queue exists, is marked as 'Durable' (shows a 'D' icon), and is bound to the exchange.",N/A,"RabbitMQ Management UI, RabbitMQ.Client",2,TASK-006
TST-TASK-006-02,Core Application Architecture & Setup,Non-Functional (Resiliency),Integration,High,High,"Verify a queue is correctly configured with a Dead-Letter Exchange (DLX)","A running RabbitMQ broker is available. The main queue, DLX, and DLQ are declared.","1. Publish a message to the main queue. 2. Consume the message and reject it without requeuing (`basic.nack` with requeue=false). 3. Check the contents of the Dead-Letter Queue (DLQ).","The rejected message is not returned to the main queue but is instead routed to the DLQ via the DLX.",RabbitMQ queue/exchange names,"RabbitMQ Management UI, RabbitMQ.Client",2.5,TASK-006
TST-TASK-007-01,Core Application Architecture & Setup,Functional,Integration,High,High,"Verify the consumer base class successfully receives and deserializes a message","A queue on a running RabbitMQ broker contains a valid serialized message (JSON).","1. Start the hosted service consumer subscribed to the target queue. 2. Publish a valid JSON message to the queue. 3. Place a breakpoint or log inside the message handler.","The consumer receives the message. The message is correctly deserialized into the expected C# object. The message handler logic is invoked.",Sample JSON message,"xUnit, RabbitMQ.Client",3,TASK-007
TST-TASK-007-02,Core Application Architecture & Setup,Functional,Integration,High,High,"Verify the consumer correctly acknowledges (acks) a successfully processed message","A message is in the target queue. The consumer is running.","1. Let the consumer receive and process a message successfully. 2. Monitor the queue in the RabbitMQ Management UI.","After the message handler completes without errors, the message is removed from the queue (acked).","Sample message",RabbitMQ Management UI,2,TASK-007
TST-TASK-007-03,Core Application Architecture & Setup,Functional,Integration,High,High,"Verify the consumer negatively acknowledges (nacks) a message on processing failure","A message is in the target queue. The consumer's message handler is configured to throw an exception.","1. Let the consumer receive a message that will cause an exception in the handler. 2. Monitor the queue and/or DLQ in the RabbitMQ Management UI.","The consumer catches the exception and sends a `nack` to the broker. The message is routed to the DLQ (if configured).","Sample poison message",RabbitMQ Management UI,2,TASK-007
TST-TASK-008-01,Core Application Architecture & Setup,Functional,Integration,High,High,"Verify the Named Pipe Server in the Windows Service starts and listens for connections","The Windows Service is running.","1. Start the Windows Service. 2. Use a tool (like `procexp` or PowerShell) to verify that a pipe with the configured name has been created and is in a listening state. 3. Use a test Named Pipe client to attempt a connection.","The pipe is created successfully. The test client can establish a connection to the server.",N/A,"Process Explorer, PowerShell, Test Client",2,TASK-008
TST-TASK-009-01,Core Application Architecture & Setup,Functional,Integration,High,High,"Verify the Named Pipe Client can send a request and receive a reply","The Windows Service with the Named Pipe Server is running.","1. Instantiate the Named Pipe client service. 2. Send a known request message (e.g., 'PING'). 3. Await the response from the server.","The client successfully sends the 'PING' message and receives the expected 'PONG' response from the server within the configured timeout.",N/A,"Test Client, Running Service",2.5,TASK-009
TST-TASK-009-02,Core Application Architecture & Setup,Non-Functional (Resiliency),Integration,High,High,"Verify the Named Pipe Client correctly handles a timeout","The Named Pipe Server is NOT running, or it is configured to not respond.","1. Instantiate the Named Pipe client with a short timeout (e.g., 2 seconds). 2. Attempt to send a request.","The client call does not hang indefinitely. It throws a `TimeoutException` or returns a failure status after the configured timeout period has elapsed.",N/A,"Test Client",2,TASK-009
TST-TASK-011-01,Core Application Architecture & Setup,Functional,Integration,Critical,High,"Verify the initial EF Core migration can be successfully applied to a PostgreSQL database","A PostgreSQL server is running and accessible. The database exists. EF Core migration has been generated.","1. Point the application configuration to the test database. 2. Run the `dotnet ef database update` command or run application code that calls `context.Database.Migrate()`.","The command completes successfully. The `Users`, `Roles`, and `PasswordHistory` tables are created in the PostgreSQL database with the correct columns, types, and constraints (e.g., unique index on username).",PostgreSQL connection string,"PostgreSQL, pgAdmin, .NET CLI",1.5,TASK-011
TST-TASK-024-01,Security & Compliance,Functional,Integration,Critical,High,"Verify EF Core can write and read an encrypted value using pgcrypto","A PostgreSQL database with the `pgcrypto` extension enabled is available. The PoC code is complete.","1. Define an entity with a string property configured to use the pgcrypto value converter. 2. Create and save an instance of the entity with a plaintext value. 3. Use `psql` or `pgAdmin` to query the raw data in the table. 4. In the code, read the entity back from the database and access the property.","The raw data in the database is encrypted (binary or non-human-readable format). The value read back into the application code is the original, decrypted plaintext.",PostgreSQL connection string with pgcrypto enabled,"PostgreSQL, pgAdmin, xUnit",3,TASK-024
TST-TASK-035-01,DICOM Viewer & Tools,Functional,System,Critical,Medium,"Verify DirectX interop control renders a solid color without crashing","The PoC WPF application is built. A machine with a DirectX 11 compatible GPU is available.","1. Launch the PoC application. 2. Observe the custom control area.","The application launches without exceptions. The custom control area is rendered with the specified clear color (e.g., blue), proving the swap chain is correctly initialized and presented.",N/A,"DirectX 11 GPU",3,TASK-035
TST-TASK-082-01,Deployment & Operations,Functional,System,High,High,"Verify the CI pipeline builds the solution and runs tests on code push","The CI pipeline YAML file is checked into the source control repository. A simple unit test exists.","1. Make a small code change and push it to a feature branch that triggers the CI pipeline. 2. Open the CI/CD dashboard in the source control provider (e.g., GitHub Actions).","The pipeline is triggered automatically. The 'build' step completes successfully. The 'test' step runs and reports that all tests passed. The pipeline finishes with a 'success' status.",N/A,"GitHub Actions (or similar CI provider)",2,TASK-082
TST-TASK-083-01,Deployment & Operations,Security,System,High,High,"Verify the CI pipeline fails when a high-severity vulnerability is detected","A dependency with a known high-severity vulnerability is temporarily added to a project's `.csproj` file.","1. Add a vulnerable package version to a project. 2. Push the change to trigger the CI pipeline. 3. Observe the pipeline execution.","The build and test steps pass. The OWASP Dependency-Check step runs, identifies the high-severity vulnerability, and fails the build, preventing the code from being merged.",A known vulnerable NuGet package,"GitHub Actions (or similar CI provider)",2.5,TASK-083
TST-TASK-012-01,Security & Compliance,Functional,Integration,Critical,High,"Verify AuthenticationService correctly validates a user with a correct password","A test database is populated with a user and their BCrypt-hashed password.","1. Instantiate `AuthenticationService` with a real `DbContext`. 2. Call the authentication method with the user's username and correct plaintext password.","The service returns a success result (e.g., a user session object or true).",Test user with known username, password, and BCrypt hash,"xUnit, Testcontainers, EF Core",2,TASK-012
TST-TASK-012-02,Security & Compliance,Functional,Integration,Critical,High,"Verify AuthenticationService rejects a user with an incorrect password","A test database is populated with a user.","1. Instantiate `AuthenticationService`. 2. Call the authentication method with the user's username and an incorrect password.","The service returns a failure result (e.g., null or false).",Test user with known username and BCrypt hash,"xUnit, Testcontainers, EF Core",1.5,TASK-012
TST-TASK-012-03,Security & Compliance,Functional,Integration,Critical,High,"Verify AuthenticationService rejects a non-existent user","The test database does not contain the specified username.","1. Instantiate `AuthenticationService`. 2. Call the authentication method with a username that does not exist in the database.","The service returns a failure result without throwing an exception, and the response time is not significantly different from a failed password attempt.",A username that is not in the test data,"xUnit, Testcontainers, EF Core",1.5,TASK-012
TST-TASK-014-01,Security & Compliance,Functional,Unit,High,High,"Verify LoginViewModel's Login command is disabled when fields are empty","The LoginViewModel is instantiated.","1. Check the `CanExecute` status of the Login command when Username and Password properties are null or empty. 2. Set only the Username property. 3. Check the `CanExecute` status again. 4. Set both properties. 5. Check the `CanExecute` status.","The command's `CanExecute` is false when either Username or Password is empty. It becomes true only when both properties have values.",N/A,"xUnit, Moq",1,TASK-014
TST-TASK-016-01,Security & Compliance,Functional,System (End-to-End),Critical,High,"Verify complete login flow from UI to database","A full test environment is running, including the WPF client, database, and backend services.","1. Launch the WPF application. 2. Enter valid credentials for an active 'Technician' user. 3. Click 'Login'. 4. Observe the application window.","The login window closes, and the main application window opens. UI elements specific to administrators (e.g., 'Administration' tab) are not visible.",Active Technician user account,"WPF Client, PostgreSQL, Test User Data",4,US-101
TST-TASK-018-01,Security & Compliance,Functional,System,Critical,High,"Verify UI elements are hidden/disabled for the Technician role","The user is logged in as a 'Technician'.","1. Navigate to the main application window. 2. Navigate to the DICOM viewer.","The 'Administration' navigation element is not visible. The 'Edit DICOM Metadata' button is disabled or not visible.",Technician user account,"WPF Client",2,TASK-018
TST-TASK-018-02,Security & Compliance,Functional,System,Critical,High,"Verify UI elements are visible/enabled for the Administrator role","The user is logged in as an 'Administrator'.","1. Navigate to the main application window. 2. Navigate to the DICOM viewer.","The 'Administration' navigation element is visible and enabled. The 'Edit DICOM Metadata' button is visible and enabled.",Administrator user account,"WPF Client",2,TASK-018
TST-TASK-019-01,Security & Compliance,Security,Integration,Critical,High,"Verify backend service method rejects calls from non-admin users","A test context is created where the `ICurrentUserService` reports the current user is a 'Technician'.","1. In a test, instantiate a service that has an admin-only method (e.g., `UserService`). 2. Set up the mocked `ICurrentUserService` to return the 'Technician' role. 3. Call the admin-only method.","The method throws an `UnauthorizedAccessException` or returns a specific authorization failure result.",N/A,"xUnit, Moq",2,TASK-019
TST-TASK-021-01,Security & Compliance,Functional,Integration,High,High,"Verify AuditService successfully persists an event to the database","A test database is available.","1. Instantiate the `AuditService`. 2. Create a sample audit event object. 3. Call `LogEventAsync` with the sample data. 4. Query the `AuditLog` table in the database.","A new row is created in the `AuditLog` table that matches the data from the sample event object.",Sample audit data (user ID, event type, etc.),"xUnit, Testcontainers, EF Core",2,TASK-021
TST-TASK-023-01,Security & Compliance,Functional,System,High,Medium,"Verify Audit Trail UI can filter logs by date range","The audit log contains entries with various timestamps. The user is logged in as an Admin.","1. Open the Audit Trail viewer. Note the total number of logs. 2. Select a start and end date that covers only a subset of the logs. 3. Apply the filter.","The DataGrid updates to show only the log entries that fall within the selected date range.",Admin user, audit log test data,"WPF Client",2.5,TASK-023
TST-TASK-023-02,Security & Compliance,Functional,System,High,Medium,"Verify the Export-to-CSV functionality generates a correct file","The audit log viewer is open and is displaying a filtered set of data.","1. Click the 'Export to CSV' button. 2. Save the file. 3. Open the generated CSV file with a spreadsheet program.","The CSV file contains the exact same rows and data that were displayed in the UI's DataGrid at the time of export. The headers are correct.",Admin user,"WPF Client, CSV viewer (e.g., Excel)",2,TASK-023
TST-TASK-025-01,Security & Compliance,Security,Integration,Critical,High,"Verify all PHI columns in the Patient entity are encrypted at rest","A test database with `pgcrypto` is available.","1. Create a `Patient` entity with PHI data (Name, ID, BirthDate). 2. Save the entity to the database using the application's `DbContext`. 3. Use `psql` to `SELECT *` from the `Patient` table.","The values in the `PatientName`, `DicomPatientId`, and `PatientBirthDate` columns are in an encrypted, non-human-readable format. All other columns are plaintext.",Patient test data,"xUnit, Testcontainers, PostgreSQL, pgAdmin",3,TASK-025
TST-TASK-026-01,Security & Compliance,Security,Integration,High,High,"Verify a secret can be saved to and read from Windows Credential Manager","The test is running on a Windows machine with appropriate permissions.","1. Instantiate the `CredentialManagerService`. 2. Call `SaveSecret` with a unique name and a secret value. 3. Call `ReadSecret` with the same unique name. 4. Clean up by deleting the credential.","The `ReadSecret` call successfully returns the original secret value. The credential is no longer present after cleanup.",N/A,"xUnit, Windows OS",2.5,TASK-026
TST-TASK-027-01,Security & Compliance,Security,Integration,Critical,High,"Verify the application can start and connect to the database using a secret from Credential Manager","The database password has been stored in Windows Credential Manager under the expected name.","1. Configure the application to NOT use a plaintext password. 2. Run the application (Client or Service). 3. Perform an action that requires a database connection.","The application starts without crashing. It successfully connects to the database and performs the action. No plaintext passwords are found in config files or memory dumps.",Database password stored in Credential Manager,"Windows OS, PostgreSQL, Process Monitor",3,TASK-027
TST-TASK-029-01,DICOM Core Functionality,Functional,Integration,Critical,High,"Verify the C-STORE SCP handler saves a DICOM file and publishes a message","The Windows Service is running. A DICOM file is available for sending.","1. Use a DICOM SCU tool (e.g., `dcmtk/storescu`) to send a DICOM file to the service's SCP. 2. Check the configured temporary storage directory. 3. Monitor the target RabbitMQ queue.","A file corresponding to the sent DICOM object is created in the temporary directory. A message containing the metadata of that DICOM object appears in the RabbitMQ queue.",Sample DICOM file,"DCMTK, RabbitMQ Management UI",4,TASK-029
TST-TASK-031-01,DICOM Core Functionality,Functional,Integration,Critical,High,"Verify the ingestion consumer persists metadata transactionally","A message containing valid DICOM metadata is in the ingestion queue.","1. Start the consumer service. 2. Let the consumer process the message. 3. Query the `Patient`, `Study`, `Series`, and `Image` tables in the database.","New records corresponding to the metadata in the message are created in all four tables. All records are correctly linked via foreign keys.",A serialized DICOM metadata message,"xUnit, Testcontainers, EF Core",3,TASK-031
TST-TASK-031-02,DICOM Core Functionality,Non-Functional (Data Integrity),Integration,Critical,High,"Verify the ingestion consumer is idempotent","A message containing metadata for a study that already exists in the database is in the ingestion queue.","1. Ensure a study with a specific StudyInstanceUID exists in the DB. 2. Publish a message with the same StudyInstanceUID to the queue. 3. Let the consumer process the message.","The consumer completes without error. No duplicate Patient, Study, Series, or Image records are created in the database.",A serialized DICOM metadata message for an existing study,"xUnit, Testcontainers, EF Core",2.5,TASK-031
TST-TASK-036-01,DICOM Viewer & Tools,Functional,Integration,Critical,Medium,"Verify DICOM pixel data is correctly loaded into a DirectX texture","A sample monochrome DICOM file is available. The DirectX interop control is set up.","1. Load the DICOM file using `fo-dicom`. 2. Pass the pixel data to the texture loading pipeline. 3. Use a graphics debugger (e.g., PIX, RenderDoc) to inspect the GPU memory.","A DirectX texture is created with the correct dimensions, format (e.g., R8_UNORM), and the pixel data matches the source DICOM file.",Sample 8-bit monochrome DICOM file,"PIX for Windows, RenderDoc",4,TASK-036
TST-TASK-037-01,DICOM Viewer & Tools,Functional,Unit,Critical,High,"Verify the WW/WL shader correctly maps pixel values","The HLSL shader is compiled. A test harness is available to run the pixel shader.","1. Provide a test texture with known input values (e.g., 0, 500, 1000, 2000). 2. Set the shader's constant buffer with specific WW (1000) and WL (500) values. 3. Run the shader and capture the output pixel values.","The output values match the expected results of the WW/WL formula. E.g., a pixel value of 500 should map to 0.5 (mid-grey), 0 should map to 0.0 (black), and 1000 should map to 1.0 (white).",Sample input values and expected output values,HLSL Compiler, Graphics Debugger,3.5,TASK-037
TST-TASK-038-01,DICOM Viewer & Tools,Non-Functional (Performance),System,High,Medium,"Verify progressive loading shows a preview image quickly","A large DICOM series (e.g., 500+ slices, >500MB) is available.","1. Start a stopwatch. 2. Open the large DICOM series in the viewer. 3. Stop the stopwatch when the first, low-resolution image is visible. 4. Observe the UI while the full-resolution data loads.","The low-resolution preview appears in under 3 seconds. The UI remains responsive while the full-resolution images load in the background. The final image quality is sharp.",Large multi-frame CT or MR study,"WPF Client",3,TASK-038
TST-TASK-032-01,DICOM Core Functionality,Functional,Integration,Critical,High,"Verify C-FIND SCU can query a remote PACS and parse results","A DICOM PACS simulator is running and configured with test studies.","1. Configure the `DicomScuService` to point to the PACS simulator. 2. Call the C-FIND method with valid search criteria (e.g., Patient ID).","The service successfully sends the C-FIND-RQ, receives one or more C-FIND-RSP messages, and correctly parses them into a list of `DicomQueryResult` objects.",DICOM PACS simulator (e.g., Orthanc, dcm4chee), test DICOM studies,"xUnit, Orthanc/DCMTK",4,TASK-032
TST-TASK-033-01,DICOM Core Functionality,Functional,Integration,Critical,High,"Verify C-MOVE SCU can initiate a retrieval from a remote PACS","A PACS simulator is running. The local C-STORE SCP is running.","1. Configure the `DicomScuService`. 2. Call the C-MOVE method, specifying a study to retrieve and the local SCP's AE Title as the destination. 3. Monitor the local C-STORE SCP.","The service sends the C-MOVE-RQ. The remote PACS initiates a C-STORE sub-operation to the local SCP. The local SCP receives the DICOM files for the requested study.",DICOM PACS simulator, test DICOM studies,"xUnit, Orthanc/DCMTK",4.5,TASK-033
TST-TASK-034-01,DICOM Core Functionality,Functional,System,Critical,Medium,"Verify PACS Query UI can search and display results","The application is running and connected to a test PACS. The user is logged in.","1. Open the PACS Query view. 2. Enter a known Patient ID. 3. Click 'Search'.","The UI remains responsive. After a short delay, the results grid is populated with the studies matching the Patient ID from the remote PACS.",Technician/Admin user, connection to test PACS,"WPF Client",3,TASK-034
TST-TASK-059-01,System Administration & Configuration,Functional,Integration,Critical,High,"Verify 'Create User' logic correctly hashes the password and sets flags","The backend `UserService` is instantiated with a test database context.","1. Call the `CreateUser` method with a username, role, and temporary password. 2. Inspect the user entity before it's saved. 3. Save the user and query the database.","The password hash in the user object is a valid BCrypt hash. The `isTemporaryPassword` flag is set to true. The user is saved to the database successfully.",Test username and role,"xUnit, Testcontainers, EF Core, BCrypt.Net",2.5,TASK-059
TST-TASK-060-01,System Administration & Configuration,Non-Functional (Data Integrity),Integration,Critical,High,"Verify user creation and auditing are atomic (commit)","The `UserService` and `AuditService` are set up.","1. Call the service method to create a user. 2. After the call succeeds, query both the `Users` and `AuditLog` tables.","A new record exists in the `Users` table. A corresponding 'User Created' record exists in the `AuditLog` table.",Test username and role,"xUnit, Testcontainers, EF Core",2,TASK-060
TST-TASK-060-02,System Administration & Configuration,Non-Functional (Data Integrity),Integration,Critical,High,"Verify user creation and auditing are atomic (rollback)","The `AuditService` is mocked to throw an exception when `LogEventAsync` is called.","1. Call the service method to create a user. 2. Catch the expected exception. 3. Query the `Users` table.","No new user record is found in the `Users` table, proving the transaction was rolled back.",Test username and role,"xUnit, Moq, Testcontainers, EF Core",3,TASK-060
TST-TASK-062-01,System Administration & Configuration,Functional,Integration,High,High,"Verify the system prevents demoting or disabling the last administrator","The test database contains only one active administrator user.","1. Call the `UpdateUser` service method, attempting to change the last admin's role to 'Technician'. 2. Call the `UpdateUser` service method, attempting to set the last admin's status to inactive.","Both calls fail, throwing a specific business rule exception (e.g., `InvalidOperationException`) with a descriptive message. The user's record in the database remains unchanged.",A database state with only one admin user,"xUnit, Testcontainers, EF Core",2.5,TASK-062
TST-TASK-065-01,System Administration & Configuration,Functional,Integration,High,High,"Verify the system prevents a user from deleting their own account","The `ICurrentUserService` is mocked to represent the same user being targeted for deletion.","1. Call the `DeleteUser` service method with a user ID. 2. Ensure the mocked session service returns the same user ID.","The method fails, throwing an exception or returning a failure result indicating self-deletion is not allowed. No records are deleted from the database.",N/A,"xUnit, Moq, Testcontainers, EF Core",2,TASK-065
TST-TASK-070-01,System Administration & Configuration,Functional,Integration,High,High,"Verify C-ECHO logic correctly reports success for a valid PACS configuration","A DICOM PACS simulator is running.","1. Call the `DicomScuService.Verify` method with the correct AE Title, IP, and Port for the running PACS simulator.","The method returns a success result within a short timeout period (e.g., 5 seconds).",DICOM PACS simulator,"xUnit, Orthanc/DCMTK",2,TASK-070
TST-TASK-073-01,System Administration & Configuration,Functional,Integration,High,High,"Verify routing rules are correctly applied during DICOM ingestion","A routing rule is configured in the database (e.g., Modality 'CT' routes to 'D:\CT_Studies'). A DICOM file with modality 'CT' is available.","1. Initiate the DICOM ingestion process for the CT study. 2. Monitor the file system after processing is complete.","The DICOM file is moved to the 'D:\CT_Studies' folder, not the default storage location.",Routing rule in DB, sample CT DICOM file,"Testcontainers, File System Watcher",3,TASK-073
TST-TASK-044-01,DICOM Viewer & Tools,Functional,Integration,High,High,"Verify GSPS creation service generates a standard-compliant DICOM file","Annotation data (e.g., coordinates for a line, text content) is available.","1. Call the `GspsCreationService` with the annotation data. 2. Save the resulting `DicomFile` object to disk. 3. Open the saved file with a third-party DICOM validation tool or viewer.","The service generates a `DicomFile` without errors. The third-party tool can successfully parse the GSPS object and recognizes the graphic annotation sequences within it.",Sample annotation data,"xUnit, fo-dicom, a third-party DICOM viewer/validator",4.5,TASK-044
TST-TASK-045-01,DICOM Viewer & Tools,Functional,Integration,High,Medium,"Verify the viewer can parse and display annotations from a pre-existing GSPS file","A DICOM series and a corresponding valid GSPS file are available.","1. Open the DICOM series in the application's viewer. 2. Observe the annotation layer.","The viewer automatically detects the associated GSPS file, parses it, and correctly renders the annotations (lines, text, etc.) on top of the corresponding images.",DICOM study with a valid GSPS object,"WPF Client",4,TASK-045
TST-TASK-074-01,System Administration & Configuration,Functional,Integration,High,High,"Verify the health probe service correctly checks dependency status","The Windows Service is running. PostgreSQL and RabbitMQ are also running.","1. Let the `HealthProbeHostedService` run for several ticks. 2. Place a breakpoint or check the cached health status object after a tick.","The cached status object correctly reports 'Connected' or 'Healthy' for both PostgreSQL and RabbitMQ, and provides an accurate queue depth and disk space reading.",Running instances of PostgreSQL and RabbitMQ,"Visual Studio Debugger",2.5,TASK-074
TST-TASK-076-01,System Administration & Configuration,Functional,System,High,Medium,"Verify the Health Dashboard UI displays status from the service","The full application (Client and Service) is running. The user is logged in as an Admin.","1. Open the System Health Dashboard view. 2. In another window, stop the RabbitMQ service. 3. Observe the dashboard UI.","Initially, all indicators are green. After stopping RabbitMQ and waiting for the next probe interval, the RabbitMQ connectivity indicator on the dashboard turns red and displays a 'Disconnected' status.",Admin user account,"WPF Client, Windows Services MMC",3,TASK-076
TST-TASK-050-01,Printing & Exporting,Functional,System,Critical,Medium,"Verify the 'Print' button is disabled when the background service is not running","The WPF client is running, but the 'DICOM Service' Windows Service is stopped.","1. Open the Print Preview window. 2. Observe the state of the 'Print' button.","The 'Print' button is disabled (greyed out). A notification or status message is visible, indicating that the print service is unavailable.",Technician/Admin user account,"WPF Client, Windows Services MMC",2,TASK-050
TST-TASK-051-01,Printing & Exporting,Functional,System,Critical,High,"Verify submitting a print job creates a message in the RabbitMQ queue","The full application (Client and Service) is running.","1. Prepare a layout in the Print Preview window. 2. Click 'Print'. 3. Immediately check the 'print_jobs' queue in the RabbitMQ Management UI.","A new persistent message appears in the 'print_jobs' queue. The message body is a JSON object containing the details of the print layout (image paths, branding, etc.).",Technician/Admin user account,"WPF Client, RabbitMQ Management UI",2.5,TASK-051
TST-TASK-053-01,Printing & Exporting,Functional,Integration,Critical,Medium,"Verify the print consumer spools a job to the Windows print queue","A message is in the 'print_jobs' queue. A test printer (e.g., 'Microsoft Print to PDF') is installed.","1. Start the Windows Service. 2. Let the `PrintJobConsumer` process the message. 3. Open the Windows Print Queue for the test printer.","A new print job appears briefly in the Windows print queue, corresponding to the processed message. If printing to PDF, a file save dialog appears.",A message in the print queue, a test printer,"Windows Print Queue Viewer",3,TASK-053
TST-TASK-056-01,Printing & Exporting,Functional,Integration,High,High,"Verify the PDF consumer generates a password-protected, PDF/A-compliant file","A valid PDF job message is in the 'pdf_export_jobs' queue. The message specifies a password.","1. Start the Windows Service and let the `PdfJobConsumer` process the message. 2. Locate the generated PDF file. 3. Attempt to open the file. 4. Use a PDF validation tool to check for PDF/A compliance.","The PDF file is created at the specified path. Opening the file requires the correct password. The validation tool confirms the file complies with the PDF/A-3 standard.",A message in the PDF queue,"Adobe Acrobat Pro or other PDF validator",3.5,TASK-056
TST-TASK-079-01,Deployment & Operations,Functional,System,Critical,Manual Only,"Verify installer prerequisite check fails with incorrect DB details","The MSIX installer is available. PostgreSQL is running, but incorrect connection details will be provided.","1. Run the installer. 2. When prompted for PostgreSQL details, enter an incorrect password or port. 3. Proceed with the check.","The installer displays a clear error message stating it could not connect to the PostgreSQL server. The 'Next' button is disabled, preventing the installation from continuing.",MSIX installer file,"Test Machine (VM)",2.5,TASK-079
TST-TASK-079-02,Deployment & Operations,Functional,System,Critical,Manual Only,"Verify installer prerequisite check passes and installation completes","The MSIX installer is available. PostgreSQL and RabbitMQ are running and accessible.","1. Run the installer. 2. Provide correct connection details for both services. 3. Complete the installation.","The prerequisite checks pass. The installation finishes successfully. The client application appears in the Start Menu, and the 'DICOM Service' is listed and running in the Windows Services console.",MSIX installer file,"Test Machine (VM)",3,TASK-079
PERF-US-109-01,DICOM Core Functionality,Non-Functional (Performance),System,High,High,"Measure C-STORE SCP throughput","The Windows Service is running. A load testing tool capable of simulating multiple DICOM SCUs is available.","1. Configure the load testing tool to simulate 10 concurrent C-STORE associations. 2. Each association will send a medium-sized study (e.g., 50 images). 3. Start the test and monitor the service's CPU/memory usage and the client UI's responsiveness.","The C-STORE SCP successfully processes all 10 associations without timing out or refusing connections. The client UI remains responsive (actions complete in <500ms) throughout the test.",Load testing tool (e.g., custom script using `fo-dicom`), test DICOM studies,"Performance monitoring tools (PerfMon)",6,US-109
PERF-US-111-01,DICOM Viewer & Tools,Non-Functional (Performance),System,Critical,Medium,"Measure application launch time","The application is installed on a machine meeting recommended hardware specs (with SSD).","1. Ensure the application is not running and not in memory. 2. Start a stopwatch and launch the application. 3. Stop the stopwatch when the login screen is fully rendered and responsive.","The application launch time is less than 3 seconds.",N/A,"Stopwatch, Test Machine",1,US-111
PERF-US-111-02,DICOM Viewer & Tools,Non-Functional (Performance),System,Critical,Medium,"Measure DICOM study load time","A DICOM study of ~500MB is available on local disk.","1. Log in to the application. 2. Start a stopwatch and double-click the 500MB study to open it. 3. Stop the stopwatch when the initial low-resolution preview is rendered and interactive.","The study loading time is less than 3 seconds.",500MB DICOM study,"Stopwatch, Test Machine",1,US-111