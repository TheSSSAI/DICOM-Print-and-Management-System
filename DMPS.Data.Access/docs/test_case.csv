"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-SEC-001","User Authentication","Functional","E2E","Critical","true","High","Verify a user with the 'Administrator' role can log in, and all administrative UI elements are visible and enabled.","High - Failure prevents system administration.","Medium","An active 'Administrator' user account exists. Application is at the login screen.","1. Launch the WPF client. 2. Enter valid Administrator credentials. 3. Click 'Login'. 4. Verify the main application window appears. 5. Verify the 'Administration' tab is visible and clickable. 6. Navigate to the 'User Management' screen and verify controls are enabled.","User is logged in successfully, and the UI correctly reflects Administrator privileges as per REQ-1-016.","Pre-configured Administrator user account.","WinAppDriver, Appium, Test Data Seeding Script","2","12","4","Database with user schema; Authentication Service.","Staging Environment","100% pass rate; Login completes in < 2 seconds.","Critical - Admins cannot manage the system.","Every build","Low","None","Credentials used in tests must be from a non-production environment.","Login completes within 2 seconds as per REQ-1-077.","Login form must be keyboard navigable."
"TEST-SEC-002","Session Security (HIPAA)","Functional","E2E","Critical","true","High","Verify the application automatically locks after 15 minutes of inactivity and can be unlocked with the correct password, preserving the application state.","Critical - Failure is a direct HIPAA compliance violation (REQ-1-012).","High","User is logged in. A DICOM study is open in the viewer. Inactivity timeout is configured to a short interval for testing (e.g., 10 seconds).","1. Log in and open a study. 2. Apply a unique zoom and WW/WL setting. 3. Wait for the inactivity timer to elapse. 4. Verify the lock screen overlay appears. 5. Enter the correct user password and click 'Unlock'. 6. Verify the lock screen disappears and the viewer is in the exact same state as step 2.","Session locks and unlocks correctly, preserving the UI state, fulfilling REQ-1-041.","Test user account, sample DICOM study.","WinAppDriver, Custom test utility to pause for a set time.","3","16","6","Authentication Service, Session Lock Service.","Staging Environment","Lock screen appears within 1s of timeout; Unlock restores state perfectly.","Critical - HIPAA compliance failure and PHI exposure risk.","Every release","Medium","Logout to clear session.","Test must validate that underlying UI is non-interactive when locked.","Unlock action completes in < 500ms.","Lock screen must be keyboard navigable."
"TEST-IPC-001","Asynchronous Task Processing","Reliability","Integration","Critical","true","High","Verify that a persistently marked message published to a durable RabbitMQ queue is routed to the Dead-Letter Queue (DLQ) after its consumer repeatedly fails to process it.","High - Failure can lead to lost data (print jobs, study metadata) if a consumer service has a bug or is down.","High","RabbitMQ is running. A main queue and a DLQ are configured correctly. A consumer is configured to fail (e.g., throw an exception).","1. Publish a persistent message to the durable main queue. 2. Start a consumer that is designed to NACK the message without requeueing. 3. Verify the message is consumed from the main queue. 4. Verify the message appears in the DLQ. 5. Verify the message headers in the DLQ contain dead-lettering information.","The message is successfully routed to the DLQ, ensuring no data loss and enabling manual intervention, as per REQ-1-006.","Sample message payload.","xUnit, Testcontainers (for RabbitMQ), RabbitMQ .NET Client","6","14","3","RabbitMQ Infrastructure Abstraction.","CI Environment with Docker.","Message is present in DLQ within 5 seconds of the final NACK.","Critical - A failing message could block a queue or be lost forever.","Every build","Medium","Purge all queues; stop Testcontainer.","None","N/A","N/A"
"TEST-NET-001","DICOM Network Communications","Functional","Integration","Critical","true","High","Verify the end-to-end C-STORE ingestion pipeline: A DICOM study is sent, a message is queued in RabbitMQ, and a consumer processes it, resulting in correct database entries and file storage.","Critical - This is the primary data ingestion path for the entire system.","Critical","Windows Service is running. PostgreSQL and RabbitMQ are running. A test DICOM study is available.","1. Use a DICOM SCU simulator (e.g., DCMTK's storescu) to send a study to the service's SCP port. 2. Verify the SCU receives a success status. 3. Check RabbitMQ to confirm a `DicomStudyReceived` message was queued and consumed. 4. Query the PostgreSQL database to verify Patient, Study, Series, and Image records were created. 5. Check the file system to verify the DICOM files exist in the correct hierarchical path.","The study is ingested successfully and is fully consistent between the database and file system, as per REQ-1-010 and REQ-1-035.","A multi-series DICOM study.","xUnit, Testcontainers (PostgreSQL, RabbitMQ), DCMTK (or similar DICOM toolkit).","10","30","10","Full backend stack (Windows Service, DB, MQ).","CI Environment with Docker.","End-to-end processing completes within 10 seconds. Data in DB matches DICOM metadata. Files are stored correctly.","Critical - System cannot receive data from clinical modalities.","Every build","High","Delete created DB records, files, and purge queues.","Ensure test environment is firewalled.","SCP listener should remain responsive.","N/A"
"TEST-PERF-001","DICOM Viewer","Performance","System","Critical","true","Medium","Measure the time to load a large (500MB) DICOM study and verify it meets the < 3 second requirement for initial display.","High - Slow viewer performance leads to user frustration and reduced clinical efficiency.","Medium","Application is running on a machine meeting the recommended hardware specs. A 500MB DICOM study is available.","1. Start a stopwatch. 2. From the study list, trigger the action to open the 500MB study. 3. Stop the stopwatch the moment the low-resolution preview image is rendered. 4. Repeat 10 times and calculate the average time.","The average time to display the initial preview is less than 3 seconds, fulfilling performance requirement REQ-1-077.","A DICOM CT study of at least 500MB.","UI Automation Framework (WinAppDriver), High-precision timer.","4","18","5","Fully functional DICOM viewer.","Dedicated Performance Test Environment (physical machine).","Average load time < 3s, 95th percentile < 3.5s.","High - Core non-functional requirement not met.","Every release candidate build","Medium","None","Test data must be anonymized.","As per REQ-1-077.","N/A"
"TEST-SEC-003","Data Security (HIPAA)","Security","Integration","Critical","true","High","Verify that Protected Health Information (PHI) stored in the PostgreSQL database is encrypted at the column level using pgcrypto.","Critical - Unencrypted PHI at rest is a major HIPAA violation.","Medium","A user and study exist in the database.","1. Use EF Core to insert a new patient record with a known Patient Name. 2. Use a direct, low-level SQL client (without EF Core's decryption logic) to connect to the database. 3. Execute a `SELECT ""PatientName"" FROM ""Patients""` query. 4. Assert that the returned value is NOT the plaintext name but is instead a byte array or encoded string representing the encrypted data.","Direct database access reveals only encrypted data in PHI columns, confirming compliance with REQ-1-083.","Sample PHI data (e.g., Patient Name).","xUnit, Testcontainers (PostgreSQL with pgcrypto), Npgsql (for direct SQL).","5","10","2","EF Core data model with encryption configured.","CI Environment with Docker.","Raw query returns non-plaintext data for all designated PHI columns.","Critical - Data is not secure at rest, major compliance failure.","Every build","Medium","Drop and recreate test database.","This test is a primary validation of a core security control.","N/A","N/A"