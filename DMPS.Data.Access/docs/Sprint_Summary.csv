"sprint_number","sprint_name","sprint_goal","start_date","end_date","duration_days","total_story_points","estimated_hours","team_capacity_hours","capacity_utilization","task_count","epic_coverage","key_deliverables","demo_objectives","success_criteria","risk_factors","mitigation_strategies","dependencies_resolved","team_members","external_dependencies","integration_windows","review_schedule","retrospective_date","burndown_target"
"1","Sprint 1: Foundation & Core Security","Establish core architecture, security foundation, and user management.","2024-10-28","2024-11-08","10","23","102.1","120","85%","14","Core Architecture & Communications,User Authentication & Authorization,System Administration","Functional Windows Service Host; Database schema for users/roles; Secure login screen; User creation capability for Admins.","Show an Admin logging in. Navigate to the User Management screen. Create a new Technician user.","Admin can successfully log in and create a new user account which is persisted to the database.","Database connectivity issues; Complexity in setting up initial auth flow.","Use Testcontainers for DB integration testing; Follow security best practices for auth implementation.","true","lead.dev@company.com,backend.dev@company.com,frontend.dev@company.com,qa.engineer@company.com","Development PostgreSQL instance.","End-to-end login flow testing on day 8-9.","Sprint review on 2024-11-08 at 2 PM","2024-11-08","Linear burndown with 50% completion by day 5."
"2","Sprint 2: IPC & Advanced Security","Implement IPC backbone and comprehensive session security.","2024-11-11","2024-11-22","10","31","93.9","120","78%","12","Core Architecture & Communications,User Authentication & Authorization","Reliable RabbitMQ and Named Pipe communication layers; Role-based access control; Automatic session locking and unlocking.","Log in as Technician and show Admin areas are hidden. Trigger automatic session lock after inactivity. Unlock the session with the correct password.","All IPC channels are tested and reliable. Role-based restrictions are enforced. Session lock/unlock flow is fully functional and compliant.","Complexity of global input monitoring (P/Invoke); Ensuring reliable messaging and connection resilience for RabbitMQ.","Thorough testing of P/Invoke code; Use Testcontainers for RabbitMQ integration tests.","true","lead.dev@company.com,backend.dev@company.com,frontend.dev@company.com,qa.engineer@company.com","Development RabbitMQ instance.","Integration of IPC with client/service on day 7-8.","Sprint review on 2024-11-22 at 2 PM","2024-11-22","Linear burndown with 50% completion by day 5."
"3","Sprint 3: Viewer Rendering POC","De-risk project by proving viability of GPU-accelerated DICOM rendering via a POC.","2024-11-25","2024-12-06","10","18","35.6","120","30%","2","DICOM Viewer & Manipulation","Functional proof-of-concept for DirectX rendering; Performance benchmark report; Go/No-Go decision for the rendering approach.","Demonstrate the POC rendering a large DICOM image. Show interactive window/level adjustment powered by the GPU.","POC is stable, performant, and a clear technical path for the full implementation is established. RISK-001 is retired or its mitigation plan is updated.","RISK-001: High technical complexity of DirectX interop. POC may fail, forcing a pivot.","This entire sprint is a mitigation strategy. The low story point count provides buffer for the high-risk, high-complexity research task.","true","lead.dev@company.com","None","N/A - Standalone POC.","Sprint review on 2024-12-06 at 2 PM","2024-12-06","Completion of fo-dicom wrapper by day 3, remainder of sprint on POC."
"4","Sprint 4: Viewer Implementation & Tools","Deliver functional, high-performance DICOM viewer with progressive loading and manipulation tools.","2024-12-09","2024-12-20","10","42","91.7","120","76%","6","DICOM Viewer & Manipulation","A reusable `DicomViewerControl`; Progressive image loading; Functional tools for WW/WL, Zoom, Pan, Rotate, and Flip.","Open a large study, showing the fast preview load. Use all manipulation tools on the image to demonstrate interactivity and performance.","Viewer can display images without memory leaks. All manipulation tools are functional and meet performance targets. Progressive loading works as specified.","Integrating the POC into the main application architecture may reveal new challenges. Performance issues on lower-end hardware.","Pair programming on the rendering pipeline integration. Performance testing on minimum-spec hardware.","true","lead.dev@company.com,frontend.dev@company.com,qa.engineer@company.com","None","Continuous integration and testing throughout the sprint.","Sprint review on 2024-12-20 at 2 PM","2024-12-20","Linear burndown with 50% completion by day 5."
"5","Sprint 5: Data Ingestion & System Monitoring","Enable clinical workflow integration and enhance system manageability.","2025-01-02","2025-01-10","7","35","91","100","91%","8","DICOM Network Communications,System Administration","Functional DICOM C-STORE SCP; End-to-end data ingestion pipeline; Real-time System Health Dashboard.","Use a DICOM simulator to send a study and show it appearing in the application. Demonstrate the Health Dashboard, then stop RabbitMQ to show the status changing to red in real-time.","System can reliably receive and ingest DICOM studies. Health dashboard accurately reflects the real-time status of all components.","RISK-004: Data inconsistency between file system and DB if ingestion fails. Complexity of E2E testing for the C-STORE pipeline.","Implement robust DLQ monitoring and alerts. Invest heavily in the comprehensive E2E integration test (TASK-NET-004).","true","backend.dev@company.com,frontend.dev@company.com,qa.engineer@company.com","DICOM test SCU tool, Docker for Testcontainers.","E2E testing of C-STORE on day 5-6; Dashboard UI integration on day 6-7.","Sprint review on 2025-01-10 at 2 PM","2025-01-10","Linear burndown with 50% completion by day 4."