"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-ARC-001","Scaffold Solution and Projects","Create the Visual Studio solution `DicomApp.sln` and all required projects (`Core`, `Application`, `Infrastructure`, `Client.Wpf`, `Service.WindowsService`) targeting .NET 8. Configure project references and establish initial `.editorconfig` and `.gitignore` files.","Task","Sprint Backlog","Critical","lead.dev@company.com","product.owner@company.com","2024-11-08","6","2","architecture,setup,backend","Sprint 1","Establish core architecture, security foundation, and user management.","Core Architecture & Communications","EPIC-001","DICOM Management & Printing System","STORY-ARCH-001","",".NET 8,Visual Studio","Low","Low","Solution successfully builds with zero errors. Project dependencies are correctly configured as per Clean Architecture. WPF project launches a blank window. Service project can be built as a console application.","Code reviewed; Initial commit pushed to repository; CI pipeline builds successfully.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","CI build validation.","Foundation for all other development.","Reduces development friction and ensures maintainability by establishing correct architectural patterns from the project's inception."
"TASK-ARC-002","Implement Generic Host for Windows Service","Configure the `Service.WindowsService` project to use `Microsoft.Extensions.Hosting` and `Microsoft.Extensions.Hosting.WindowsServices`. Implement boilerplate for dependency injection, configuration, logging, and graceful startup/shutdown.","Task","Sprint Backlog","Critical","backend.dev@company.com","product.owner@company.com","2024-11-08","8.3","3","architecture,backend,windows-service","Sprint 1","Establish core architecture, security foundation, and user management.","Core Architecture & Communications","EPIC-001","DICOM Management & Printing System","STORY-ARCH-001","TASK-ARC-001",".NET 8,Windows Services","Medium","Low","The service can be installed using `sc.exe create`. The service starts and stops correctly via `services.msc`. Startup and shutdown events are written to a configured log sink.","Code reviewed; Unit tests passing; Service can be installed and run locally.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Manual installation and start/stop of the service.","Requires admin privileges on development machine to install.","Creates the long-running background process host for all asynchronous tasks."
"TASK-ARC-003","Write Integration Test for Windows Service Host","Create an integration test that builds the service host in-memory, verifies that DI services are correctly registered, and checks that hosted services can be started and stopped programmatically.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-11-08","6.2","2","testing,qa,architecture","Sprint 1","Establish core architecture, security foundation, and user management.","Core Architecture & Communications","EPIC-001","DICOM Management & Printing System","STORY-ARCH-001","TASK-ARC-002","xUnit,.NET Testing","Medium","Low","Test successfully builds the host. Test can resolve a mock service from the DI container. Test confirms that `IHostedService.StartAsync` and `StopAsync` are called on a test service.","Test reviewed; All assertions passing; Integrated into CI pipeline.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","backend.dev@company.com","None","Integration test suite for the service host.","Provides regression testing for the core service startup logic.","Ensures the stability and correctness of the service hosting foundation."
"TASK-SEC-001","Design & Model User, Role, PasswordHistory Entities","Define C# entity classes for User, Role, and PasswordHistory in the Core project. Annotate with EF Core attributes/fluent API for primary keys, foreign keys, relationships, and a unique index on the User's username.","Task","Sprint Backlog","Critical","backend.dev@company.com","product.owner@company.com","2024-11-08","3","1","database,security,architecture","Sprint 1","Establish core architecture, security foundation, and user management.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-ARC-001","EF Core,C#","Low","Low","Entity classes are defined with all required fields. Relationships between User-Role and User-PasswordHistory are correctly configured for EF Core. Username property is marked for a unique database constraint.","Code reviewed; Models are complete and ready for DbContext integration.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Code review.","Defines the database schema for all user and security data.","Models the data structures required for secure user authentication and authorization."
"TASK-SEC-002","Implement DbContext and Initial DB Migration","Configure the EF Core `DbContext` with `DbSet` properties for the security entities. Seed the 'Technician' and 'Administrator' roles. Generate the initial database migration and verify the generated SQL.","Task","Sprint Backlog","Critical","backend.dev@company.com","product.owner@company.com","2024-11-08","6","2","database,security,ef-core","Sprint 1","Establish core architecture, security foundation, and user management.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-SEC-001","EF Core,PostgreSQL","Medium","Low","The DbContext is correctly configured. A migration file is generated without errors. The migration includes logic to seed the two required roles.","Code reviewed; Migration successfully applies to a local PostgreSQL instance.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","PostgreSQL server instance","Integration test successfully applies the migration to a test database.","Creates the initial version of the application database.","Establishes the physical database schema, making user data persistence possible."
"TASK-SEC-003","Implement BCrypt Password Hashing Service","Create a service that wraps a vetted BCrypt library (e.g., BCrypt.Net-Next). The service will expose `HashPassword` and `VerifyPassword` methods and be registered for dependency injection.","Task","Sprint Backlog","Critical","backend.dev@company.com","product.owner@company.com","2024-11-08","5.2","2","security,backend,hipaa","Sprint 1","Establish core architecture, security foundation, and user management.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","","C#,Security,xUnit","Medium","Medium","The service correctly hashes a plaintext password. The service correctly returns true when verifying a valid password against its hash. Unit tests achieve >90% coverage.","Code reviewed; Unit tests passing; Security best practices for the library are followed.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Unit tests covering hashing and verification of valid/invalid passwords.","Critical security component for HIPAA compliance.","Implements secure, one-way password storage, a fundamental security requirement."
"TASK-SEC-004","Create WPF Login Screen View & ViewModel","Using WPF with MaterialDesignInXamlToolkit, build the login screen UI. Implement the `LoginViewModel` to handle data binding for username/password, a login `ICommand`, and properties for displaying error messages.","Task","Sprint Backlog","Critical","frontend.dev@company.com","product.owner@company.com","2024-11-08","8","3","frontend,wpf,ui,security","Sprint 1","Establish core architecture, security foundation, and user management.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-ARC-001","WPF,XAML,MVVM","Medium","Low","UI contains fields for username and password (masked), a login button, and an error message area. The Login button's command is wired to the ViewModel. The application launches to this screen by default.","UI/UX reviewed and approved; ViewModel unit tests passing; All UI elements are data-bound.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","UI review and unit tests for the ViewModel.","This is the entry point for all users of the application.","Provides the user interface for the mandatory authentication process."
"TASK-SEC-005","Implement Core Authentication Service Logic","Create an `AuthenticationService` that uses the `DbContext` and `IPasswordHasher`. It will have a `LoginAsync(username, password)` method that finds the user, verifies the password, checks if the account is active, and returns a user session object.","Task","Sprint Backlog","Critical","backend.dev@company.com","product.owner@company.com","2024-11-08","8.3","3","backend,security,business-logic","Sprint 1","Establish core architecture, security foundation, and user management.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-SEC-002,TASK-SEC-003","C#,EF Core","Medium","Medium","Service successfully authenticates a user with valid credentials. Service rejects logins for users not found, incorrect password, or disabled accounts. Login failures are logged for security auditing.","Code reviewed; Integration tests passing; All authentication scenarios are covered.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Integration tests covering all success and failure login paths.","The central logic for all user authentication.","Implements the core business logic for verifying user credentials against the database."
"TASK-SEC-006","Write Integration Tests for Authentication Flow","Using a test database, write integration tests for the `AuthenticationService`. Cover all scenarios: successful login for Admin/Technician, failed login (bad password, user not found), and login attempt with a disabled account.","Task","Sprint Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-11-08","12","5","testing,qa,security","Sprint 1","Establish core architecture, security foundation, and user management.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-SEC-005","xUnit,EF Core,Testcontainers","High","Low","Tests pass for all defined success and failure scenarios. Test setup includes creating test users with different roles and statuses. The test database is seeded before each test run.","Tests reviewed; All tests passing in CI pipeline; Test coverage meets project standards.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","backend.dev@company.com","Docker for Testcontainers","Comprehensive integration test suite for the authentication service.","Critical for ensuring the security and correctness of the login process.","Validates that the authentication system is secure and functions as specified under all conditions."
"TASK-SEC-007","Integrate Authentication Service with Login ViewModel","Wire up the `LoginViewModel` to the `IAuthenticationService` via DI. The login command will call the service, handle success by navigating to the main application window, and handle exceptions by displaying a generic 'Invalid username or password' message.","Task","Sprint Backlog","Critical","frontend.dev@company.com","product.owner@company.com","2024-11-08","6","2","frontend,wpf,integration","Sprint 1","Establish core architecture, security foundation, and user management.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-SEC-004,TASK-SEC-005","WPF,MVVM,C#","Medium","Low","Successful login closes the login window and opens the main window. Failed login shows the correct error message in the UI. The ViewModel establishes a client-side session/principal upon successful login.","Code reviewed; E2E manual test passes for login success and failure.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","backend.dev@company.com","None","Manual E2E testing of the login process.","Connects the user interface to the backend authentication logic.","Makes the login screen functional, allowing users to enter the application."
"TASK-ADM-001","Develop User Management Dashboard View and ViewModel","Create the main UI for the User Management section. This will display a list of users in a DataGrid and include buttons for 'Add', 'Edit', and 'Delete'. The ViewModel will be responsible for loading the list of users from a new `UserManagementService`.","Task","Sprint Backlog","High","frontend.dev@company.com","product.owner@company.com","2024-11-08","8.3","3","frontend,wpf,admin","Sprint 1","Establish core architecture, security foundation, and user management.","System Administration","EPIC-003","DICOM Management & Printing System","US-006","TASK-SEC-008","WPF,MVVM","Medium","Low","The view is only accessible to users with the 'Administrator' role. A list of all users is displayed with their username and role. Buttons for user management actions are present.","UI/UX reviewed and approved; ViewModel unit tests passing; All UI elements are data-bound.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","UI review and manual testing.","Provides the main interface for all user management tasks.","Enables administrators to view and manage the system's user base."
"TASK-ADM-002","Implement 'Create User' Service Logic","Extend a `UserManagementService` with a `CreateUserAsync` method. This method must validate that the username is unique, generate a secure temporary password, hash it, and save the new user to the database with the `IsTemporaryPassword` flag set to true.","Task","Sprint Backlog","High","backend.dev@company.com","product.owner@company.com","2024-11-08","8.3","3","backend,admin,security","Sprint 1","Establish core architecture, security foundation, and user management.","System Administration","EPIC-003","DICOM Management & Printing System","US-006","TASK-SEC-002,TASK-SEC-003","C#,EF Core","Medium","Medium","Method successfully creates a new user in the database. Method throws a specific exception if the username already exists. The created user has the correct role and the 'force password change' flag is set.","Code reviewed; Integration tests passing; An audit event is logged upon user creation.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Integration tests for user creation success and failure (duplicate user).","Core logic for provisioning new user accounts.","Implements the backend logic for securely adding new users to the system."
"TASK-ADM-003","Develop 'Add User' Dialog and ViewModel","Create a modal dialog for adding a new user. The ViewModel will collect the username and selected role, call the `UserManagementService`, and on success, display a notification to the Admin containing the generated temporary password.","Task","Sprint Backlog","High","frontend.dev@company.com","product.owner@company.com","2024-11-08","7","3","frontend,wpf,admin,ui","Sprint 1","Establish core architecture, security foundation, and user management.","System Administration","EPIC-003","DICOM Management & Printing System","US-006","TASK-ADM-001,TASK-ADM-002","WPF,MVVM","Medium","Low","Dialog allows entry of username and selection of role. Clicking 'Create' calls the service. On success, a success notification with the temporary password is shown.","UI/UX reviewed and approved; ViewModel unit tests passing; E2E manual test successful.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","backend.dev@company.com","None","Manual E2E testing of the feature.","Provides the UI for the 'Add User' workflow.","Allows administrators to interact with the system to provision new users."
"TASK-ADM-004","Integration Test for Create User Workflow","Write an integration test that calls the `UserManagementService.CreateUserAsync` method and then verifies in the database that the user was created correctly with a valid password hash and the correct flags set. Also test the duplicate username constraint.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-11-08","6","2","testing,qa,admin","Sprint 1","Establish core architecture, security foundation, and user management.","System Administration","EPIC-003","DICOM Management & Printing System","US-006","TASK-ADM-002","xUnit,EF Core,Testcontainers","Medium","Low","Test successfully creates a user and validates DB state. Test asserts that an exception is thrown when creating a user with a duplicate username. Test verifies an audit log entry was created for the action.","Tests reviewed; All tests passing in CI pipeline.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","backend.dev@company.com","Docker for Testcontainers","Integration test suite for the create user service logic.","Ensures the reliability and correctness of user creation.","Validates that the user creation process is robust and handles error conditions correctly."
"TASK-IPC-001","Design & Implement RabbitMQ Abstraction Service","Create a generic wrapper service in the `Infrastructure` project for RabbitMQ. This service will manage a singleton connection, handle channel creation, serialization/deserialization of messages, and provide simple `PublishAsync` and `Subscribe` methods.","Task","Sprint Backlog","Critical","backend.dev@company.com","product.owner@company.com","2024-11-22","12","5","architecture,integration,rabbitmq","Sprint 2","Implement IPC backbone and comprehensive session security.","Core Architecture & Communications","EPIC-001","DICOM Management & Printing System","STORY-ARCH-002","TASK-ARC-001",".NET 8,RabbitMQ","High","Medium","Service manages a single, resilient connection to the RabbitMQ broker. A simple string message can be published and consumed successfully. The service automatically attempts to reconnect if the broker connection is lost.","Code reviewed; Integration tests passing; Service is registered for DI.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","RabbitMQ server instance","Integration tests.","Core component for all asynchronous communication.","Provides a reliable, abstracted messaging layer for decoupling long-running tasks from the UI."
"TASK-IPC-002","Write Integration Tests for RabbitMQ Service","Using Testcontainers, create integration tests that spin up a RabbitMQ container. Tests should cover publishing, consuming, connection loss/recovery, and serialization of complex objects.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-11-22","10","5","testing,qa,rabbitmq,integration","Sprint 2","Implement IPC backbone and comprehensive session security.","Core Architecture & Communications","EPIC-001","DICOM Management & Printing System","STORY-ARCH-002","TASK-IPC-001","xUnit,Testcontainers,Docker","High","Medium","Test successfully publishes a message and a separate consumer receives it. Test validates that the service recovers after the container is temporarily stopped and restarted. Test confirms that a C# object is correctly serialized and deserialized.","Tests reviewed; All tests passing in CI pipeline.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","backend.dev@company.com","Docker for Testcontainers","Comprehensive integration test suite for RabbitMQ service.","Ensures the messaging system is reliable and resilient.","Guarantees the correctness and robustness of the core asynchronous communication channel."
"TASK-IPC-003","Implement Durable Queues, Persistent Messages, and DLQ","Extend the RabbitMQ service to configure queues as durable and messages as persistent. Implement the Dead-Letter Queue (DLQ) mechanism by configuring `x-dead-letter-exchange` on main queues.","Task","Sprint Backlog","Critical","backend.dev@company.com","product.owner@company.com","2024-11-22","8.3","3","rabbitmq,architecture,reliability","Sprint 2","Implement IPC backbone and comprehensive session security.","Core Architecture & Communications","EPIC-001","DICOM Management & Printing System","STORY-ARCH-002","TASK-IPC-001",".NET 8,RabbitMQ","Medium","Medium","Queue and exchange declaration logic includes arguments for durability and DLX routing. Messages published for critical tasks are marked as persistent. A consumer that NACKs a message causes it to be routed to the DLQ.","Code reviewed; Integration test for DLQ functionality passes.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Integration test that validates message routing to the DLQ upon failure.","Critical for ensuring message durability and data integrity.","Prevents loss of critical tasks (e.g., print jobs, database writes) in the event of a service restart."
"TASK-IPC-004","Implement Named Pipe Server in Windows Service","Create a service (`IHostedService`) within the Windows Service that hosts a `NamedPipeServerStream`. It must listen for client connections and handle a simple 'PING' request, replying with 'PONG' to indicate health.","Task","Sprint Backlog","High","backend.dev@company.com","product.owner@company.com","2024-11-22","8.7","3","ipc,backend,architecture","Sprint 2","Implement IPC backbone and comprehensive session security.","Core Architecture & Communications","EPIC-001","DICOM Management & Printing System","STORY-ARCH-002","TASK-ARC-002",".NET 8,Named Pipes","Medium","Medium","The service starts a Named Pipe server on a well-known pipe name. It responds to a 'PING' message with a 'PONG' message. The server is robust against client disconnects.","Code reviewed; Ready for client integration.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","frontend.dev@company.com","None","Integration with the client part.","Enables synchronous status checks from the client.","Provides a low-latency mechanism for the client to verify the health of the background service in real-time."
"TASK-IPC-005","Implement Named Pipe Client in WPF App","Create a client service in the WPF application that can connect to the `NamedPipeClientStream`. It must implement a method like `CheckServiceStatusAsync` which sends 'PING', awaits 'PONG', and handles timeouts gracefully.","Task","Sprint Backlog","High","frontend.dev@company.com","product.owner@company.com","2024-11-22","6","2","ipc,frontend,wpf","Sprint 2","Implement IPC backbone and comprehensive session security.","Core Architecture & Communications","EPIC-001","DICOM Management & Printing System","STORY-ARCH-002","TASK-IPC-004",".NET 8,WPF,Named Pipes","Medium","Low","The client can connect to the server pipe. It correctly sends 'PING' and receives 'PONG'. The method returns `true` on success and `false` on failure or timeout. The UI thread is never blocked.","Code reviewed; Integration test passes.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","backend.dev@company.com","None","Integration test.","Allows the UI to dynamically enable/disable features based on service availability.","Enables the client application to provide immediate feedback to the user about the system's status."
"TASK-IPC-006","Write Integration Test for Named Pipe Communication","Create an integration test that programmatically starts the service host (containing the pipe server) and then uses the pipe client to connect and verify the PING/PONG protocol.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-11-22","7.2","3","testing,qa,ipc","Sprint 2","Implement IPC backbone and comprehensive session security.","Core Architecture & Communications","EPIC-001","DICOM Management & Printing System","STORY-ARCH-002","TASK-IPC-004,TASK-IPC-005","xUnit,.NET Testing","Medium","Low","Test passes when server is running and client communicates successfully. Test passes when verifying the client returns `false` if the server is not started. Test confirms the client's timeout functionality.","Tests reviewed; All tests passing in CI pipeline.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","frontend.dev@company.com,backend.dev@company.com","None","Integration test suite for the full client-server pipe communication.","Ensures the synchronous communication channel is reliable.","Validates the correctness and robustness of the service health check mechanism."
"TASK-SEC-008","Implement Authorization Service and UI Logic","Create a client-side authorization service that holds the current user's role. Implement logic in ViewModels to expose properties like `IsAdmin`. Bind UI element visibility (e.g., 'Administration' tab) to these properties.","Task","Sprint Backlog","Critical","frontend.dev@company.com","product.owner@company.com","2024-11-22","9.2","3","security,frontend,wpf,authorization","Sprint 2","Implement IPC backbone and comprehensive session security.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-002","TASK-SEC-007","WPF,MVVM,C#","Medium","Medium","UI elements bound to `IsAdmin` are hidden for Technician users and visible for Administrator users. Backend application services are decorated with attributes or checks to reject unauthorized calls.","Code reviewed; E2E manual test with both Admin and Technician roles passes.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Manual E2E testing with both Admin and Technician roles.","Implements the principle of least privilege in the application.","Enforces security by ensuring users can only see and access features appropriate for their role."
"TASK-SEC-009","Implement Global User Activity Monitor","Create a service that uses a low-level system hook (via P/Invoke) to monitor global mouse and keyboard activity. This service will expose an event that fires whenever user activity is detected.","Task","Sprint Backlog","High","frontend.dev@company.com","product.owner@company.com","2024-11-22","10.3","5","security,frontend,wpf,hipaa","Sprint 2","Implement IPC backbone and comprehensive session security.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-003","","C#,P/Invoke,Win32 API","High","Medium","The service correctly detects mouse moves, clicks, and key presses. The service has a negligible performance impact on the application. The service is properly disposed of when the application exits.","Code reviewed; Performance profiling confirms low overhead; Manual testing confirms activity detection.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Manual testing and performance profiling.","Core component for HIPAA-compliant automatic session locking.","Provides the technical foundation for detecting user inactivity to secure workstations."
"TASK-SEC-010","Implement Session Lock Service and Timer","Create a session management service that subscribes to the activity monitor. This service will manage a 15-minute timer that is reset on activity. When the timer elapses, it will trigger an event to lock the application.","Task","Sprint Backlog","High","backend.dev@company.com","product.owner@company.com","2024-11-22","6","2","security,backend,hipaa","Sprint 2","Implement IPC backbone and comprehensive session security.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-003","TASK-SEC-009","C#,.NET Timers","Medium","Low","Timer is correctly reset on activity events. A 'LockSession' event is broadcast after 15 minutes of inactivity. The service is integrated into the application's lifecycle.","Code reviewed; Unit tests passing; Integrated with UI.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","frontend.dev@company.com","None","Unit tests and integration with the UI.","Orchestrates the session lock feature.","Implements the core logic for the automatic session timeout feature."
"TASK-SEC-011","Create Lock Screen View, ViewModel, and Unlock Logic","Develop the modal lock screen UI. The main window's ViewModel will listen for the 'LockSession' event and display this view as a modal overlay. The `LockScreenViewModel` will handle password input and call the `AuthenticationService` to verify it.","Task","Sprint Backlog","High","frontend.dev@company.com","product.owner@company.com","2024-11-22","10.2","5","frontend,wpf,security,ui","Sprint 2","Implement IPC backbone and comprehensive session security.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-004","TASK-SEC-005,TASK-SEC-010","WPF,MVVM,C#","Medium","Low","Lock screen appears modally, covering the entire application. Entering the correct password dismisses the screen. Entering an incorrect password displays an error message. The application state is preserved.","UI/UX reviewed and approved; E2E manual testing of lock/unlock flow is successful.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","backend.dev@company.com","None","Manual E2E testing of the lock/unlock flow.","Final piece of the session locking feature.","Provides the user interface for re-authenticating to an existing session, ensuring a seamless and secure workflow."
"TASK-SEC-012","Implement Failed Unlock Attempt Counter","Add logic to the `LockScreenViewModel` or `SessionLockService` to track consecutive failed unlock attempts. After 5 failures, the user's session should be terminated, and the application should return to the main login screen.","Task","Sprint Backlog","Medium","frontend.dev@company.com","product.owner@company.com","2024-11-22","6","2","security,frontend","Sprint 2","Implement IPC backbone and comprehensive session security.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-004","TASK-SEC-011","C#,MVVM","Medium","Low","The system correctly counts consecutive failed attempts. After the 5th failed attempt, the main login screen is shown. The counter resets upon a successful unlock.","Code reviewed; Manual E2E test passes.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Manual E2E testing.","Enhances security against brute-force attacks on a locked session.","Protects against unauthorized access attempts on a locked workstation."
"TASK-DICOM-001","Integrate fo-dicom and Create Wrapper Service","Add the fo-dicom NuGet package and create a `DicomService`. This service will provide a simplified interface for opening DICOM files, parsing metadata, and accessing pixel data.","Task","Sprint Backlog","Critical","lead.dev@company.com","product.owner@company.com","2024-12-06","10.3","5","dicom,integration,backend","Sprint 3","De-risk project by proving viability of GPU-accelerated DICOM rendering via a POC.","DICOM Viewer & Manipulation","EPIC-004","DICOM Management & Printing System","US-101","TASK-ARC-001","C#,fo-dicom","Medium","Medium","Service can open a DICOM file from a path. Service can extract a DicomDataset. Service can extract image frame pixel data as a byte array. Unit tests with sample DICOM files pass.","Code reviewed; Unit tests passing; Wrapper service provides stable API for viewer development.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Unit tests with sample DICOM files.","Foundation for all DICOM-related functionality in the application.","Abstracts the complexity of the DICOM library, enabling faster development of features that consume DICOM data."
"TASK-DICOM-002","Technical Spike: WPF/DirectX Rendering POC","Conduct a time-boxed proof-of-concept to validate the GPU-accelerated rendering approach using `Vortice.Windows`. The goal is to render a single DICOM image and benchmark its performance for window/level operations.","Task","Sprint Backlog","Critical","lead.dev@company.com","product.owner@company.com","2024-12-06","25.3","13","spike,research,risks,gpu,directx","Sprint 3","De-risk project by proving viability of GPU-accelerated DICOM rendering via a POC.","DICOM Viewer & Manipulation","EPIC-004","DICOM Management & Printing System","US-101","TASK-DICOM-001","WPF,DirectX,HLSL,C#","Critical","High","A custom WPF control can render a texture created with DirectX 11. The POC demonstrates interactive window/level adjustment processed by a shader. A performance report is produced comparing the POC to a baseline `WriteableBitmap` implementation.","POC demonstrated to the team; A written report with a go/no-go recommendation is delivered.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Demonstration and performance benchmarking.","Addresses RISK-001. The outcome determines the technical direction for the entire viewer.","Mitigates a major technical risk, ensuring the core feature of the application is built on a viable and performant foundation."
"TASK-DICOM-003","Implement Core GPU Rendering Pipeline","Based on the successful POC, integrate the DirectX rendering engine into a reusable `DicomViewerControl`. This involves managing the D3D device, creating textures from DICOM pixel data, and managing shader resources.","Task","Sprint Backlog","Critical","lead.dev@company.com","product.owner@company.com","2024-12-20","40.7","21","gpu,directx,frontend,viewer","Sprint 4","Deliver functional, high-performance DICOM viewer with progressive loading and manipulation tools.","DICOM Viewer & Manipulation","EPIC-004","DICOM Management & Printing System","US-101","TASK-DICOM-002","WPF,DirectX,HLSL,C#","Critical","High","The `DicomViewerControl` can display a DICOM image. The control correctly handles its resources with no memory leaks. The rendering is performant and meets the benchmarks from the POC.","Code reviewed; Performance profiling completed; DicomViewerControl is reusable and stable.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Code review, performance profiling, and manual testing.","This is the core component of the DICOM viewer.","Implements the high-performance rendering engine that is the foundation of the user's primary interaction with medical images."
"TASK-DICOM-004","Implement Progressive Image Loading Strategy","Modify the viewer's data loading logic to first display a low-resolution preview, then load the full-resolution data in the background.","Task","Sprint Backlog","High","frontend.dev@company.com","product.owner@company.com","2024-12-20","16.7","8","performance,frontend,viewer","Sprint 4","Deliver functional, high-performance DICOM viewer with progressive loading and manipulation tools.","DICOM Viewer & Manipulation","EPIC-004","DICOM Management & Printing System","US-101","TASK-DICOM-003","C#,async/await,WPF","High","Medium","Opening a 500MB study shows a preview image in under 1 second. The UI remains fully responsive while the full-resolution data loads. The full-resolution image replaces the preview without visual glitches.","Code reviewed; Performance validated with large studies.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Manual testing with large DICOM studies and a stopwatch.","Critical for good user experience when handling large datasets.","Dramatically improves the perceived performance of the application, allowing users to begin work immediately."
"TASK-DICOM-005","Implement Interactive Window/Level Tool","Develop logic to capture mouse drag events over the viewer. Translate mouse movement into changes in window width/level values and pass them to the GPU shader in real-time.","Task","Sprint Backlog","Critical","frontend.dev@company.com","product.owner@company.com","2024-12-20","8.3","3","viewer,frontend,interaction","Sprint 4","Deliver functional, high-performance DICOM viewer with progressive loading and manipulation tools.","DICOM Viewer & Manipulation","EPIC-004","DICOM Management & Printing System","US-102","TASK-DICOM-003","WPF,C#","Medium","Low","Dragging the mouse horizontally adjusts window width. Dragging the mouse vertically adjusts window level. The image updates smoothly and interactively during the drag operation.","Code reviewed; Manual test passes.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Manual testing.","One of the most frequently used diagnostic tools.","Provides a fundamental tool for optimizing image contrast for clinical review."
"TASK-DICOM-006","Implement Zoom and Pan Tools","Implement mouse and keyboard controls for zooming (mouse wheel) and panning (mouse drag). Translate these actions into a 2D transformation matrix passed to the rendering pipeline.","Task","Sprint Backlog","Critical","frontend.dev@company.com","product.owner@company.com","2024-12-20","12","5","viewer,frontend,interaction","Sprint 4","Deliver functional, high-performance DICOM viewer with progressive loading and manipulation tools.","DICOM Viewer & Manipulation","EPIC-004","DICOM Management & Printing System","US-102","TASK-DICOM-003","WPF,C#,Linear Algebra (Matrices)","Medium","Low","Mouse wheel zooms in/out, centered on the cursor position. Clicking and dragging with a specific tool/modifier key pans the image. The operations are smooth and performant.","Code reviewed; Manual test passes.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Manual testing.","","Allows users to inspect images at different magnification levels and navigate them efficiently."
"TASK-DICOM-007","Implement Rotate and Flip Tools","Add UI buttons to perform 90-degree rotations and horizontal/vertical flips by modifying the transformation matrix passed to the rendering pipeline.","Task","Sprint Backlog","High","frontend.dev@company.com","product.owner@company.com","2024-12-20","6","2","viewer,frontend,interaction","Sprint 4","Deliver functional, high-performance DICOM viewer with progressive loading and manipulation tools.","DICOM Viewer & Manipulation","EPIC-004","DICOM Management & Printing System","US-102","TASK-DICOM-006","WPF,C#","Low","Low","A 'Rotate Right' button rotates the image 90 degrees clockwise. A 'Flip Horizontal' button mirrors the image. Multiple transformations can be combined.","Code reviewed; Manual test passes.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Manual testing.","","Provides basic tools for correcting image orientation for proper viewing."
"TASK-DICOM-008","Develop Tool State Management System","Implement a system in the viewer's ViewModel to manage the currently active mouse tool (e.g., 'Pan', 'Zoom', 'WindowLevel'). The viewer control will observe this state and change its mouse handling logic accordingly.","Task","Sprint Backlog","High","frontend.dev@company.com","product.owner@company.com","2024-12-20","8","3","viewer,frontend,architecture","Sprint 4","Deliver functional, high-performance DICOM viewer with progressive loading and manipulation tools.","DICOM Viewer & Manipulation","EPIC-004","DICOM Management & Printing System","US-102","TASK-DICOM-005,TASK-DICOM-006","WPF,MVVM,C#","Medium","Low","Clicking a tool button in the UI sets the active tool state in the ViewModel. The viewer control correctly changes its behavior based on the active tool. The UI provides clear feedback on which tool is currently active.","Code reviewed; Manual test passes.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Manual testing.","Key for orchestrating different user interactions within the same control.","Provides an extensible framework for adding new interactive tools to the viewer in the future."
"TASK-NET-001","Implement C-STORE SCP Listener Hosted Service","Using `fo-dicom`, implement an `IHostedService` in the Windows Service that creates and runs a `DicomServer`. Configure it to listen on a specific port and AE Title. Implement `IDicomCStoreProvider` to handle incoming requests.","Task","Sprint Backlog","Critical","backend.dev@company.com","product.owner@company.com","2025-01-10","14.3","8","dicom,network,backend,integration","Sprint 5","Enable clinical workflow integration and enhance system manageability.","DICOM Network Communications","EPIC-005","DICOM Management & Printing System","US-103","TASK-ARC-002","C#,fo-dicom,.NET Hosted Services","High","High","The service starts a DICOM listener on the configured port. The listener successfully accepts an association from a test SCU. Incoming DICOM files are saved to a temporary staging directory.","Code reviewed; Integration test with a DICOM SCU simulator passes.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-02","2025-01-10","100%","None","DICOM test SCU tool","Integration test with a DICOM SCU simulator.","Requires firewall rules to be configured on deployment environment.","Enables the primary method of data acquisition in a clinical environment."
"TASK-NET-002","Decouple SCP from DB via RabbitMQ Publisher","Modify the `CStoreProvider` to publish a `DicomStudyReceived` message to RabbitMQ upon successful receipt of a study, instead of writing to the database directly. This ensures the SCP can respond quickly.","Task","Sprint Backlog","Critical","backend.dev@company.com","product.owner@company.com","2025-01-10","8.3","3","dicom,rabbitmq,architecture","Sprint 5","Enable clinical workflow integration and enhance system manageability.","DICOM Network Communications","EPIC-005","DICOM Management & Printing System","US-103","TASK-NET-001,TASK-IPC-003","C#,fo-dicom,RabbitMQ","Medium","Medium","A successful C-STORE operation results in a single message being published to RabbitMQ. The DICOM success response is sent to the SCU before the message is processed by a consumer. The message is published to a durable queue.","Code reviewed; Integration test verifies a message appears in RabbitMQ after a C-STORE operation.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-02","2025-01-10","100%","None","None","Integration test that verifies a message appears in RabbitMQ.","Addresses RISK-004 by design; requires robust consumer and DLQ monitoring.","Improves the performance and reliability of DICOM study ingestion, allowing the system to handle high-volume traffic."
"TASK-NET-003","Implement RabbitMQ Consumer for DICOM Ingestion","Create a new `IHostedService` that consumes from the DICOM ingestion queue, processes the metadata, performs database insertions, and moves files to permanent storage.","Task","Sprint Backlog","Critical","backend.dev@company.com","product.owner@company.com","2025-01-10","16.7","8","backend,rabbitmq,dicom,database","Sprint 5","Enable clinical workflow integration and enhance system manageability.","DICOM Network Communications","EPIC-005","DICOM Management & Printing System","US-103","TASK-NET-002","C#,RabbitMQ,EF Core,File I/O","High","High","The consumer processes messages from the queue. Metadata is persisted to the database. DICOM files are moved to permanent storage. The entire operation is transactional; failure causes the message to be NACK'd.","Code reviewed; Integration tests passing; Consumer is idempotent.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-02","2025-01-10","100%","None","None","Integration tests.","The core data persistence logic for incoming studies.","Completes the automated data ingestion pipeline, making studies available for users."
"TASK-NET-004","Integration Test for End-to-End C-STORE Flow","Create a comprehensive integration test that uses a DICOM SCU simulator to send a study, verifies the message in RabbitMQ, runs the consumer logic, and asserts the correct data in the database and files on disk.","Task","Sprint Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2025-01-10","16.7","8","testing,qa,e2e,dicom","Sprint 5","Enable clinical workflow integration and enhance system manageability.","DICOM Network Communications","EPIC-005","DICOM Management & Printing System","US-103","TASK-NET-003","xUnit,Testcontainers,Shell scripting","Critical","Medium","The test successfully validates the entire data flow from network receipt to database persistence. The test cleans up all created files and database records. The test covers a failure scenario, ensuring a message is routed to the DLQ.","Tests reviewed; All tests passing in CI pipeline.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-02","2025-01-10","100%","backend.dev@company.com","Docker for Testcontainers","End-to-end test suite for the C-STORE ingestion pipeline.","Provides the highest level of confidence in the data ingestion pipeline.","Ensures the most critical data pipeline in the system is reliable, robust, and correct."
"TASK-ADM-005","Implement Health Check Probes in Windows Service","Create individual health check classes for dependencies (PostgreSQL, RabbitMQ, Disk Space). The checks will perform simple, non-intrusive validation of each service's status.","Task","Sprint Backlog","Medium","backend.dev@company.com","product.owner@company.com","2025-01-10","8","3","admin,monitoring,backend","Sprint 5","Enable clinical workflow integration and enhance system manageability.","System Administration","EPIC-003","DICOM Management & Printing System","US-104","TASK-IPC-001","C#,PostgreSQL,RabbitMQ","Medium","Low","Each probe can be executed independently and returns a status (Healthy, Unhealthy). Probes handle exceptions gracefully and report as Unhealthy.","Code reviewed; Unit tests for each probe are passing.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-02","2025-01-10","100%","None","None","Unit tests for each probe.","Provides the raw data for the health dashboard.","Creates reusable components for monitoring the health of critical system dependencies."
"TASK-ADM-006","Implement Health Check Hosted Service and Cache","Create an `IHostedService` that runs a periodic timer. On each tick, it executes all health check probes and stores the aggregated results in a thread-safe, in-memory singleton cache service.","Task","Sprint Backlog","Medium","backend.dev@company.com","product.owner@company.com","2025-01-10","9","3","admin,monitoring,backend","Sprint 5","Enable clinical workflow integration and enhance system manageability.","System Administration","EPIC-003","DICOM Management & Printing System","US-104","TASK-ADM-005","C#,.NET Hosted Services","Medium","Low","The service executes checks on the configured interval. The results are stored in a cache that can be accessed by other services.","Code reviewed; Integration test verifies the cache is updated.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-02","2025-01-10","100%","None","None","Integration test that verifies the cache is updated.","The engine for the real-time monitoring feature.","Provides the background process that continuously gathers system health information."
"TASK-ADM-007","Expose Health Status via Named Pipe","Extend the Named Pipe server to handle a new request, 'GET_HEALTH'. When this request is received, it should read the latest status from the `HealthStatusCache` and serialize it as a JSON string in the response.","Task","Sprint Backlog","Medium","backend.dev@company.com","product.owner@company.com","2025-01-10","6","2","admin,monitoring,ipc","Sprint 5","Enable clinical workflow integration and enhance system manageability.","System Administration","EPIC-003","DICOM Management & Printing System","US-104","TASK-IPC-004,TASK-ADM-006","C#,Named Pipes","Medium","Low","Named Pipe server responds to 'GET_HEALTH' requests. The response is a JSON string containing the status of all monitored components. The existing 'PING' functionality is unaffected.","Code reviewed; Ready for client integration.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-02","2025-01-10","100%","frontend.dev@company.com","None","Integration with the client.","Connects the backend health data to the frontend UI.","Enables the client application to query for real-time system health data."
"TASK-ADM-008","Develop System Health Dashboard UI","Create the WPF View and ViewModel for the health dashboard. The ViewModel will use the Named Pipe client to periodically request the health status from the service and update UI properties bound to status indicators.","Task","Sprint Backlog","Medium","frontend.dev@company.com","product.owner@company.com","2025-01-10","12","5","admin,monitoring,frontend,ui","Sprint 5","Enable clinical workflow integration and enhance system manageability.","System Administration","EPIC-003","DICOM Management & Printing System","US-104","TASK-IPC-005,TASK-ADM-007","WPF,MVVM","Medium","Low","The dashboard is accessible to Admins. It displays status indicators for Service, PostgreSQL, RabbitMQ, Queues, and Disk Space. The status is updated periodically. UI clearly indicates Healthy, Unhealthy, or Degraded states.","UI/UX reviewed and approved; E2E manual test with simulated failures is successful.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2025-01-02","2025-01-10","100%","backend.dev@company.com","None","Manual E2E testing with simulated failures (e.g., stopping RabbitMQ).","Provides a 'single pane of glass' for system monitoring.","Delivers a user-friendly interface for administrators to monitor system health, enabling proactive maintenance and faster troubleshooting."