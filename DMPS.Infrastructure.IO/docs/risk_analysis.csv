"risk_id","risk_category","risk_description","probability","impact","risk_score","priority_level","affected_tasks","root_cause","mitigation_strategy","contingency_plan","monitoring_trigger","owner","due_date","status"
"RISK-001","Technical","High risk of implementation delays and performance issues due to the complexity of integrating DirectX rendering into WPF using the `Vortice.Windows` library. This involves low-level graphics programming, shader development (HLSL), and managing the GPU pipeline, which are error-prone and hard to debug.","4","4","16","High","EPIC-005 (DICOM Viewer), especially WI-035 (DirectX Integration) and WI-036 (GPU Texture Pipeline). A failure here jeopardizes the core image viewing functionality.","Reliance on a complex, low-level technology for a critical performance requirement (GPU-accelerated rendering) where the development team may lack deep expertise.","Conduct a time-boxed technical spike (Proof-of-Concept) to validate the rendering approach early in the project. Enforce mandatory peer reviews for all graphics-related code, potentially by an external graphics programming expert. Create a comprehensive test suite with known DICOM images to validate rendering accuracy.","Develop a fallback, slower, software-based rendering path using WPF's built-in capabilities. This would provide basic viewing functionality and de-risk the project timeline, even if it fails to meet the highest performance NFRs for the initial release.","Failure to render a basic DICOM image within the first sprint of viewer development. Performance profiling showing frame rates below 30 FPS during initial tool implementation.","Lead Developer","2025-02-28","Not Started"
"RISK-002","Technical","A flawed implementation of column-level encryption using `pgcrypto` within Entity Framework Core (WI-012) could lead to a critical HIPAA compliance failure, data corruption, or severe performance degradation. Managing the encryption key securely is a major challenge.","3","5","15","High","EPIC-002 (Persistence), WI-012 (Implement pgcrypto). Affects all data access operations involving Protected Health Information (PHI).","The complexity of integrating transparent data encryption at the ORM level and the critical security requirement for managing encryption keys outside of source code or simple configuration files.","Isolate all encryption logic into a dedicated, well-tested component (e.g., EF Core Value Converters). Implement a secure key management strategy using Windows Credential Manager as required by REQ-1-084. Conduct a dedicated security code review for this component.","If transparent encryption proves too complex or performant, pivot to application-level encryption where data is encrypted/decrypted in the service layer before being sent to/retrieved from the database, though this is less ideal. The ultimate fallback is to rely solely on full-disk encryption and enforce it as a deployment prerequisite.","Integration tests show data stored in plaintext in the database. Performance tests show query times for encrypted columns exceeding the acceptable threshold by more than 50%.","Security Lead / Backend Lead","2025-03-15","Not Started"
"RISK-003","Technical","The DICOM standard for Grayscale Softcopy Presentation State (GSPS) is notoriously complex. There is a high risk that the implementation (WI-044) for saving and loading annotations will have compatibility issues with other DICOM systems or fail to correctly represent all annotation types.","4","4","16","High","EPIC-005 (DICOM Viewer), WS-013 (Annotations), WI-044 (Implement DICOM GSPS). A failure makes the entire annotation feature non-compliant and non-interoperable.","Inherent complexity and ambiguity in the DICOM standard itself, combined with the difficulty of mapping application-specific annotation objects to the standard's structure.","Allocate additional time for research and development of the GSPS feature. Procure third-party DICOM validation tools to test generated GSPS objects. Develop a test suite using sample GSPS files from other major viewers (e.g., Horos, OsiriX) to ensure parsing correctness.","For the initial release, save annotations in a proprietary format (e.g., JSON) alongside the study. This ensures annotations are saved, while deferring the complexity of full DICOM GSPS compliance to a subsequent release.","Generated GSPS files fail validation against a third-party tool. Inability to correctly parse a valid GSPS file from a reference DICOM viewer.","DICOM Specialist","2025-05-30","Not Started"
"RISK-004","Timeline","The complexity of several critical-path work items (DirectX rendering, GSPS, MSIX custom installer, Data Migration) is very high. There is a strong likelihood that the initial effort estimation is optimistic, leading to significant project delays.","4","4","16","High","WI-036 (GPU Pipeline), WI-044 (GSPS), WI-065 (Installer Prerequisite Check), WI-068 (Data Migration). Delays in any of these will delay the entire project release.","High degree of technical uncertainty and complexity in multiple core features, making accurate upfront estimation difficult.","Implement a 'Spike and Stabilize' approach: for each high-complexity task, create a short, time-boxed research spike to build a PoC and de-risk the technical approach. Re-estimate the main task based on the spike's findings. Add an explicit management reserve (buffer) to the schedule for these tasks.","Maintain a prioritized feature backlog. If delays occur, be prepared to engage with stakeholders to de-scope or simplify non-essential features (e.g., reduce the number of print layout templates, simplify annotation tools for V1) to meet the deadline.","Any high-complexity task exceeds its initial time estimate by more than 25%. A technical spike fails to produce a viable path forward.","Project Manager","2025-02-15","Not Started"
"RISK-005","Timeline","The standalone data migration utility (WI-068) is a critical component for customer adoption, but its complexity is largely unknown as it depends on the quality and schema of the unspecified 'legacy system'. This could become a major, underestimated effort that delays customer onboarding.","4","4","16","High","EPIC-008, WS-022, WI-068. Failure to deliver a working migration tool could be a deal-breaker for new customers.","Dependency on an external system with unknown data quality, schema, and accessibility, creating high uncertainty for the ETLV process.","Obtain a sample of the legacy data and schema documentation as a top priority. Build the migration utility as a separate, parallel workstream. Design it to be highly configurable and to perform a 'dry run' validation mode before committing any data.","Re-scope the migration utility as a professional services offering rather than a bundled tool. This allows the core product to launch while the migration for specific customers is handled as a separate project.","Inability to obtain a legacy data sample within the first month of the project. Initial analysis of the legacy data reveals significant data quality or mapping problems.","Data Migration Lead","2025-03-01","Not Started"
"RISK-006","Quality","The requirement to redact all Protected Health Information (PHI) from logs is a critical HIPAA control. A bug in the custom Serilog redaction logic could lead to a massive data breach and compliance failure, resulting in severe legal and financial penalties.","3","5","15","High","Cross-Cutting Concern: Monitoring. Affects the entire system as logging is ubiquitous.","Reliance on a single, custom-built component to enforce a critical security control across all system logging.","Implement the redaction logic as a single, isolated Serilog enricher. Create an extensive suite of unit tests for this component, covering numerous formats of PHI. Conduct a mandatory, focused security code review on the redaction logic before merging.","If a flaw is discovered post-release, have a documented procedure to remotely configure logging levels to 'Warning' or 'Error' to minimize information leakage while a patch is developed. Prepare a security incident response plan.","A manual or automated log review discovers any unmasked PHI (e.g., Patient Name, ID) in any log destination (file or Windows Event Log).","Security Lead","2025-03-31","Not Started"
"RISK-007","Technical","Implementing a custom prerequisite check (WI-065) within an MSIX installer is technically challenging and may be impossible without a separate bootstrapper application. This could lead to a poor, multi-step installation experience or an unreliable deployment process.","4","3","12","Medium","EPIC-008 (Deployment), WI-065 (Installer Prerequisite Check). Impacts the first impression of the software and initial setup success.","Pushing the limits of the MSIX packaging technology, which prioritizes clean installs/uninstalls over complex, custom installation logic.","Immediately create a proof-of-concept for the custom installer action. If it proves infeasible, pivot early to designing a simple, standalone 'Pre-flight Check' tool that users run before the main installer. Improve the Deployment Guide with detailed manual verification steps.","Remove the automated check from the installer entirely and rely on a combination of excellent documentation and a post-installation configuration wizard that runs on the application's first launch.","The initial proof-of-concept for the MSIX custom action fails or proves to be unstable after two weeks of effort.","Build/Release Engineer","2025-04-15","Not Started"
"RISK-008","Technical","The decoupled C-STORE ingestion architecture requires an idempotent and transactional RabbitMQ consumer (WI-015). A flaw in this logic could lead to data loss or data duplication during message redelivery events (e.g., after a service crash or broker restart), corrupting the database.","3","4","12","Medium","EPIC-002 (Persistence), WI-015 (Metadata Persistence Consumer). A failure undermines the reliability of the core data ingestion pipeline.","The inherent complexity of distributed systems programming, specifically ensuring exactly-once processing semantics in a message queueing system.","Design all message handlers to be idempotent from the start (e.g., use database `INSERT ... ON CONFLICT` or `MERGE` statements). Acknowledge RabbitMQ messages only after the database transaction has successfully committed. Use integration tests with Testcontainers to simulate service crashes and verify correct recovery.","Develop an administrative tool to detect and merge duplicate study records. Implement a more aggressive dead-lettering policy to isolate problematic messages faster for manual review.","Monitoring detects duplicate records for the same StudyInstanceUID in the database. Messages are repeatedly failing and being routed to the DLQ.","Backend Lead","2025-04-30","Not Started"
"RISK-009","External","The application's functionality is dependent on the availability and stability of the external Odoo Licensing API. An extended outage of this third-party service could force all customer installations into a restricted read-only mode after the grace period expires.","3","4","12","Medium","EPIC-008 (Licensing), WI-066, WI-067. Impacts the entire application's usability and commercial viability.","A hard dependency on an external, third-party service for a critical business function (licensing).","The built-in 72-hour grace period is the primary mitigation. Additionally, implement smart caching of the license status to avoid unnecessary API calls. Use a resilient HTTP client library like Polly to handle transient network errors with retries and exponential backoff.","Establish a documented emergency procedure for generating and distributing long-term, offline license keys for high-value customers in the event of a prolonged API outage. Establish an SLA with the Odoo API provider.","Internal monitoring detects that the Odoo Licensing API endpoint is unreachable or returning 5xx errors for more than one hour.","Product Manager","2025-06-15","Not Started"
"RISK-010","External","While DICOM is a standard, different PACS vendors (GE, Siemens, Philips, etc.) have subtle variations in their implementations. The C-FIND/C-MOVE functionality may not work reliably with all customer PACS systems out-of-the-box, leading to integration failures and high support costs.","4","3","12","Medium","EPIC-004 (DICOM Communications), WS-010 (DICOM Client). Impacts core interoperability with hospital infrastructure.","Lack of strict adherence to the DICOM standard across all medical imaging vendors.","During development, test against at least two different open-source PACS implementations (e.g., Orthanc, dcm4chee). Publish a detailed DICOM Conformance Statement document. Implement highly detailed diagnostic logging for all DICOM network traffic, which can be enabled for troubleshooting.","Budget for professional services to handle on-site PACS integration and troubleshooting for the first few major customers. Build a knowledge base of vendor-specific configurations and workarounds.","Integration tests with a secondary PACS testbed (e.g., dcm4chee) begin to fail. The first customer reports an inability to connect to their PACS.","QA Lead","2025-05-15","Not Started"
"RISK-011","Resource","The project relies on a small number of developers with highly specialized skills in areas like DirectX/HLSL, advanced DICOM, and PostgreSQL security. The loss of a key person in one of these areas would severely impact the project timeline and quality.","3","4","12","Medium","EPIC-002, EPIC-005. The most complex parts of the project are dependent on specific expertise.","Concentration of critical, specialized knowledge in one or two individuals (Key Person Dependency).","Mandate pair programming for all high-complexity tasks. Enforce strict coding standards and require comprehensive documentation for complex components. Actively cross-train at least one other developer in the basics of each critical area.","Pre-emptively identify and vet external consultants or contractors with the required skill sets. Maintain a budget for emergency contract work to backfill a lost team member.","A key developer becomes a single point of failure on more than one critical epic. Project progress stalls when a key developer is on leave.","Engineering Manager","2025-02-28","Not Started"
"RISK-012","Quality","The application's performance requirements are stringent (e.g., <3s study load). The combination of a complex WPF UI, background processing, and a GPU rendering pipeline creates a high risk of performance bottlenecks, leading to a poor user experience and failure to meet NFRs.","4","3","12","Medium","EPIC-005 (DICOM Viewer), and general UI responsiveness across the application.","Multiple computationally intensive operations (rendering, data processing) running concurrently in a desktop application environment.","Integrate performance profiling (e.g., using dotTrace or Visual Studio's built-in profiler) as a standard part of the development and CI process. Define and automate specific performance tests for key user flows. Implement UI virtualization for all large lists/grids.","If performance targets are not met, increase the 'Recommended Hardware Specification' for the application. Identify features that can be simplified or made less performance-intensive for a patch release.","Automated performance tests show a regression of more than 15% in a key metric. User acceptance testing reveals consistent UI lag or slow load times.","QA Lead","2025-06-30","Not Started"
"RISK-013","External","A critical bug, breaking change, or newly discovered vulnerability in a core third-party library like `fo-dicom` or `Vortice.Windows` could halt development or require immediate, unplanned, and extensive rework to patch or replace the dependency.","3","4","12","Medium","Affects all epics that rely heavily on third-party libraries, especially EPIC-004 and EPIC-005.","Reliance on open-source software for critical functionality, which carries inherent risks of support, maintenance, and security issues.","Pin exact versions of all NuGet packages. Use a private NuGet feed (e.g., Azure Artifacts) to host approved package versions, preventing accidental updates. Integrate automated vulnerability scanning (OWASP Dependency-Check) into the CI pipeline to get early warnings.","Allocate a 'maintenance buffer' in the project schedule for addressing unforeseen dependency issues. For unmaintained but critical libraries, be prepared to fork the repository and apply patches internally.","OWASP Dependency-Check reports a new high or critical vulnerability in a used package. A key feature breaks after a minor package update.","Lead Developer","2025-03-15","Not Started"
"RISK-014","Operational","The system's reliance on pre-installed and correctly configured external services (PostgreSQL 16 with pgcrypto, RabbitMQ) creates a significant deployment challenge and support burden for end-customers, leading to installation failures and customer dissatisfaction.","4","3","12","Medium","Deployment and ongoing support of the entire application.","Architectural decision to not bundle dependencies, shifting the configuration burden to the user/customer.","Create an exceptionally clear and detailed Deployment Guide with step-by-step instructions and a troubleshooting section for common errors. Develop a lightweight, standalone 'Environment Pre-flight Check' utility that customers can run to validate their PostgreSQL and RabbitMQ setup before attempting installation.","Offer tiered support options, including a paid 'white-glove' installation service. For future versions, investigate packaging the application and its dependencies in Docker containers to simplify deployment.","Early feedback from beta testers indicates significant difficulty with the installation process. More than 20% of support tickets in the first month are related to initial setup.","Support Lead / Technical Writer","2025-07-01","Not Started"