"gate_name","gate_type","trigger_event","success_criteria","failure_action","responsible_team","automation_level","tools_used","measurement_frequency","escalation_procedure","historical_pass_rate","average_resolution_time","business_impact"
"Pull Request Quality Gate","Static Analysis & Unit Test","Pull Request Creation","Code builds successfully; Static analysis (e.g., SonarQube) finds 0 new bugs or code smells; Unit test coverage for new/changed code > 90%; All unit tests pass.","Block merge of Pull Request.","Development Team","Fully Automated",".NET Build, SonarQube Scanner, xUnit","Every PR","PR author is notified automatically.","90","1.5","Prevents low-quality code and basic defects from entering the main branch."
"Integration Test Quality Gate","Integration & E2E","Merge to Main Branch","All integration tests pass; Critical path E2E tests (Auth, Query/Retrieve, Basic View) pass; OWASP dependency scan finds 0 new critical vulnerabilities.","Block automated deployment to Staging; Notify team via chat.","QA Team / DevOps","Fully Automated","xUnit, WinAppDriver, OWASP Dependency-Check","Every merge to main","On-call developer investigates failure.","85","4","Ensures the main branch is always in a stable, deployable state."
"Release Candidate Quality Gate","Performance & Security","Manual Trigger before Release","All automated performance benchmarks are met; Full regression suite passes; Manual exploratory testing complete and signed off; Penetration test finds 0 critical or high vulnerabilities.","Block production deployment; Trigger a go/no-go meeting.","QA Team / Security Team","Partially Automated","JMeter, OWASP ZAP, Manual Test Case Suite","Per Release Candidate","Project Manager and Product Owner.","98","24","Final check to ensure the release meets all quality, performance, and security standards."