"sprint_number","sprint_name","sprint_goal","start_date","end_date","duration_days","total_story_points","estimated_hours","team_capacity_hours","capacity_utilization","task_count","epic_coverage","key_deliverables","demo_objectives","success_criteria","risk_factors","mitigation_strategies","dependencies_resolved","team_members","external_dependencies","integration_windows","review_schedule","retrospective_date","burndown_target"
"1","Sprint 1: Security & Access Foundation","Establish the complete user security context, including data storage, login, and role-based access control.","2024-10-28","2024-11-08","10","14","86.5","150","58%","12","User Authentication and Authorization","User/Role database schema, BCrypt password hashing, secure login screen, working Role-Based Access Control (RBAC) for UI and backend.","Log in as an 'Admin' and see the 'Administration' area. Log in as a 'Technician' and see the 'Administration' area hidden. Demonstrate failed login attempt.","All security stories (US-SEC-001, US-SEC-002, US-SEC-003) are complete and DoD met. E2E tests for login and RBAC are passing.","RISK-005: HIPAA compliance and security implementation risk.","Mandatory security code reviews for all authentication and authorization code. Adherence to established patterns.","true","senior.dev@company.com,mid.dev@company.com,qa.engineer@company.com","None","N/A","Sprint review on 2024-11-08 at 2 PM","2024-11-08","Linear burndown with 50% completion by 2024-11-01"
"2","Sprint 2: Core Architecture & DICOM Data Model","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","2024-11-11","2024-11-22","10","15","93.98","150","63%","13","Core Architecture and Technology Foundation,DICOM Core Functionality","Resilient RabbitMQ messaging infrastructure, signed MSIX installer, inter-process communication for service health, DICOM database schema.","Demonstrate publishing a message to a durable RabbitMQ queue and seeing it persist a broker restart. Install the application using the signed MSIX package. Show the new DICOM tables in the database.","All planned stories (US-SYS-001, US-SYS-002, US-SYS-003, US-DICOM-001) are complete. Integration tests for RabbitMQ reliability are passing. Installer works cleanly on test VMs.","RISK-002: External dependency configuration. RISK-007: Installer complexity.","Begin drafting comprehensive deployment guide. Develop installer iteratively and test early.","true","senior.dev@company.com,mid.dev@company.com,qa.engineer@company.com","Test certificate for code signing.","N/A","Sprint review on 2024-11-22 at 2 PM","2024-11-22","Linear burndown with 50% completion by 2024-11-15"
"3","Sprint 3: DICOM Ingestion Pipeline","Implement the end-to-end DICOM ingestion pipeline, from receiving studies via C-STORE to persisting them securely.","2024-11-25","2024-12-06","10","13","74.16","150","49%","7","DICOM Core Functionality","Functional DICOM C-STORE SCP listener. Decoupled ingestion process using RabbitMQ. Metadata persistence service. Hierarchical file storage.","Use a DICOM test tool (storescu) to send a study to the application. Show the corresponding message appear in RabbitMQ. Verify the new patient/study records are created in the database and the files are stored in the correct folder structure.","Stories US-DICOM-002 and US-DICOM-003 are complete. End-to-end integration tests for the ingestion pipeline are passing.","RISK-003: DICOM interoperability. RISK-004: Data integrity between DB and file system.","Test with multiple DICOM toolkits. Implement two-phase commit pattern for file move.","true","senior.dev@company.com,mid.dev@company.com,qa.engineer@company.com","DICOM test toolkit (dcmtk).","C-STORE listener integration test on day 7-8.","Sprint review on 2024-12-06 at 2 PM","2024-12-06","Linear burndown with 50% completion by 2024-11-29"
"4","Sprint 4: High-Performance DICOM Viewer","Deliver the high-performance, GPU-accelerated DICOM viewer, mitigating technical risk via an initial spike on DirectX rendering.","2024-12-09","2024-12-20","10","17","99.34","150","66%","6","DICOM Core Functionality","DirectX rendering POC. Reusable DicomViewerControl. Progressive loading for large studies. Core manipulation tools (Zoom/Pan/WWL). Annotation tools with GSPS saving.","Show the DirectX spike successfully rendering an image. Open a large CT study and demonstrate progressive loading. Demonstrate smooth interaction with zoom, pan, and window/level tools. Create and save a simple annotation.","Story US-DICOM-004 is complete. The initial spike proves the viability of the GPU rendering approach. Core viewer functions are implemented and meet performance targets on test hardware.","RISK-001: GPU-accelerated rendering complexity. RISK-009: Meeting performance targets.","Execute technical spike (TASK-033) first to de-risk the entire sprint. Integrate performance profiling into the development workflow.","true","senior.dev@company.com,mid.dev@company.com,qa.engineer@company.com","None","N/A","Sprint review on 2024-12-20 at 2 PM","2024-12-20","Focus on spike completion in first 3 days, then linear burndown."