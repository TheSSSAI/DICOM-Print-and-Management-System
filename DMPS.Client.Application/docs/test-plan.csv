test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
SYS-INST-001,Core Service,Functional,System,Critical,Manual Only,"Verify successful installation, startup, and visibility of the background service.","A Windows Server/10/11 environment is available. The MSIX installer package has been built.","1. Execute the MSIX installer. 2. Follow the installation prompts. 3. After installation, open the Windows Services console (`services.msc`). 4. Locate the 'DICOM Service'.","The service is listed, its status is 'Running', and its Startup Type is 'Automatic'.",N/A,"Windows Server/11, MSIX Installer",4,""
SYS-INST-002,Core Service,Recovery,System,High,Manual Only,"Verify the service's automatic recovery settings are correctly configured after installation.","The 'DICOM Service' is installed.","1. Open the Windows Services console and find the 'DICOM Service'. 2. Right-click and go to Properties -> Recovery tab. 3. Terminate the service's process unexpectedly (e.g., using Task Manager).","The 'First failure', 'Second failure', and 'Subsequent failures' dropdowns are all set to 'Restart the Service'. The service should automatically restart within a minute of being terminated.",N/A,"Windows Server/11, Task Manager",2,SYS-INST-001
UNIT-SEC-001,Core Service,Security,Unit,Critical,High,"Verify the SecureCredentialManager can correctly retrieve secrets (mocked).","DI container is configured.","1. Instantiate the service that depends on the secure credential provider. 2. Mock the Windows Credential Manager API to return a known fake credential. 3. Call the method to retrieve a secret.","The service correctly receives the fake credential from the mocked API without throwing an exception.",Mocked credential data,"xUnit, Moq",1,TASK-SVC-004
INT-SEC-001,Core Service,Security,Integration,High,Medium,"Verify the SecureCredentialManager can write and read a real secret from the Windows Credential Manager.","The test runner is executing under a user context with permissions to access the Credential Manager.","1. Use the SecureCredentialManager service to store a temporary, known secret. 2. Use the service to read the secret back. 3. Clean up by deleting the temporary secret.","The secret read back is identical to the one that was written. The cleanup step succeeds.",N/A,"xUnit, Windows Credential Manager API",2,TASK-SVC-004
INT-DB-001,Database & Persistence,Functional,Integration,Critical,High,"Verify that EF Core migrations are applied automatically on service startup against a clean database.","A Testcontainers instance of PostgreSQL is running and accessible. The service is configured to point to this test DB.","1. Start the PostgreSQL container with an empty database. 2. Start the DICOM Service application. 3. After startup, connect to the test database with a DB client.","The service starts without errors. All tables, indexes, and extensions (like `pgcrypto`) defined in the EF Core migrations exist in the database schema.",Empty PostgreSQL database,"xUnit, Testcontainers, Docker, pgAdmin/psql",4,TASK-SVC-027
INT-DB-002,Database & Persistence,Functional,Integration,Critical,High,"Verify CRUD operations for a critical entity (e.g., User) using the repository pattern.","A Testcontainers instance of PostgreSQL is running with the schema applied.","1. Create a new `User` entity. 2. Use the `UserRepository` to add the user to the database. 3. Retrieve the user by their ID. 4. Update a property on the user object and save changes. 5. Retrieve the user again to verify the update. 6. Delete the user. 7. Attempt to retrieve the user again.","Steps 1-5 succeed, and data is consistent. Step 7 returns null, confirming deletion.",Test user data (username, role, hashed password),"xUnit, Testcontainers, Docker, EF Core",3,TASK-SVC-028
INT-DB-003,Database & Persistence,Security,Integration,Critical,High,"Verify that data written to a column marked for encryption is stored as encrypted ciphertext.","A Testcontainers instance of PostgreSQL is running with the schema applied, and `pgcrypto` is enabled. The `Patient` entity's `PatientName` is configured for encryption.","1. Create a `Patient` entity with a known name (e.g., 'John Doe'). 2. Save the entity to the database using the repository. 3. Using a separate, raw SQL query, select the value directly from the `PatientName` column in the `patients` table. 4. Use the repository to retrieve the entity by ID.","The raw SQL query returns unintelligible ciphertext (not 'John Doe'). The repository retrieval correctly decrypts the name back to 'John Doe'.",Sample Patient Name,"xUnit, Testcontainers, Docker, psql",2,TASK-SVC-026
UNIT-MAINT-001,Database & Persistence,Functional,Unit,Medium,High,"Verify the Data Integrity Check service logic correctly identifies missing files.","The `DataIntegrityCheckService` is instantiated with mocked dependencies.","1. Mock the `IImageRepository` to return a list of two `Image` entities. 2. Mock the `IFileSystem` to return `true` for `File.Exists` for the first entity's path and `false` for the second. 3. Execute the service's main check logic. 4. Inspect the logger output.","The logger's WARNING sink was called exactly once, with a message containing the SOP Instance UID and path of the second (missing) entity. A final summary log indicates 1 discrepancy was found.",Mocked Image entities with file paths,"xUnit, Moq",1,TASK-SVC-031
SYS-MAINT-001,Database & Persistence,Functional,System,Medium,Medium,"Verify the Data Integrity Check service runs on schedule and logs a discrepancy report.","The service is running. The database contains an `Image` record pointing to a non-existent file path.","1. Let the service run for its scheduled interval (e.g., 24 hours, or trigger manually for test). 2. After the task should have completed, inspect the application's log files (or Windows Event Log).","A warning log entry exists for the missing file. A summary log entry reports the total number of files scanned and the number of discrepancies found.",A database record for a non-existent file,"Serilog file/event log viewer",2,US-011
INT-MSG-001,Asynchronous Messaging,Recovery,Integration,Critical,High,"Verify the RabbitMQ connection service automatically reconnects after the broker is restarted.","The service is running and connected to a Testcontainers RabbitMQ instance.","1. While the service is running, stop the RabbitMQ container. 2. Observe the service logs for connection failure messages. 3. Restart the RabbitMQ container.","The service logs the disconnection and begins retry attempts with exponential backoff. Once the container is back up, the service successfully re-establishes the connection and logs a success message.",N/A,"xUnit, Testcontainers, Docker, Polly",4,TASK-SVC-006
INT-MSG-002,Asynchronous Messaging,Resilience,Integration,Critical,High,"Verify that a durable message survives a broker restart.","A Testcontainers RabbitMQ instance is running. The queue has been declared as durable.","1. Publish a message to a durable queue with the 'persistent' delivery mode flag. 2. Stop the RabbitMQ container. 3. Restart the RabbitMQ container. 4. Start a consumer and attempt to receive the message.","The message is successfully received by the consumer after the broker restart.",A sample test message,"xUnit, Testcontainers, Docker, RabbitMQ.Client",2,TASK-SVC-007
INT-MSG-003,Asynchronous Messaging,Error Handling,Integration,Critical,High,"Verify the full Dead-Letter Queue (DLQ) workflow for a poison message.","A Testcontainers RabbitMQ instance is running. A main queue is configured with a DLX/DLQ. A consumer is running that will always fail to process a specific message.","1. Publish a ""poison"" message to the main queue. 2. Verify the consumer receives the message, fails processing, and retries (e.g., 3 times). 3. After the final retry, verify the consumer rejects (nacks) the message with `requeue=false`. 4. Check the message count of the main queue and the DLQ.","The poison message is no longer in the main queue. The poison message is now present in the DLQ. The consumer logs show the retry attempts and the final rejection.",A message designed to fail deserialization or processing,"xUnit, Testcontainers, Docker, RabbitMQ.Client",4,TASK-SVC-010
UNIT-LOG-001,Security & Logging,Security,Unit,Critical,High,"Verify the Serilog PHI redaction policy correctly masks sensitive data in a complex object.","The `PhiRedactionPolicy` is configured in a test Serilog logger.","1. Create a C# object that contains properties like 'PatientName', 'PatientID', and other non-sensitive data. 2. Log this object using the configured test logger. 3. Capture the log output.","The resulting log string contains the non-sensitive data as-is, but the values for 'PatientName' and 'PatientID' are replaced with '***REDACTED***'.",A sample C# object with PHI and non-PHI properties,"xUnit, Serilog",2,TASK-SVC-035
SYS-LOG-001,Security & Logging,Observability,System,High,Medium,"Verify that a single user operation generates logs with a consistent Correlation ID across different components.","The service is running. A test utility can publish a message to a RabbitMQ queue.","1. Publish a message (e.g., a print job) with a known Correlation ID in its header. 2. Let the service consume and process the message. 3. Inspect the application logs.","Log entries from the message consumer's startup, the database write operation, and the final processing step all contain the same Correlation ID.",A sample RabbitMQ message with a header,"Serilog file viewer, RabbitMQ client utility",2,TASK-SVC-034
E2E-DICOM-001,DICOM C-STORE SCP,Functional,System,Critical,High,"Verify the end-to-end DICOM C-STORE ingestion pipeline, including decoupled database write.","The full service is running. Testcontainers for PostgreSQL and RabbitMQ are running. A test DICOM SCU is available.","1. Use the DICOM SCU to send a multi-file DICOM study to the service's SCP port. 2. Observe the SCU for a success response. 3. After a few seconds, query the PostgreSQL database. 4. Check the configured DICOM storage location on the file system.","The SCU receives a success response quickly. Records for the patient, study, and images are created in the database. The DICOM files are stored in the correct folder on the file system.",A valid multi-file DICOM study,"fo-dicom, xUnit, Testcontainers, Docker",8,US-003
E2E-DICOM-002,DICOM C-STORE SCP,Functional,System,High,High,"Verify that DICOM auto-routing rules are correctly applied.","The service is running. A routing rule is configured in the database to route studies with Modality='CT' to a specific 'CT_Studies' folder.","1. Use a DICOM SCU to send a CT study. 2. Use the DICOM SCU to send an XA study. 3. Check the file system storage locations.","The CT study files are located in the 'CT_Studies' folder. The XA study files are located in the default storage folder.",One CT DICOM study, one XA DICOM study,"fo-dicom, xUnit, Testcontainers, Docker",4,US-004
INT-PRINT-001,Background Jobs,Functional,Integration,High,Medium,"Verify the print job consumer correctly processes a message and interacts with a mocked printing service.","The service is running with a `PrintJobConsumer`. The Windows Print API is mocked.","1. Publish a valid `PrintJobDto` message to the `print_job_queue`. 2. Let the consumer process the message. 3. Check the mock printing service.","The consumer deserializes the message correctly. The mock printing service's `SpoolJob` method was called with the correct document data and printer name.",A valid serialized PrintJobDto message,"xUnit, Moq, RabbitMQ.Client",3,US-005
SYS-PRINT-001,Background Jobs,Error Handling,System,High,Medium,"Verify a failed print job (e.g., printer offline) is handled gracefully and the message is dead-lettered.","The service is running. The print spooling logic is configured to fail for a specific printer name.","1. Submit a print job targeting the ""failing"" printer. 2. Observe the RabbitMQ queues.","The `print_job_queue` is empty. The message for the failed job is now in the DLQ. The application logs contain an error detailing the reason for the print failure.",A print job message,"RabbitMQ Management UI, Serilog log viewer",2,US-005
INT-PDF-001,Background Jobs,Functional,Integration,High,High,"Verify the PDF generation consumer correctly creates a PDF/A-3 compliant file.","The service is running with a `PdfGenerationConsumer`. A writable output directory exists.","1. Publish a valid `PdfJobDto` message to the `pdf_generation_queue`, specifying an output path. 2. Let the consumer process the message. 3. Check the output directory. 4. Use a PDF validation tool to check the created file.","A PDF file is created at the specified path. The validation tool confirms the file is PDF/A-3 compliant and, if specified, is encrypted.",A valid serialized PdfJobDto message, sample DICOM image files,"xUnit, QuestPDF, PDF validation library (e.g., iText)",4,US-006
INT-IPC-001,IPC & Health,Functional,Integration,High,High,"Verify synchronous request/reply communication between a test client and the service's Named Pipe server.","The service is running with the `NamedPipeServerService` hosted.","1. Create a `NamedPipeClientStream` in a test. 2. Connect to the service's pipe. 3. Write the string 'PING'. 4. Read the response from the pipe.","The client connects successfully. The response read from the pipe is 'PONG'.",N/A,"xUnit, System.IO.Pipes",2,TASK-SVC-021
SYS-HEALTH-001,IPC & Health,Functional,System,Critical,Medium,"Verify the health probe correctly identifies and reports the status of all dependencies.","The service is running. PostgreSQL and RabbitMQ containers are running. The Named Pipes server is active.","1. Stop the PostgreSQL container. 2. Wait for the health probe to run (e.g., 60s). 3. Use a Named Pipe client to send a 'GET_HEALTH' request. 4. Restart the PostgreSQL container and repeat the health check.","The first health check response is a JSON string indicating PostgreSQL status is 'Disconnected'. The second health check response indicates PostgreSQL status is 'Connected'.",N/A,"Testcontainers, Docker, Named Pipe client utility",4,US-007
SYS-ALERT-001,IPC & Health,Functional,System,High,Medium,"Verify that a critical health status change triggers an email alert.","The service is running. A mock SMTP server (like Papercut) is running and the service is configured to use it. The DLQ message count is the trigger.","1. Manually move a message to the DLQ in RabbitMQ. 2. Wait for the health probe to run and detect the change. 3. Check the mock SMTP server's inbox.","An email alert is received by the mock SMTP server with a subject line indicating a critical alert and a body detailing that the DLQ count is greater than 0.",N/A,"RabbitMQ Management UI, Papercut SMTP",3,US-008
INT-MAINT-001,System Administration,Functional,Integration,High,High,"Verify the data retention service correctly identifies and deletes old studies and their files.","A Testcontainers PostgreSQL DB is populated with studies, one of which is older than the configured retention period (e.g., 7 years). A corresponding file exists on a test file system.","1. Configure the retention period to 7 years. 2. Run the `DataRetentionService` logic. 3. Query the database for the old study. 4. Check the file system for the old study's file. 5. Query the audit log.","The old study's records are deleted from the database. The old study's file is deleted from the file system. An audit log entry for the auto-purge action exists.",Database records and a file for an old study,"xUnit, Testcontainers, Docker, Moq (for IFileSystem)",5,US-009
PERF-DICOM-001,DICOM C-STORE SCP,Performance,Performance,Critical,High,"Measure the C-STORE SCP's throughput and concurrency handling.","The service is running in a production-like environment (meeting recommended specs). A DICOM load testing tool is available.","1. Configure the load testing tool to simulate 10 concurrent clients. 2. Each client will send a 50-image CT study via C-STORE. 3. Measure the time until all studies are successfully received (SCP success response sent).","The service must handle all 10 simultaneous associations without dropping connections. The average time for the SCP to acknowledge receipt of an instance should be under 500ms. All studies are ingested within an acceptable timeframe (e.g., < 2 minutes).",Multiple representative DICOM studies,"DICOM load testing tool (e.g., DVTk, custom script with fo-dicom)",8,REQ-146
SEC-PENTEST-001,Core Service,Security,Security,Critical,Manual Only,"Attempt to exploit the Named Pipes server to gain unauthorized access or cause a denial of service.","The service is running on a test machine. Security testing tools are available.","1. Identify the Named Pipe name used by the application. 2. Attempt to connect to the pipe from a process running as a different, low-privilege user. 3. Send malformed or excessively large data packets to the pipe.","The connection attempt from the unauthorized user should be rejected (Access Denied). The service should not crash or become unresponsive when receiving malformed data.",N/A,"Penetration testing tools, custom scripts",6,RISK-010