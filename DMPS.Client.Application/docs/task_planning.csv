"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-001","Define User, Role, PasswordHistory Domain Entities","Create C# classes in the Domain project for User, Role, and PasswordHistory. Define properties, relationships, and data annotations for EF Core.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-11-08","6","1","backend,c#,entity-framework-core","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-001","","C#,Entity Framework Core","Low","Low","User.cs, Role.cs, PasswordHistory.cs files exist in the Domain project. Entities include all required fields as per REQ-1-014, REQ-1-042, and REQ-1-082. Relationships are correctly defined.","Code reviewed and successfully compiled. Domain entities cover all requirements for user management.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Code review.","Foundation for database schema.","Provides the fundamental database structures for HIPAA-compliant user management."
"TASK-002","Configure DbContext and Create Initial EF Core Migration","Add DbSets for new entities to the ApplicationDbContext. Use the Fluent API to configure indexes on usernames and foreign keys. Generate the initial database migration script.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-11-08","4.17","1","database,entity-framework-core,postgresql","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-001","TASK-001","Entity Framework Core,PostgreSQL","Low","Low","EF Core `dotnet ef migrations add InitialUserSchema` command completes successfully. The generated migration script correctly defines tables, columns, indexes, and constraints.","Migration successfully applied to a local PostgreSQL test database.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","Local PostgreSQL dev environment.","Schema validation in a test database.","Creates the initial database schema.","Translates the logical data model into a physical database schema."
"TASK-003","Implement BCrypt Password Hashing Service","Create an `IPasswordHasher` service with methods to hash a plaintext password and verify a password against a hash using the BCrypt.Net library. Register it in the DI container.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-11-08","5.17","1","backend,c#,cryptography,security","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-001","","C#,Cryptography","Medium","Medium","Service correctly hashes passwords into the standard BCrypt format. Service correctly returns true for a valid password/hash pair and false otherwise. Service is registered for dependency injection.","Service is implemented and unit tested with 100% coverage. Security code review passed.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","Senior dev for security review.","None","Unit testing with 100% coverage.","Critical security component.","Ensures passwords are not stored in plaintext, meeting HIPAA security standards."
"TASK-004","Write Unit Tests for Password Hashing Service","Create comprehensive xUnit tests for the BCrypt Password Hashing service to ensure its correctness and reliability.","Task","Sprint Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-11-08","4.83","1","qa,testing,xunit,c#","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-001","TASK-003","xUnit,C#","Low","Low","Test case for successful password verification passes. Test case for failed password verification passes. Test case verifies that two hashes of the same password are not identical. Code coverage is >= 95%.","All tests passing in the CI pipeline.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","CI pipeline execution.","Validates core security logic.","Provides confidence in the password security implementation."
"TASK-005","Develop User Authentication Service","Create an `IAuthenticationService` in the Application layer that orchestrates the login process by fetching a user from the database and validating the password with the `IPasswordHasher` service.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-11-08","8.33","2","backend,c#,entity-framework-core,security","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-002","TASK-002,TASK-003","C#,Entity Framework Core","Medium","Low","Service returns a success result with user data (ID, Role) for valid credentials. Service returns a failure result for an invalid username or password. Service logic prevents user enumeration.","Service implemented and covered by integration tests.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Integration tests against a test database.","Core of the application login logic.","Provides the business logic for verifying user credentials securely."
"TASK-006","Build WPF LoginView.xaml with Material Design","Create the XAML for the login screen using the Material Design in XAML Toolkit. Include text boxes for username, a password box, a login button, and a text block for error messages.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-11-08","6.17","1","frontend,wpf,xaml,ui","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-002","","WPF,XAML","Low","Low","The view renders correctly and adheres to Material Design principles. Password input is masked. The view is integrated as the startup window of the application.","XAML code complete and passes UI review.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Visual inspection and E2E test.","First screen the user interacts with.","Provides the user interface for authentication."
"TASK-007","Implement LoginViewModel with Command and Validation Logic","Create the ViewModel for the login screen. Implement bindable properties for username and password, an ICommand for the login button, and logic to call the AuthenticationService. Handle success and failure.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-11-08","8.33","2","frontend,wpf,mvvm,c#","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-002","TASK-005,TASK-006","WPF,MVVM,C#","Medium","Low","ViewModel properties are correctly bound to the view. A successful login navigates to the main application window. A failed login displays an error message on the UI.","ViewModel implemented and covered by unit tests.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Unit and E2E tests.","Connects the Login UI to the backend authentication logic.","Contains the presentation logic for the login process."
"TASK-008","Write Integration & E2E Tests for Login Flow","Create integration tests for the AuthenticationService against a test database. Create an E2E test that launches the app, enters credentials, and verifies the login outcome.","Task","Sprint Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-11-08","10.5","2","qa,testing,e2e,testcontainers","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-002","TASK-007","xUnit,Testcontainers,Appium/WinAppDriver","Medium","Medium","Integration test verifies success, failure, and disabled account scenarios. E2E test successfully logs in a test user and verifies the main window appears. E2E test verifies that entering wrong credentials displays an error.","All tests passing in the CI pipeline.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Requires setup of Testcontainers and WinAppDriver.","Validates the entire login feature from UI to database.","Ensures the authentication feature is robust and reliable."
"TASK-009","Create a Centralized User Session Service","Implement a singleton service (`IUserSessionService`) to store the currently authenticated user's ID, username, and role. This will be the single source of truth for permissions.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-11-08","4.17","1","backend,architecture,c#","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-003","TASK-005","C#,.NET DI","Low","Low","Service is registered as a singleton in the DI container. The AuthenticationService populates this service upon successful login. The service exposes properties to get the current user's role.","Service implemented and unit tested.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Unit tests.","Central component for managing application state related to the current user.","Provides a consistent, application-wide mechanism for accessing the current user's identity and permissions."
"TASK-010","Implement RBAC Visibility Properties in Core ViewModels","Refactor key ViewModels (e.g., `MainViewModel`, `SettingsViewModel`) to inject `IUserSessionService` and expose boolean properties like `IsAdminVisible` based on the user's role. Bind UI element visibility to these properties.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-11-08","8.33","2","frontend,wpf,mvvm,security","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-003","TASK-009","WPF,MVVM","Medium","Low","The 'Administration' tab in the main window is hidden when a 'Technician' is logged in. The 'Administration' tab is visible when an 'Administrator' is logged in.","UI controls are correctly bound to ViewModel properties for visibility. A reusable pattern is established.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","E2E tests for both Admin and Technician roles.","Primary mechanism for enforcing UI-level permissions.","Implements the Principle of Least Privilege in the user interface."
"TASK-011","Implement Backend Authorization Checks in Application Services","Add guard clauses or attributes to sensitive methods in Application Services (e.g., `UserService.DeleteUser`) that check the `IUserSessionService` and throw an `UnauthorizedAccessException` if the user is not an Admin.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-11-08","8.5","2","backend,security,c#","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-003","TASK-009","C#,.NET","Medium","High","Calling an admin-only service method from a mock Technician session context throws the correct exception. The check is implemented in at least two representative admin-only services.","A clear, reusable pattern for backend authorization checks is established and implemented. Covered by unit tests.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Unit tests that mock the user session.","Critical defense-in-depth security measure.","Ensures that authorization rules cannot be bypassed, even if the UI is compromised."
"TASK-012","Write Unit & E2E Tests for RBAC","Create unit tests for the backend authorization checks. Expand the E2E tests to log in as both an Admin and a Technician and verify that UI elements are visible/hidden and enabled/disabled correctly.","Task","Sprint Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-11-08","12","2","qa,testing,e2e,security","Sprint 1","Establish the complete user security context, including data storage, login, and role-based access control.","User Authentication and Authorization","EPIC-002","DICOM Management and Printing System","US-SEC-003","TASK-010,TASK-011","xUnit,Appium/WinAppDriver","Medium","Low","Unit tests for service-layer authorization pass. E2E test logs in as Technician and asserts that the 'Administration' button is not visible. E2E test logs in as Admin and asserts that the 'Administration' button is visible.","All tests passing in the CI pipeline.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","E2E framework must be stable.","Validates the full RBAC implementation.","Provides confidence that the role-based access control is working as intended."
"TASK-013","Implement RabbitMQ Connection & Channel Management Service","Create a singleton service in the Infrastructure layer to manage a persistent connection to RabbitMQ. It should handle connection retries and provide a mechanism for creating and managing channels.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-11-22","12","2","infrastructure,rabbitmq,c#,resiliency","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-001","","RabbitMQ,C#","Medium","High","The service successfully establishes a connection to the RabbitMQ broker. If the connection is lost, the service attempts to reconnect with an exponential backoff strategy. The service is registered as a singleton in the DI container.","Service implemented and passes integration tests demonstrating connection recovery.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","RabbitMQ broker for development.","Integration tests using Testcontainers.","Foundation for all asynchronous communication.","Ensures the application can reliably communicate with the message broker, even with transient network issues."
"TASK-014","Implement Generic Message Publisher and Consumer Services","Create reusable services for publishing messages to an exchange and for subscribing to a queue. These will abstract the raw RabbitMQ client library details.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-11-22","8.33","2","infrastructure,rabbitmq,c#","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-001","TASK-013","RabbitMQ,C#","Medium","Low","A message can be published to a specific exchange with a routing key. A consumer can be registered to listen to a specific queue. Services handle JSON serialization/deserialization.","Generic publisher/consumer services are implemented and unit tested.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Integration tests.","Provides a clean abstraction for the rest of the application to use messaging.","Simplifies development and enforces consistent messaging patterns across the application."
"TASK-015","Configure Durable Queues, Persistent Messages, and DLX","Implement logic that declares the required RabbitMQ topology on application startup. This includes creating durable queues, setting the message persistent flag, and configuring the Dead-Letter Exchange (DLX) for failed messages.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-11-22","8.5","2","infrastructure,rabbitmq,reliability","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-001","TASK-014","RabbitMQ","Medium","High","Queues for critical operations are declared as durable. Messages are published as persistent. A main queue is configured to route failed messages to a DLX/DLQ.","Topology configuration is implemented and verified with integration tests.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Integration tests that simulate broker restart and message rejection.","Critical for data integrity and system reliability.","Prevents loss of critical tasks (e.g., database writes, print jobs) in case of system restarts or processing failures."
"TASK-016","Write Integration Tests for RabbitMQ Reliability","Using Testcontainers, create tests that verify durability and the DLX mechanism. One test should publish a persistent message, restart the container, and verify the message is still there. Another test should reject a message and verify it lands in the DLQ.","Task","Sprint Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-11-22","6","1","qa,testing,rabbitmq,testcontainers","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-001","TASK-015","Testcontainers,RabbitMQ","Medium","Low","Test for message persistence after broker restart passes. Test for queue durability after broker restart passes. Test for dead-lettering on message rejection passes.","All reliability tests pass in the CI pipeline.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","CI environment must support Docker for Testcontainers.","Validates core reliability features of the messaging system.","Provides confidence that the asynchronous processing system is resilient to failure."
"TASK-017","Implement Named Pipe Server in Windows Service","In the background service, create a hosted service that listens for connections on a well-known Named Pipe. On receiving a 'PING' message, it should respond with 'PONG'.","Task","Sprint Backlog","Medium","mid.dev@company.com","product.owner@company.com","2024-11-22","6.33","1","infrastructure,ipc,named-pipes,c#","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-002","",".NET,Named Pipes","Medium","Low","The service starts a `NamedPipeServerStream` on a predefined pipe name. The server correctly handles client connections and disconnections. It successfully responds to a 'PING' request.","Server implementation is complete and passes integration tests.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Integration test with a pipe client.","Enables synchronous status checks.","Allows the client application to know the real-time status of the background service."
"TASK-018","Implement Named Pipe Client in WPF Application","Create a client service in the WPF application that can connect to the Named Pipe, send a 'PING' message, and await a 'PONG' response. It must handle timeouts gracefully if the service is not running.","Task","Sprint Backlog","Medium","mid.dev@company.com","product.owner@company.com","2024-11-22","5.33","1","infrastructure,ipc,named-pipes,c#","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-002","",".NET,Named Pipes","Medium","Low","The client successfully receives a 'PONG' when the service is running. The client call returns false or throws a timeout exception if the service is not running.","Client implementation is complete and passes integration tests.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Integration test against a mock server.","Enables synchronous status checks.","Allows the client application to provide immediate UI feedback based on service health."
"TASK-019","Write Integration Test for Named Pipe Communication","Create a test that starts a mock pipe server, has the client connect to it, and verifies the request/response flow. Also test the client's timeout behavior when no server is present.","Task","Sprint Backlog","Medium","qa.engineer@company.com","product.owner@company.com","2024-11-22","6","1","qa,testing,ipc,c#","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-002","TASK-017,TASK-018","xUnit,C#","Medium","Low","Test case for successful PING/PONG passes. Test case for client timeout when server is down passes.","All tests passing in CI.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Tests must run reliably in a CI environment.","Validates the IPC mechanism.","Provides confidence in the service health check feature."
"TASK-020","Create and Configure MSIX Packaging Project","Add a Windows Application Packaging Project to the solution. Configure its manifest (`Package.appxmanifest`) to include the WPF client and the Windows Service as executables. Set application metadata.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-11-22","6.33","1","devops,msix,deployment","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-003","","MSIX,Visual Studio","Medium","Low","The packaging project is added to the solution. The manifest includes entries for both the client and service. The build process generates an unsigned .msixbundle file.","A build of the solution successfully produces an MSIX package.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Manual installation test.","Foundation of the deployment strategy.","Creates the container for a professional and reliable deployment artifact."
"TASK-021","Implement Windows Service Registration in MSIX Manifest","Add the `windows.service` extension to the `Package.appxmanifest`. Configure it to register the service executable with the name 'DICOM Service', 'auto' start type, and set recovery options.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-11-22","6.33","1","devops,msix,deployment","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-003","TASK-020","MSIX,XML","Medium","Medium","The manifest contains a valid `uap:Extension` for `windows.service`. Installing the package correctly registers the service in `services.msc`. The service startup type is 'Automatic' and recovery options are set to 'Restart the Service'.","Manual installation test verifies service is registered and configured correctly.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Manual installation and verification in `services.msc`.","Automates a critical and error-prone part of setup.","Simplifies deployment for system administrators, reducing setup errors and support costs."
"TASK-022","Integrate Code Signing into the Build Process","Configure the packaging project to sign the MSIX bundle using a test certificate for development and provide instructions/scripting for using a production certificate in the CI/CD pipeline.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-11-22","8.33","2","devops,msix,security,deployment","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-003","TASK-020","MSIX,Code Signing","Medium","Medium","The build output is a signed `.msixbundle` file. The signed package can be installed on a Windows machine without security warnings related to untrusted publishers (once the cert is trusted).","The build process is configured to automatically sign the MSIX package.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","Code signing certificate (test cert for dev).","Successful installation of the signed package.","Required for production deployment.","Ensures the authenticity and integrity of the software, a key security requirement."
"TASK-023","Test Deployment and Uninstallation","Perform end-to-end testing of the installer on clean Windows 10 and Windows 11 virtual machines. Verify application functionality, service registration, and that uninstallation cleanly removes all components.","Task","Sprint Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-11-22","6.5","1","qa,testing,deployment,manual-testing","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","Core Architecture and Technology Foundation","EPIC-001","DICOM Management and Printing System","US-SYS-003","TASK-021,TASK-022","Manual Testing,Windows Administration","Low","Low","Application installs and launches successfully. Windows Service is registered and starts. Uninstalling the application from 'Apps & Features' removes all files and the Windows Service registration.","A test report confirming successful installation and uninstallation on all target OS versions is completed.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","Clean VM snapshots for testing.","Manual test execution on Windows 10 & 11.","Validates the entire deployment story.","Provides confidence that the application can be deployed and removed cleanly in a customer environment."
"TASK-024","Define DICOM Patient, Study, Series, Image Entities","Create C# classes in the Domain project to model the DICOM hierarchy. Include essential attributes like PatientID, StudyInstanceUID, Modality, FilePath, etc. Define navigation properties for relationships.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-11-22","8","2","backend,c#,dicom,entity-framework-core","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-001","TASK-001","C#,Entity Framework Core,DICOM","Medium","Low","Entities are created in the Domain project. Relationships are defined: Patient has many Studies, Study has many Series, etc. Properties are chosen to store key DICOM tags.","Code reviewed and successfully compiled.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Code review.","Foundation for clinical data storage.","Creates the foundational data structure for the entire clinical workflow."
"TASK-025","Update DbContext and Create DICOM Schema Migration","Add DbSets for the DICOM entities to ApplicationDbContext. Configure indexes on StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and PatientID. Generate and apply the new EF Core migration.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-11-22","6","1","database,dicom,entity-framework-core,postgresql","Sprint 2","Build the core system architecture, including reliable asynchronous messaging, a basic installer, and the DICOM data model.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-001","TASK-024","Entity Framework Core,PostgreSQL","Low","Low","New migration is successfully generated. Migration script includes `CreateIndex` calls for performance-critical columns. The schema is successfully applied to a test database.","Migration successfully applied to a local PostgreSQL test database.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Schema validation in a test database.","Extends the database schema to support clinical data.","Enables the system to store, search, and manage study information."
"TASK-026","Implement DICOM C-STORE SCP Listener using fo-dicom","Create a hosted service in the Windows Service project that starts a DICOM server. Implement the `IDicomCStoreProvider` interface to handle incoming C-STORE requests by saving files to a temporary location.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-12-06","12","2","infrastructure,dicom,fo-dicom,c#","Sprint 3","Implement the end-to-end DICOM ingestion pipeline, from receiving studies via C-STORE to persisting them securely.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-002","","DICOM,fo-dicom,C#","High","High","The service starts a DICOM listener on a configurable port. It successfully accepts associations from a test DICOM SCU. Received DICOM files are saved to a temporary disk location.","Service is implemented and passes integration tests with a standard `storescu` tool.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-25","2024-12-06","100%","None","DICOM test tool (e.g., dcmtk).","Integration test using a `storescu` command-line tool.","Opens a network port for listening.","Enables the primary data-inflow channel of the application."
"TASK-027","Decouple SCP from Persistence with RabbitMQ","Modify the `IDicomCStoreProvider` implementation. Upon receiving a file, parse key metadata tags, construct a DTO, and publish a message to the 'dicom-ingest' RabbitMQ queue. The response to the SCU should not wait for this to be processed.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-12-06","8.33","2","backend,dicom,rabbitmq,architecture","Sprint 3","Implement the end-to-end DICOM ingestion pipeline, from receiving studies via C-STORE to persisting them securely.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-002","TASK-014,TASK-026","fo-dicom,RabbitMQ","Medium","Low","The C-STORE handler returns a success response quickly. A message containing file path and key DICOM metadata is published to RabbitMQ. The operation is asynchronous.","Code implemented and passes integration tests verifying message publication.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration test that verifies a message appears in RabbitMQ after a C-STORE operation.","Improves ingestion throughput and reliability.","Ensures high availability for the critical data ingestion function."
"TASK-028","Write Integration Test for End-to-End C-STORE Flow","Create a comprehensive integration test that: 1. Starts the Windows Service. 2. Uses a `fo-dicom` client to send a test DICOM file. 3. Asserts that the client received a success response. 4. Asserts that a message with correct metadata appeared in the RabbitMQ ingest queue.","Task","Sprint Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-12-06","16.67","3","qa,testing,integration-test,dicom,rabbitmq","Sprint 3","Implement the end-to-end DICOM ingestion pipeline, from receiving studies via C-STORE to persisting them securely.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-002","TASK-027","xUnit,fo-dicom,Testcontainers","High","Medium","Test case successfully sends a DICOM file to the running service. Test case verifies the correct message is present in RabbitMQ.","All tests passing in CI.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Test orchestrates multiple complex components: SCP, file system, RabbitMQ.","Validates the entire ingestion-to-queue pipeline.","Provides confidence in the reliability of the data reception workflow."
"TASK-029","Implement RabbitMQ Consumer for DICOM Ingestion","Create a hosted service that subscribes to the 'dicom-ingest' queue. It will deserialize the message and orchestrate calls to persist metadata and move the file.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-12-06","8.33","2","backend,rabbitmq,c#","Sprint 3","Implement the end-to-end DICOM ingestion pipeline, from receiving studies via C-STORE to persisting them securely.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-003","TASK-015,TASK-027","RabbitMQ,C#","Medium","Low","The consumer starts on service startup and listens to the queue. It correctly deserializes the message DTO. It ACKs the message upon successful processing and NACKs it on failure.","Consumer implemented and passes integration tests.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration tests.","The processing end of the ingestion queue.","Enables the system to process received clinical data."
"TASK-030","Implement DICOM Metadata Persistence Service","Create a service that takes the DICOM metadata DTO, creates or updates the Patient/Study/Series/Image entities, and saves them to the database within a single EF Core transaction. Implement idempotent logic (UPSERT).","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-12-06","12","2","backend,database,entity-framework-core,postgresql","Sprint 3","Implement the end-to-end DICOM ingestion pipeline, from receiving studies via C-STORE to persisting them securely.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-003","TASK-025","Entity Framework Core,PostgreSQL","High","Medium","The service correctly creates new records for a new study. The service correctly updates existing records if a study is re-sent. All database changes are committed in a single transaction.","Service implemented and passes integration tests for creation and idempotency.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration tests.","Handles all database writes for DICOM data.","Ensures clinical data is stored correctly and consistently in the database."
"TASK-031","Implement Hierarchical File Storage Logic","Create a service that takes the DICOM metadata and the temporary file path, constructs the permanent hierarchical path `..\PatientID\StudyUID\SeriesUID\`, and moves the file. Update the database record with the final path.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-12-06","6.33","1","backend,file-io,c#","Sprint 3","Implement the end-to-end DICOM ingestion pipeline, from receiving studies via C-STORE to persisting them securely.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-003","TASK-030","C#,.NET File I/O","Medium","High","The final storage path is correctly constructed. The file is successfully moved from the temp location. The service handles directory creation. File system errors are caught and handled.","Service implemented and passes integration tests.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration tests verifying file system changes.","Final step of ingestion; potential point of data inconsistency if it fails after DB commit.","Organizes DICOM files on disk in a structured and predictable manner."
"TASK-032","Write Integration Test for End-to-End Persistence Flow","Create a test that places a message in the ingest queue, runs the consumer, and then asserts that: 1. The correct records exist in the database. 2. The DICOM file exists at the correct hierarchical path. 3. The message is gone from the queue.","Task","Sprint Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-12-06","10.5","2","qa,testing,integration-test,dicom,database","Sprint 3","Implement the end-to-end DICOM ingestion pipeline, from receiving studies via C-STORE to persisting them securely.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-003","TASK-029,TASK-031","xUnit,Testcontainers","High","Medium","Test successfully validates database record creation. Test successfully validates file system artifact creation. Test confirms the message was ACK'd and removed from the queue.","All tests passing in CI.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Test requires Testcontainers for both PostgreSQL and RabbitMQ.","Validates the entire queue-to-persistence pipeline.","Provides confidence in the data integrity of the ingestion process."
"TASK-033","Spike: Validate DirectX Rendering with Vortice.Windows","Create a proof-of-concept WPF application that uses fo-dicom to parse a monochrome DICOM file and Vortice.Windows to render its pixel data to a texture displayed via D3DImage.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-12-20","16.67","3","spike,frontend,wpf,directx,rendering","Sprint 4","Deliver the high-performance, GPU-accelerated DICOM viewer, mitigating technical risk via an initial spike on DirectX rendering.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-004","","DirectX,Vortice.Windows,WPF,HLSL","Critical","Critical","A 512x512 monochrome DICOM image is successfully displayed. Basic window/level can be applied via a pixel shader. The POC is stable and does not leak memory over a 5-minute period.","A standalone POC solution is created and demonstrated. A feasibility report is produced.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Demonstration and code review.","RISK-001 mitigation task.","Validates the core technical approach for the DICOM viewer, the most complex feature in the application."
"TASK-034","Integrate GPU Rendering Pipeline into Main Application","Based on the successful spike, create a reusable `DicomViewerControl` in the WPF client. Encapsulate the DirectX initialization, rendering loop, and resource management within this control.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-12-20","21","5","frontend,wpf,directx,rendering","Sprint 4","Deliver the high-performance, GPU-accelerated DICOM viewer, mitigating technical risk via an initial spike on DirectX rendering.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-004","TASK-033","DirectX,WPF","Critical","High","The `DicomViewerControl` can be placed in a view and bound to a DICOM image object from a ViewModel. The control properly handles resizing and disposal of GPU resources.","Control is implemented and passes component-level tests and visual inspection.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Component-level tests and visual inspection.","Core reusable component for image display.","Provides the reusable UI component for displaying all DICOM images."
"TASK-035","Implement Progressive Loading for Large Series","Develop the logic in the viewer's ViewModel to first load a downsampled, low-resolution version of an image for immediate display, then asynchronously load the full-resolution pixel data in a background thread.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-12-20","12","2","frontend,performance,c#,async","Sprint 4","Deliver the high-performance, GPU-accelerated DICOM viewer, mitigating technical risk via an initial spike on DirectX rendering.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-004","TASK-034","C#,async/await","Medium","Medium","Opening a large CT series shows a preview image almost instantly (<3 seconds). The UI remains responsive while the full-resolution data loads. The view updates automatically to the high-resolution image when loading is complete.","Logic implemented and passes performance tests with large DICOM series.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Performance testing with large DICOM series.","Critical for meeting NFR performance targets.","Dramatically improves perceived performance and user experience when working with large studies."
"TASK-036","Implement Core Image Manipulation Tools (Zoom, Pan, WW/WL)","Add logic to the DicomViewerViewModel and DicomImageRenderer to handle user input for zooming, panning, and window/level adjustments by passing transformation matrices and WW/WL parameters to the renderer/shaders.","Task","Sprint Backlog","Critical","mid.dev@company.com","product.owner@company.com","2024-12-20","16.67","3","frontend,wpf,mvvm,directx","Sprint 4","Deliver the high-performance, GPU-accelerated DICOM viewer, mitigating technical risk via an initial spike on DirectX rendering.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-004","TASK-034","WPF,MVVM,Linear Algebra","High","Medium","User can zoom with mouse wheel, pan with mouse drag, and adjust WW/WL with right-mouse drag. Interactions are smooth and update in real-time.","All tools implemented and manually tested for smoothness and correctness.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","Senior dev for renderer/shader support.","None","Manual testing of all tools.","Adds core interactivity to the viewer.","Provides the essential tools for clinical image review."
"TASK-037","Spike: DICOM GSPS Creation with fo-dicom","Create a proof-of-concept to programmatically create a DICOM Grayscale Softcopy Presentation State (GSPS) object using fo-dicom. The POC should define a simple graphic annotation and save it as a valid .dcm file.","Task","Sprint Backlog","High","senior.dev@company.com","product.owner@company.com","2024-12-20","12","2","spike,backend,dicom,fo-dicom","Sprint 4","Deliver the high-performance, GPU-accelerated DICOM viewer, mitigating technical risk via an initial spike on DirectX rendering.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-004","TASK-036","DICOM,fo-dicom","High","Medium","A GSPS DICOM file is successfully generated. The file is compliant and can be opened by a third-party DICOM viewer. The POC demonstrates how to store geometric coordinates for an annotation.","A standalone POC solution is created and demonstrated. The approach for saving annotations is validated.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","Third-party DICOM viewer for validation.","Validation with a third-party DICOM tool.","De-risks the annotation saving feature.","Proves the technical feasibility of saving annotations in a standards-compliant, non-destructive way."
"TASK-038","Implement Annotation and Measurement Tools","Develop the UI and ViewModel logic for drawing and managing annotations (arrows, text) and measurements (length, angle) on a WPF canvas overlaid on the DicomViewerControl. Saved annotations using the GSPS service.","Task","Sprint Backlog","High","mid.dev@company.com","product.owner@company.com","2024-12-20","21","5","frontend,wpf,mvvm,dicom","Sprint 4","Deliver the high-performance, GPU-accelerated DICOM viewer, mitigating technical risk via an initial spike on DirectX rendering.","DICOM Core Functionality","EPIC-003","DICOM Management and Printing System","US-DICOM-004","TASK-037,TASK-036","WPF,MVVM,DICOM","High","Medium","User can select an annotation tool and draw on the image. Measurements are displayed in real-world units (mm) by reading DICOM pixel spacing. Clicking a 'Save Annotations' button creates a GSPS file.","All annotation tools are implemented and can be saved as GSPS objects.","2024-10-21T09:00:00Z","2024-10-21T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Manual testing of all annotation tools.","Final major feature of the DICOM viewer.","Allows users to add non-destructive clinical findings and measurements to images."