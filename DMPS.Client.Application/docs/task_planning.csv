Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Core Service Architecture & Setup","Establish the foundational Windows Service project structure, hosting, configuration, and security primitives.","Epic","Backlog","Critical","","pm@project.com","",31,"Architecture,Core","","DICOM Management and Printing System - Background Windows Service","","","","","2024-01-01 09:00","2024-01-01 09:00",""
"Install and Run the Core Background Service","As an Administrator, I want to install the background service application via a standard installer so that the core system is operational and ready to perform its functions.","User Story","Backlog","Must Have","","pm@project.com","",31,"Core,Setup","Sprint 1","Core Service Architecture & Setup","DICOM Management and Printing System - Background Windows Service","","","EPIC-001","","2024-01-01 09:00","2024-01-01 09:00",""
"Scaffold .NET Solution and Project Structure","Create the .NET 8 solution (`DMPS.sln`) and all required projects (`DMPS.Service`, `DMPS.Application`, `DMPS.Domain`, `DMPS.Infrastructure`, `DMPS.Shared`) using the .NET CLI. Configure project references according to the Onion Architecture pattern.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",4.17,"Setup,Architecture","Sprint 1","Core Service Architecture & Setup","DICOM Management and Printing System - Background Windows Service","","Solution file (.sln), Project files (.csproj)","US-001","","2024-01-01 09:00","2024-01-01 09:00",".NET CLI,C#"
"Implement Windows Service Host using Generic Host","In `DMPS.Service`, configure `Program.cs` to use `Host.CreateDefaultBuilder()` and the `UseWindowsService()` extension. Create a simple `IHostedService` that logs startup and shutdown events to validate the hosting mechanism.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",6.33,"Core,Hosting","Sprint 1","Core Service Architecture & Setup","DICOM Management and Printing System - Background Windows Service","","Configured Program.cs, Placeholder IHostedService implementation","US-001","TASK-SVC-001","2024-01-01 09:00","2024-01-01 09:00",".NET Hosting,C#"
"Configure Automatic Service Recovery","Implement the mechanism to configure the Windows Service's recovery options (Restart on all failures) to meet REQ-154. This will likely be handled via the MSIX installer definition or a post-install script.","Task","Backlog","High","devops@project.com","pm@project.com","",4.33,"Deployment,Reliability","Sprint 1","Core Service Architecture & Setup","DICOM Management and Printing System - Background Windows Service","","Installer configuration file (e.g., AppXManifest.xml), Verification script","US-001","TASK-SVC-002","2024-01-01 09:00","2024-01-01 09:00","MSIX,PowerShell"
"Setup DI, Configuration, and Secure Secret Management","Configure the DI container in `Program.cs`. Set up `appsettings.json` for non-sensitive configuration. Implement a service to retrieve secrets (DB passwords, etc.) from the Windows Credential Manager per REQ-152.","Task","Backlog","Critical","security-dev@project.com","pm@project.com","",12,"Core,Security,Configuration","Sprint 1","Core Service Architecture & Setup","DICOM Management and Printing System - Background Windows Service","","DI registration logic in Program.cs, SecureCredentialManager service implementation, Unit tests for configuration and secret retrieval.","US-001","TASK-SVC-002","2024-01-01 09:00","2024-01-01 09:00","Microsoft.Extensions.DependencyInjection,C#,Windows API"
"Unit Test Core Service Setup","Write unit tests for the dependency injection and configuration loading logic. Mock external dependencies like the Windows Credential Manager to ensure service registration logic is correct.","Task","Backlog","High","qa-dev@project.com","pm@project.com","",4.17,"Testing,Unit Test","Sprint 1","Core Service Architecture & Setup","DICOM Management and Printing System - Background Windows Service","","ServiceSetupTests.cs","US-001","TASK-SVC-004","2024-01-01 09:00","2024-01-01 09:00","xUnit,Moq"
"Database & Persistence Layer","Implement the complete database schema using EF Core, including migrations, repositories, and data integrity checks, to provide a reliable persistence foundation for the application.","Epic","Backlog","Critical","","pm@project.com","",61.51,"Database,EF Core,Persistence","","DICOM Management and Printing System - Background Windows Service","","","","","2024-01-01 09:00","2024-01-01 09:00",""
"Establish and Manage the Database Schema","As an Administrator, I want the application's database schema to be automatically created and updated upon deployment, so that I can ensure consistent and reliable installations without manual SQL scripting.","User Story","Backlog","Must Have","","pm@project.com","",42.17,"Database,Migrations","Sprint 1","Database & Persistence Layer","DICOM Management and Printing System - Background Windows Service","","","EPIC-006","","2024-01-01 09:00","2024-01-01 09:00",""
"Define EF Core Entities and DbContext","Create all C# entity classes (`User`, `Study`, `AuditLog`, etc.) based on the provided database design. Implement the `DicomAppDbContext`, configuring all relationships, keys, indexes, and value converters. Pay special attention to configuring PHI columns for `pgcrypto` encryption.","Task","Backlog","Critical","data-dev@project.com","pm@project.com","",14.33,"Database,EF Core,Data Model","Sprint 1","Database & Persistence Layer","DICOM Management and Printing System - Background Windows Service","","All entity classes in `DMPS.Domain`, DicomAppDbContext.cs in `DMPS.Infrastructure`","US-013","TASK-SVC-001","2024-01-01 09:00","2024-01-01 09:00","Entity Framework Core,PostgreSQL,C#"
"Implement Initial EF Core Database Migration","Use the `dotnet ef migrations add` command to generate the initial database migration script based on the `DbContext`. Manually edit the migration to include the `CREATE EXTENSION IF NOT EXISTS pgcrypto;` command.","Task","Backlog","Critical","data-dev@project.com","pm@project.com","",4.5,"Database,EF Core,Migrations","Sprint 1","Database & Persistence Layer","DICOM Management and Printing System - Background Windows Service","","Initial migration file in the `Migrations` folder.","US-013","TASK-SVC-026","2024-01-01 09:00","2024-01-01 09:00","Entity Framework Core CLI"
"Implement Generic and Specific Repositories","Implement a generic repository (`IGenericRepository<T>`, `GenericRepository<T>`) for basic CRUD operations. Implement specific repository interfaces and classes (e.g., `IStudyRepository`, `IUserRepository`) that inherit from the generic one and add methods for more complex, entity-specific queries.","Task","Backlog","Critical","data-dev@project.com","pm@project.com","",12,"Database,EF Core,Architecture","Sprint 1","Database & Persistence Layer","DICOM Management and Printing System - Background Windows Service","","IGenericRepository.cs, GenericRepository.cs, Specific repository interfaces and classes.","US-013","TASK-SVC-026","2024-01-01 09:00","2024-01-01 09:00","Entity Framework Core,C#,LINQ"
"Implement Automatic Migration Application on Startup","Add logic to `Program.cs` that automatically applies any pending EF Core migrations when the service starts. This ensures that the database schema is always in sync with the application code.","Task","Backlog","High","devops@project.com","pm@project.com","",2,"Database,Migrations,Deployment","Sprint 1","Database & Persistence Layer","DICOM Management and Printing System - Background Windows Service","","Updated Program.cs","US-013","TASK-SVC-027","2024-01-01 09:00","2024-01-01 09:00","EF Core,C#"
"Integration Test the Persistence Layer","Write integration tests for the repositories using Testcontainers for PostgreSQL. The tests should cover CRUD operations for key entities and validate that complex queries return the expected results. This also validates the migrations.","Task","Backlog","Critical","qa-dev@project.com","pm@project.com","",10.5,"Testing,Integration Test,Database","Sprint 1","Database & Persistence Layer","DICOM Management and Printing System - Background Windows Service","","UserRepositoryTests.cs, StudyRepositoryTests.cs","US-013","TASK-SVC-027;TASK-SVC-028","2024-01-01 09:00","2024-01-01 09:00","xUnit,Testcontainers,Docker,EF Core"
"Ensure Stored Data Integrity","As an Administrator, I want the system to periodically check for inconsistencies between database records and the file storage, so that I can be alerted to issues like missing files and maintain data integrity.","User Story","Backlog","Could Have","","pm@project.com","",19.34,"Maintenance,Data Integrity","Sprint 1","Database & Persistence Layer","DICOM Management and Printing System - Background Windows Service","","","EPIC-006","TASK-SVC-033","2024-01-01 09:00","2024-01-01 09:00",""
"Implement Data Integrity Check Service","Create a scheduled `IHostedService` that runs daily. The service will query the database for all active `Image` records in batches, and for each record, check if the file exists at the specified `FilePath`.","Task","Backlog","Medium","backend-dev@project.com","pm@project.com","",12,"Maintenance,Data Integrity","Sprint 1","Database & Persistence Layer","DICOM Management and Printing System - Background Windows Service","","DataIntegrityCheckService.cs","US-011","TASK-SVC-002;TASK-SVC-028","2024-01-01 09:00","2024-01-01 09:00",".NET Hosting,EF Core,C#"
"Unit Test Data Integrity Check Logic","Write unit tests for the `DataIntegrityCheckService`. Mock the `IImageRepository` to return test data and mock the file system (`IFileSystem`) to simulate files that exist and files that are missing.","Task","Backlog","Medium","qa-dev@project.com","pm@project.com","",3.17,"Testing,Unit Test","Sprint 1","Database & Persistence Layer","DICOM Management and Printing System - Background Windows Service","","DataIntegrityCheckServiceTests.cs","US-011","TASK-SVC-031","2024-01-01 09:00","2024-01-01 09:00","xUnit,Moq"
"Implement Discrepancy Logging and Reporting","Enhance the `DataIntegrityCheckService` to log any missing file as a WARNING, including the `SopInstanceUid` and the expected path. At the end of its run, it should log an INFO message summarizing the results (e.g., 'Scanned 1,500,000 files. Found 3 discrepancies.').","Task","Backlog","Medium","backend-dev@project.com","pm@project.com","",4.17,"Maintenance,Logging","Sprint 1","Database & Persistence Layer","DICOM Management and Printing System - Background Windows Service","","Updated DataIntegrityCheckService.cs","US-011","TASK-SVC-031;TASK-SVC-033","2024-01-01 09:00","2024-01-01 09:00","Serilog,C#"
"Asynchronous Messaging & Queuing","Implement a resilient, high-performance messaging system using RabbitMQ for all asynchronous background tasks, ensuring reliability through durable queues and dead-lettering.","Epic","Backlog","Critical","","pm@project.com","",46.83,"Messaging,RabbitMQ,Resilience","","DICOM Management and Printing System - Background Windows Service","","","","","2024-01-01 09:00","2024-01-01 09:00",""
"Ensure Resilient Asynchronous Task Processing","As an Administrator, I want the system's background tasks to be processed through a resilient message queue with a dead-lettering mechanism, so that critical operations are not lost during restarts and processing failures can be investigated without halting the entire system.","User Story","Backlog","Must Have","","pm@project.com","",46.83,"Messaging,Resilience","Sprint 1","Asynchronous Messaging & Queuing","DICOM Management and Printing System - Background Windows Service","","","EPIC-002","US-001","2024-01-01 09:00","2024-01-01 09:00",""
"Implement Resilient RabbitMQ Connection Management Service","Create a singleton service (`IRabbitMqConnection`) that manages a single, long-lived connection to the RabbitMQ broker. Implement automatic reconnection logic with exponential backoff using the Polly library.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",12,"Messaging,RabbitMQ,Resilience","Sprint 1","Asynchronous Messaging & Queuing","DICOM Management and Printing System - Background Windows Service","","IRabbitMqConnection.cs, RabbitMqConnection.cs","US-002","TASK-SVC-004","2024-01-01 09:00","2024-01-01 09:00","RabbitMQ.Client,Polly,C#"
"Implement RabbitMQ Topology Declaration Service","Create a startup service (`IHostedService` or a simple service run once at startup) that programmatically declares all required RabbitMQ exchanges, queues, and bindings. This must configure durable queues and the dead-letter exchange (DLX) and dead-letter queue (DLQ) for main processing queues, per REQ-73 and REQ-74.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",6.33,"Messaging,RabbitMQ,Setup","Sprint 1","Asynchronous Messaging & Queuing","DICOM Management and Printing System - Background Windows Service","","RabbitMqTopologyInitializer.cs","US-002","TASK-SVC-006","2024-01-01 09:00","2024-01-01 09:00","RabbitMQ.Client,C#"
"Implement Generic Base Consumer `IHostedService`","Create an abstract generic base class for RabbitMQ consumers that inherits from `IHostedService`. This class will manage the boilerplate logic for channel creation, queue consumption (`EventingBasicConsumer`), message deserialization, error handling, and message lifecycle (ack/nack).","Task","Backlog","High","backend-dev@project.com","pm@project.com","",12,"Messaging,RabbitMQ,Architecture","Sprint 1","Asynchronous Messaging & Queuing","DICOM Management and Printing System - Background Windows Service","","BaseConsumerService.cs","US-002","TASK-SVC-006","2024-01-01 09:00","2024-01-01 09:00","RabbitMQ.Client,.NET Hosting,C#"
"Implement In-Consumer Retry Policy","Integrate the Polly library into the `BaseConsumerService` to implement an in-process retry policy for transient errors before a message is rejected (nack'd).","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6.33,"Messaging,Resilience","Sprint 1","Asynchronous Messaging & Queuing","DICOM Management and Printing System - Background Windows Service","","Updated BaseConsumerService.cs with Polly integration.","US-002","TASK-SVC-008","2024-01-01 09:00","2024-01-01 09:00","Polly,C#"
"Integration Test Resilient Messaging and DLQ","Create a comprehensive integration test suite for the messaging system using Testcontainers. The tests must validate reconnection, durable messaging, and the complete dead-lettering workflow.","Task","Backlog","Critical","qa-dev@project.com","pm@project.com","",10.17,"Testing,Integration Test,RabbitMQ","Sprint 1","Asynchronous Messaging & Queuing","DICOM Management and Printing System - Background Windows Service","","RabbitMqIntegrationTests.cs","US-002","TASK-SVC-006;TASK-SVC-007;TASK-SVC-008;TASK-SVC-009","2024-01-01 09:00","2024-01-01 09:00","xUnit,Testcontainers,Docker,RabbitMQ.Client"
"Security, Compliance & Logging","Implement a robust, cross-cutting framework for security, auditing, and logging that meets HIPAA compliance requirements, including PHI redaction and comprehensive audit trails.","Epic","Backlog","Critical","","pm@project.com","",39.5,"Security,Compliance,Logging,HIPAA","","DICOM Management and Printing System - Background Windows Service","","","","","2024-01-01 09:00","2024-01-01 09:00",""
"Ensure Secure and Compliant System Auditing","As an Administrator, I need a comprehensive and secure audit trail of all significant events, so that I can conduct security investigations, monitor for inappropriate access, and demonstrate HIPAA compliance.","User Story","Backlog","Must Have","","pm@project.com","",39.5,"Security,Auditing","Sprint 1","Security, Compliance & Logging","DICOM Management and Printing System - Background Windows Service","","","EPIC-007","US-001;US-013","2024-01-01 09:00","2024-01-01 09:00",""
"Configure Serilog with Multiple Sinks and Correlation ID","Integrate Serilog into the service host. Configure sinks to write to a rolling text file and the Windows Event Log. Implement a custom middleware (for ASP.NET Core if applicable) or an `AsyncLocal`-based context provider to manage and enrich all log entries with a unique Correlation ID per operation.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",8.33,"Logging,Observability","Sprint 1","Security, Compliance & Logging","DICOM Management and Printing System - Background Windows Service","","Logging configuration in Program.cs, CorrelationIdMiddleware/Enricher","US-012","TASK-SVC-002","2024-01-01 09:00","2024-01-01 09:00","Serilog,C#"
"Implement PHI Redaction Policy for Serilog","Implement a Serilog `IDestructuringPolicy` that inspects objects being logged. If a property name or attribute indicates it is PHI (e.g., 'PatientName', `[PiiData]`), the policy will replace its value with a redacted placeholder (e.g., '***REDACTED***').","Task","Backlog","Critical","security-dev@project.com","pm@project.com","",12.33,"Logging,Security,Compliance,HIPAA","Sprint 1","Security, Compliance & Logging","DICOM Management and Printing System - Background Windows Service","","PhiRedactionPolicy.cs, Unit tests for the redaction policy.","US-012","TASK-SVC-034","2024-01-01 09:00","2024-01-01 09:00","Serilog,C#,Reflection"
"Implement Audit Trail Service and Repository","Create a dedicated service (`IAuditLogService`) and repository (`IAuditLogRepository`). The service provides a simple, injectable method for any part of the application to record a significant event. The repository handles writing the `AuditLog` entity to the database.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",8,"Auditing,Security,Compliance","Sprint 1","Security, Compliance & Logging","DICOM Management and Printing System - Background Windows Service","","IAuditLogService.cs, AuditLogService.cs, Integration tests for the service.","US-012","TASK-SVC-028","2024-01-01 09:00","2024-01-01 09:00","Entity Framework Core,C#"
"Develop User Management Logic in Service","Implement the backend logic for user management tasks that will be triggered by an administrator from the client application. This includes creating users, resetting passwords, and changing roles/status. This task is to create the service shell and methods, to be used by other epics.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6,"User Management,Security","Sprint 2","Security, Compliance & Logging","DICOM Management and Printing System - Background Windows Service","","IUserManagementService.cs, UserManagementService.cs","US-012","TASK-SVC-036","2024-01-01 09:00","2024-01-01 09:00","C#"
"Integrate Auditing into Key Business Logic","Inject `IAuditLogService` into other services (e.g., User Management, Data Retention) and add calls to log events at the appropriate points, such as after a user's role is changed or after an old study is purged.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",10.17,"Auditing,Integration","Sprint 2","Security, Compliance & Logging","DICOM Management and Printing System - Background Windows Service","","Updated service classes with audit logging calls.","US-012","TASK-SVC-036;TASK-SVC-038;TASK-SVC-041","2024-01-01 09:00","2024-01-01 09:00","C#"
"DICOM C-STORE SCP Implementation","Develop a high-performance, reliable DICOM C-STORE Service Class Provider (SCP) to receive and process studies from external medical imaging modalities.","Epic","Backlog","Critical","","pm@project.com","",49.33,"DICOM,Networking,Data Ingestion","","DICOM Management and Printing System - Background Windows Service","","","","","2024-01-01 09:00","2024-01-01 09:00",""
"Receive DICOM Studies from Medical Equipment","As a System User, I want to send a DICOM study from my medical equipment to the application, so that it is reliably received and stored for local viewing and printing.","User Story","Backlog","Must Have","","pm@project.com","",34.5,"DICOM,Data Ingestion","Sprint 2","DICOM C-STORE SCP Implementation","DICOM Management and Printing System - Background Windows Service","","","EPIC-003","US-001;US-002;US-013","2024-01-01 09:00","2024-01-01 09:00",""
"Implement DICOM C-STORE SCP Hosted Service","Create an `IHostedService` (`DicomScpService`) that starts and stops a `fo-dicom` server instance. The server should be configured to listen on a port specified in `appsettings.json`. Implement the `IDicomCStoreProvider` interface to handle incoming C-STORE requests.","Task","Backlog","Critical","dicom-specialist@project.com","pm@project.com","",12,"DICOM,Networking","Sprint 2","DICOM C-STORE SCP Implementation","DICOM Management and Printing System - Background Windows Service","","DicomScpService.cs, DicomCStoreProvider.cs","US-003","TASK-SVC-002","2024-01-01 09:00","2024-01-01 09:00","fo-dicom,.NET Hosting,DICOM,C#"
"Implement Decoupled Message Publication for Received Studies","Within the `DicomCStoreProvider`, after a study is received, extract essential metadata (PatientID, StudyUID, etc.) and publish a `DicomStudyReceivedEvent` message to a dedicated RabbitMQ queue. The C-STORE success response must be sent before this message is processed.","Task","Backlog","Critical","dicom-specialist@project.com","pm@project.com","",8.33,"DICOM,Messaging,Architecture","Sprint 2","DICOM C-STORE SCP Implementation","DICOM Management and Printing System - Background Windows Service","","Updated DicomCStoreProvider.cs, DicomStudyReceivedEvent.cs (message contract)","US-003","TASK-SVC-011;TASK-SVC-006","2024-01-01 09:00","2024-01-01 09:00","fo-dicom,RabbitMQ.Client,C#"
"Implement DICOM Metadata Database Writer Consumer","Create a dedicated consumer (`DicomMetadataWriterConsumer`) that subscribes to the `dicom_store_queue`. On receiving a message, it will map the metadata to EF Core entities and save them to the database within a single transaction. This consumer must be idempotent.","Task","Backlog","Critical","data-dev@project.com","pm@project.com","",10.67,"DICOM,Persistence,Messaging","Sprint 2","DICOM C-STORE SCP Implementation","DICOM Management and Printing System - Background Windows Service","","DicomMetadataWriterConsumer.cs","US-003","TASK-SVC-008;TASK-SVC-012;TASK-SVC-026","2024-01-01 09:00","2024-01-01 09:00","RabbitMQ.Client,Entity Framework Core,C#"
"Integration Test Full C-STORE to Database Pipeline","Create an end-to-end integration test that uses a test SCU to send a DICOM study and verifies that the correct records are ultimately created in the PostgreSQL database. This test will use Testcontainers for both RabbitMQ and PostgreSQL.","Task","Backlog","Critical","qa-dev@project.com","pm@project.com","",12,"Testing,Integration Test,DICOM","Sprint 2","DICOM C-STORE SCP Implementation","DICOM Management and Printing System - Background Windows Service","","DicomIngestionPipelineTests.cs","US-003","TASK-SVC-013","2024-01-01 09:00","2024-01-01 09:00","xUnit,Testcontainers,Docker,fo-dicom"
"Configure Automated Routing for Incoming DICOM Studies","As an Administrator, I want to create rules that automatically save incoming DICOM studies to specific folders based on their origin or modality, so that I can keep our storage organized without manual intervention.","User Story","Backlog","Should Have","","pm@project.com","",14.83,"DICOM,Routing","Sprint 2","DICOM C-STORE SCP Implementation","DICOM Management and Printing System - Background Windows Service","","","EPIC-003","US-003","2024-01-01 09:00","2024-01-01 09:00",""
"Develop Auto-Routing Rule Evaluation Service","Create a service (`IAutoRoutingService`) that is responsible for loading all active auto-routing rules from the database. It will provide a method that takes DICOM metadata as input and returns the correct destination file path.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",8.33,"Business Logic,DICOM","Sprint 2","DICOM C-STORE SCP Implementation","DICOM Management and Printing System - Background Windows Service","","IAutoRoutingService.cs, AutoRoutingService.cs, Unit tests for the rule evaluation logic.","US-004","TASK-SVC-026","2024-01-01 09:00","2024-01-01 09:00","C#,Entity Framework Core"
"Integrate Auto-Routing into C-STORE Provider","Inject the `IAutoRoutingService` into the `DicomCStoreProvider`. After a DICOM file is received, call the routing service to determine its destination. The determined path should be used to save the file and should be included in the message published to RabbitMQ.","Task","Backlog","High","dicom-specialist@project.com","pm@project.com","",6.5,"Integration,DICOM","Sprint 2","DICOM C-STORE SCP Implementation","DICOM Management and Printing System - Background Windows Service","","Updated DicomCStoreProvider.cs","US-004","TASK-SVC-011;TASK-SVC-015","2024-01-01 09:00","2024-01-01 09:00","C#,fo-dicom"
"Background Job Processing","Implement the background consumers for handling long-running jobs like physical printing and PDF generation, ensuring they are processed asynchronously and reliably.","Epic","Backlog","Critical","","pm@project.com","",33.17,"Asynchronous,Jobs,Printing,PDF","","DICOM Management and Printing System - Background Windows Service","","","","","2024-01-01 09:00","2024-01-01 09:00",""
"Process Physical Print Jobs Asynchronously","As a Technician, I want to submit a print job from the client application and have it processed in the background, so that the client application remains responsive and I can continue with other tasks while printing occurs.","User Story","Backlog","Must Have","","pm@project.com","",19.33,"Printing,Jobs","Sprint 2","Background Job Processing","DICOM Management and Printing System - Background Windows Service","","","EPIC-004","US-002","2024-01-01 09:00","2024-01-01 09:00",""
"Implement Physical Print Job Consumer","Create a consumer (`PrintJobConsumer`) that subscribes to the `print_job_queue`. The consumer will deserialize the job payload, which contains layout information, image references, and the target printer name.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",6,"Printing,Messaging","Sprint 2","Background Job Processing","DICOM Management and Printing System - Background Windows Service","","PrintJobConsumer.cs, PrintJobDto.cs (message contract)","US-005","TASK-SVC-008","2024-01-01 09:00","2024-01-01 09:00","RabbitMQ.Client,C#"
"Implement Print Document Generation and Spooling Logic","Within the `PrintJobConsumer`, implement the logic to fetch DICOM images, render them onto a `PrintDocument` object according to the layout specifications, and submit this document to the Windows Print API for the target printer.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",12.33,"Printing,Integration","Sprint 2","Background Job Processing","DICOM Management and Printing System - Background Windows Service","","PrintSpoolingService.cs, Updated PrintJobConsumer.cs","US-005","TASK-SVC-017","2024-01-01 09:00","2024-01-01 09:00","Windows Print API,System.Drawing,C#"
"Generate PDF Exports Asynchronously","As a Technician, I want to export a print layout as a PDF file in the background, so that I can create a digital copy for sharing or archiving without freezing the user interface.","User Story","Backlog","Should Have","","pm@project.com","",13.84,"PDF,Jobs","Sprint 2","Background Job Processing","DICOM Management and Printing System - Background Windows Service","","","EPIC-004","US-002","2024-01-01 09:00","2024-01-01 09:00",""
"Implement PDF Generation Consumer","Create a consumer (`PdfGenerationConsumer`) for the `pdf_generation_queue`. It will deserialize the job payload, which includes layout details, image references, and the target output file path.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6,"PDF,Messaging","Sprint 2","Background Job Processing","DICOM Management and Printing System - Background Windows Service","","PdfGenerationConsumer.cs, PdfJobDto.cs (message contract)","US-006","TASK-SVC-008","2024-01-01 09:00","2024-01-01 09:00","RabbitMQ.Client,C#"
"Implement PDF Document Generation using QuestPDF","Within the `PdfGenerationConsumer`, use the QuestPDF library to render the document based on the layout in the message. Fetch DICOM images, render them, and apply any overlays or branding. Generate the final PDF byte stream, ensuring it meets PDF/A-3 compliance and encryption requirements (REQ-97).","Task","Backlog","High","backend-dev@project.com","pm@project.com","",7.84,"PDF,Integration","Sprint 2","Background Job Processing","DICOM Management and Printing System - Background Windows Service","","PdfGeneratorService.cs, Updated PdfGenerationConsumer.cs","US-006","TASK-SVC-019","2024-01-01 09:00","2024-01-01 09:00","QuestPDF,C#"
"Synchronous IPC & Health Monitoring","Develop mechanisms for real-time client-service communication (Named Pipes) and implement a robust health monitoring and alerting system for proactive system management.","Epic","Backlog","Critical","","pm@project.com","",35.84,"Monitoring,IPC,Health Check","","DICOM Management and Printing System - Background Windows Service","","","","","2024-01-01 09:00","2024-01-01 09:00",""
"Monitor Real-Time System Health","As an Administrator, I want to view a real-time health dashboard for the background service, so that I can proactively identify and troubleshoot issues with its dependencies like the database, message queue, and storage.","User Story","Backlog","Must Have","","pm@project.com","",25.67,"Monitoring,Health Check","Sprint 2","Synchronous IPC & Health Monitoring","DICOM Management and Printing System - Background Windows Service","","","EPIC-005","US-001","2024-01-01 09:00","2024-01-01 09:00",""
"Implement Named Pipes Server for Synchronous IPC","Create an `IHostedService` that runs a `NamedPipeServerStream`. This server will listen for simple, synchronous text-based requests from the client (e.g., 'PING', 'GET_HEALTH') and return immediate, simple text-based responses (e.g., 'PONG', JSON health summary). This is for REQ-75.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",8.67,"IPC,Networking","Sprint 2","Synchronous IPC & Health Monitoring","DICOM Management and Printing System - Background Windows Service","","NamedPipeServerService.cs","US-007","TASK-SVC-002","2024-01-01 09:00","2024-01-01 09:00","System.IO.Pipes,.NET Hosting,C#"
"Implement System Health Probe Service","Create a timed `IHostedService` that runs every 60 seconds to check the status of dependencies: PostgreSQL (try to connect), RabbitMQ (check connection status and query management API for queue depths), and disk space (using `DriveInfo`). The results are stored in a thread-safe singleton cache.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",10.67,"Monitoring,Health Check","Sprint 2","Synchronous IPC & Health Monitoring","DICOM Management and Printing System - Background Windows Service","","SystemHealthProbeService.cs, HealthStatusCache.cs","US-007","TASK-SVC-002","2024-01-01 09:00","2024-01-01 09:00",".NET Hosting,Npgsql,RabbitMQ.Client,HttpClient"
"Expose Health Status via Named Pipe Endpoint","Enhance the `NamedPipeServerService` to handle a 'GET_HEALTH' request. When this request is received, it should retrieve the latest status from the `HealthStatusCache` and return it as a serialized JSON string.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6.33,"Monitoring,IPC","Sprint 2","Synchronous IPC & Health Monitoring","DICOM Management and Printing System - Background Windows Service","","Updated NamedPipeServerService.cs","US-007","TASK-SVC-021;TASK-SVC-022","2024-01-01 09:00","2024-01-01 09:00","C#,System.IO.Pipes"
"Receive Critical System Failure Alerts","As an Administrator, I want to receive an email alert when a critical system error occurs or a health metric crosses a critical threshold, so that I can take immediate action to resolve the issue.","User Story","Backlog","Should Have","","pm@project.com","",10.17,"Alerting,Monitoring","Sprint 2","Synchronous IPC & Health Monitoring","DICOM Management and Printing System - Background Windows Service","","","EPIC-005","US-007","2024-01-01 09:00","2024-01-01 09:00",""
"Implement Email Alerting Service","Create a service (`IAlertingService`) that can send an email using SMTP. The SMTP server settings (host, port, credentials) must be configurable via the secure configuration provider.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6.33,"Alerting,Notification","Sprint 2","Synchronous IPC & Health Monitoring","DICOM Management and Printing System - Background Windows Service","","IAlertingService.cs, EmailAlertingService.cs","US-008","TASK-SVC-004","2024-01-01 09:00","2024-01-01 09:00","C#,SMTP,MailKit"
"Integrate Alerting with Health Probe and DLQ Events","Modify the `SystemHealthProbeService` to call the `IAlertingService` when a metric (disk space, DLQ count) crosses a configurable critical threshold. Modify the `BaseConsumerService` to trigger an alert when a message is nack'd for the final time.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",3.84,"Alerting,Monitoring,Integration","Sprint 2","Synchronous IPC & Health Monitoring","DICOM Management and Printing System - Background Windows Service","","Updated SystemHealthProbeService.cs, Updated BaseConsumerService.cs","US-008","TASK-SVC-022;TASK-SVC-024;TASK-SVC-008","2024-01-01 09:00","2024-01-01 09:00","C#"
"System Administration & Maintenance","Implement core administrative and maintenance features, including data retention policies and automated database backups, to ensure long-term system health and compliance.","Epic","Backlog","High","","pm@project.com","",39.33,"Maintenance,Administration,Backup","","DICOM Management and Printing System - Background Windows Service","","","","","2024-01-01 09:00","2024-01-01 09:00",""
"Configure Automated Data Retention Policies","As an Administrator, I want to configure a policy to automatically purge old studies from the system, so that I can manage storage space and comply with data lifecycle regulations without manual cleanup.","User Story","Backlog","Should Have","","pm@project.com","",23.33,"Data Lifecycle,Maintenance","Sprint 2","System Administration & Maintenance","DICOM Management and Printing System - Background Windows Service","","","EPIC-008","US-012;US-013","2024-01-01 09:00","2024-01-01 09:00",""
"Implement Data Retention Hosted Service","Create a scheduled `IHostedService` that runs daily. It will read the data retention period from the system settings. It will then query the database for all studies older than this period.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",8.33,"Maintenance,Data Lifecycle","Sprint 2","System Administration & Maintenance","DICOM Management and Printing System - Background Windows Service","","DataRetentionService.cs","US-009","TASK-SVC-002;TASK-SVC-028","2024-01-01 09:00","2024-01-01 09:00",".NET Hosting,EF Core,C#"
"Implement Permanent Deletion and Auditing Logic","Within the `DataRetentionService`, for each study identified for deletion, perform the following in a transaction: 1) Delete the associated DICOM files from the file system. 2) Delete the Study and all its child records from the database. 3) Log the auto-purge action to the audit trail.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",12.67,"Maintenance,Data Lifecycle,High Risk","Sprint 2","System Administration & Maintenance","DICOM Management and Printing System - Background Windows Service","","Updated DataRetentionService.cs","US-009","TASK-SVC-039;TASK-SVC-036","2024-01-01 09:00","2024-01-01 09:00","EF Core,C#,System.IO"
"Implement System Setting for Data Retention Period","The `DataRetentionService` must read its configuration (e.g., retention period in days) from the `SystemSettings` table in the database. This allows an admin to configure it from the UI.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",2.5,"Configuration","Sprint 2","System Administration & Maintenance","DICOM Management and Printing System - Background Windows Service","","Updated DataRetentionService.cs","US-009","TASK-SVC-039","2024-01-01 09:00","2024-01-01 09:00","C#,EF Core"
"Configure and Automate Database Backups","As an Administrator, I want to schedule and configure daily database backups to a secure location, so that I can ensure business continuity and recover system data in the event of a failure.","User Story","Backlog","Must Have","","pm@project.com","",16,"Backup,Maintenance","Sprint 2","System Administration & Maintenance","DICOM Management and Printing System - Background Windows Service","","","EPIC-008","US-001","2024-01-01 09:00","2024-01-01 09:00",""
"Implement Database Backup Hosted Service","Create a scheduled `IHostedService` that reads the backup schedule and target path from system settings. This service will be responsible for orchestrating the backup process.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",6.33,"Maintenance,Backup","Sprint 2","System Administration & Maintenance","DICOM Management and Printing System - Background Windows Service","","DatabaseBackupService.cs","US-010","TASK-SVC-002;TASK-SVC-028","2024-01-01 09:00","2024-01-01 09:00",".NET Hosting,C#"
"Implement `pg_dump` Execution Logic","Within the `DatabaseBackupService`, implement the logic to invoke the `pg_dump.exe` command-line utility as a separate process using `System.Diagnostics.Process`. Capture stdout/stderr to log the results and check the exit code to determine success or failure.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",9.17,"Maintenance,Backup,Integration","Sprint 2","System Administration & Maintenance","DICOM Management and Printing System - Background Windows Service","","Updated DatabaseBackupService.cs","US-010","TASK-SVC-042","2024-01-01 09:00","2024-01-01 09:00","C#,System.Diagnostics.Process"
"Implement System Settings for Backup Configuration","Ensure that settings for `BackupScheduleTime` and `BackupStoragePath` are defined and can be stored and retrieved from the `SystemSettings` table, allowing an admin to configure them.","Task","Backlog","Critical","backend-dev@project.com","pm@project.com","",2.5,"Configuration","Sprint 2","System Administration & Maintenance","DICOM Management and Printing System - Background Windows Service","","Updated DatabaseBackupService.cs","US-010","TASK-SVC-042","2024-01-01 09:00","2024-01-01 09:00","C#,EF Core"