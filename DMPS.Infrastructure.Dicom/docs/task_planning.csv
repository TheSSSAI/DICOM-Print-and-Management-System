Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Create VS Solution and Project Scaffolding","Set up the initial Visual Studio solution and create all required projects as defined in WI-001: Client.Wpf, Service.WindowsService, Application, Domain, Infrastructure. Configure project references and target .NET 8.","Task","Backlog","Critical","dev@project.com","pm@project.com","",4,"Setup,Core","Sprint 1","EPIC-001: Core Application & Service Framework","DICOM Management & Printing System","","This is the first task for all development.","N/A","",2024-01-01 09:00,2024-01-01 09:00,".NET SDK,Visual Studio"
"Implement Generic Host and DI for WPF Client","Refactor `App.xaml.cs` to use `Microsoft.Extensions.Hosting`. Create a Host builder, configure a basic DI container, register a placeholder `MainWindow` and `MainViewModel`, and start the host in `OnStartup`.","Task","Backlog","Critical","dev@project.com","pm@project.com","",8.3,"WPF,DI,Core","Sprint 1","EPIC-001: Core Application & Service Framework","DICOM Management & Printing System","","","N/A","TASK-001",2024-01-01 09:00,2024-01-01 09:00,"WPF,Microsoft.Extensions.Hosting,DI"
"Implement Generic Host for Windows Service","Configure `Program.cs` in the service project to use `Microsoft.Extensions.Hosting` and the `.UseWindowsService()` extension. Create and register a placeholder `IHostedService` to verify the service lifecycle.","Task","Backlog","Critical","dev@project.com","pm@project.com","",8,"Windows Service,DI,Core","Sprint 1","EPIC-001: Core Application & Service Framework","DICOM Management & Printing System","","","N/A","TASK-001",2024-01-01 09:00,2024-01-01 09:00,"Windows Services,Microsoft.Extensions.Hosting,DI"
"Implement Serilog PHI Redaction Enricher","Create a custom Serilog `ILogEventEnricher` that inspects log event properties and message templates. It will use a set of configurable rules (e.g., regex for Patient ID, property names like 'PatientName') to find and replace PHI values with '[REDACTED]'.","Task","Backlog","Critical","security@project.com","pm@project.com","",8.3,"Security,Logging,HIPAA","Sprint 1","EPIC-001: Core Application & Service Framework","DICOM Management & Printing System","","Failure to correctly redact data is a major compliance violation.","US-022","",2024-01-01 09:00,2024-01-01 09:00,"Serilog,C#,Regular Expressions"
"Write Unit Tests for PHI Redaction Enricher","Create a comprehensive suite of unit tests for the `PhiRedactionEnricher`. Tests should cover various scenarios: simple property redaction, redaction within formatted messages, edge cases with mixed PHI, and cases where no redaction should occur.","Task","Backlog","Critical","qa@project.com","pm@project.com","",6.3,"Security,Testing","Sprint 1","EPIC-001: Core Application & Service Framework","DICOM Management & Printing System","","","US-022","TASK-010",2024-01-01 09:00,2024-01-01 09:00,"xUnit,Serilog"
"Research and select library for Windows Credential Manager access","Investigate and select the best approach for accessing the Windows Credential Manager. Options include raw P/Invoke or a vetted third-party library. Create a small proof-of-concept.","Task","Backlog","Critical","security@project.com","pm@project.com","",6.3,"Security,Infrastructure,Research","Sprint 1","EPIC-001: Core Application & Service Framework","DICOM Management & Printing System","","The choice of library and implementation pattern has significant security implications.","US-020","",2024-01-01 09:00,2024-01-01 09:00,"C#,Windows API,Security Research"
"Define all POCO Entities for the DicomAppDB","Create all C# classes that map to the tables in the 'DicomAppDB Entity Relationship Diagram'. This includes `User`, `Role`, `PasswordHistory`, `Patient`, `Study`, `Series`, `Image`, `PresentationState`, etc. Add basic properties and navigation properties.","Task","Backlog","Critical","db-dev@project.com","pm@project.com","",12,"Database,EF Core,Model","Sprint 1","EPIC-005: Data Persistence & Management","DICOM Management & Printing System","","This is the first step in building the data layer.","N/A","",2024-01-01 09:00,2024-01-01 09:00,"C#,Entity Framework Core"
"Implement ApplicationDbContext with Fluent API configuration","Create the `ApplicationDbContext` class. In `OnModelCreating`, use the Fluent API to configure all entity relationships, define unique constraints (UKs), indexes, and table names. Do not configure pgcrypto yet.","Task","Backlog","Critical","db-dev@project.com","pm@project.com","",12,"Database,EF Core,Configuration","Sprint 1","EPIC-005: Data Persistence & Management","DICOM Management & Printing System","","","N/A","TASK-047",2024-01-01 09:00,2024-01-01 09:00,"Entity Framework Core,Fluent API"
"Implement Generic Repository Pattern (Interfaces and Base Class)","Define a generic `IRepository<T>` interface with common data access methods (`GetByIdAsync`, `ListAllAsync`, `AddAsync`, `UpdateAsync`, `DeleteAsync`). Create a generic `EfRepository<T>` base class that implements this interface using the `ApplicationDbContext`.","Task","Backlog","Critical","db-dev@project.com","pm@project.com","",8,"Database,EF Core,Architecture","Sprint 1","EPIC-005: Data Persistence & Management","DICOM Management & Printing System","","","N/A","TASK-048",2024-01-01 09:00,2024-01-01 09:00,"C#,Generics,Design Patterns,Entity Framework Core"
"Implement Specific Repositories (e.g., IStudyRepository)","Create specific repository interfaces and implementations for key aggregates, such as `IStudyRepository` and `IUserRepository`. These will inherit from the generic base repository and can include custom query methods not found in the generic interface (e.g., `GetUserByUsernameAsync`).","Task","Backlog","Critical","db-dev@project.com","pm@project.com","",8.3,"Database,EF Core,Repository","Sprint 1","EPIC-005: Data Persistence & Management","DICOM Management & Printing System","","","N/A","TASK-052",2024-01-01 09:00,2024-01-01 09:00,"C#,Entity Framework Core"
"Write Integration Tests for Repositories","Create integration tests for the specific repository methods. The tests should connect to a real test database, perform the repository operation (e.g., create a user, then fetch them by username), and assert the correctness of the result.","Task","Backlog","Critical","qa@project.com","pm@project.com","",12,"Testing,Integration,Database","Sprint 1","EPIC-005: Data Persistence & Management","DICOM Management & Printing System","","","N/A","TASK-053",2024-01-01 09:00,2024-01-01 09:00,"xUnit,Entity Framework Core,Testcontainers"
"Implement BCrypt password hashing and verification utility","Create a static utility class or a service that wraps a well-known BCrypt library (e.g., BCrypt.Net). It should provide two methods: `HashPassword(string password)` and `VerifyPassword(string password, string hash)`.","Task","Backlog","Critical","security@project.com","pm@project.com","",6.3,"Security,BCrypt","Sprint 1","EPIC-003: User Authentication & Authorization","DICOM Management & Printing System","","Password hashing must be implemented correctly to be secure.","US-001","",2024-01-01 09:00,2024-01-01 09:00,"C#,BCrypt,Security"
"Implement RabbitMQ Connection and Channel Management Service","Create a singleton service responsible for establishing and maintaining a single connection to the RabbitMQ broker. This service should handle automatic recovery from network failures and provide a mechanism for creating channels (models).","Task","Backlog","Critical","dev@project.com","pm@project.com","",10.3,"IPC,RabbitMQ,Infrastructure","Sprint 1","EPIC-002: Inter-Process Communication (IPC) Backbone","DICOM Management & Printing System","","Implementing robust connection recovery is complex.","US-021","TASK-002;TASK-003",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,C#"
"Implement a generic RabbitMQ Publisher Service for the Client","Create a service in the client application that can publish any serializable command object to a specified exchange. This service will use the connection manager, get a channel, serialize the object to JSON, and publish it. It must set the 'persistent' property on critical messages.","Task","Backlog","Critical","dev@project.com","pm@project.com","",6.3,"IPC,RabbitMQ","Sprint 1","EPIC-002: Inter-Process Communication (IPC) Backbone","DICOM Management & Printing System","","","US-021","TASK-017",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,C#,Newtonsoft.Json"
"Implement a base RabbitMQ Consumer Hosted Service","Create an abstract base class or generic `IHostedService` in the Windows Service for consuming messages. This base class will handle the boilerplate of connecting, subscribing to a queue, and dispatching messages to a handler. It should manage the consumer lifecycle.","Task","Backlog","Critical","dev@project.com","pm@project.com","",12,"IPC,RabbitMQ,Framework","Sprint 1","EPIC-002: Inter-Process Communication (IPC) Backbone","DICOM Management & Printing System","","Designing a reusable base class requires more foresight than a one-off implementation.","US-021","TASK-017",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,C#,Microsoft.Extensions.Hosting"
"Implement Topology Declaration for Queues, Exchanges, DLX, and DLQ","Create a service or startup task that declares all necessary RabbitMQ topology. This includes defining the main exchange, the primary processing queue (as durable), a dead-letter exchange (DLX), and a dead-letter queue (DLQ). The primary queue must be configured to route failed messages to the DLX.","Task","Backlog","Critical","dev@project.com","pm@project.com","",8.7,"IPC,RabbitMQ,Configuration","Sprint 1","EPIC-002: Inter-Process Communication (IPC) Backbone","DICOM Management & Printing System","","","US-021","TASK-017",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,C#"
"Implement Named Pipe Server in Windows Service","Create a hosted service that runs a background thread. This thread will create a `NamedPipeServerStream`, wait for a client connection, read a simple string request (e.g., 'PING'), and write a string response (e.g., 'PONG').","Task","Backlog","Critical","dev@project.com","pm@project.com","",10.3,"IPC,Named Pipes","Sprint 1","EPIC-002: Inter-Process Communication (IPC) Backbone","DICOM Management & Printing System","","Named pipes require careful handling of streams and threading.","US-005","TASK-003",2024-01-01 09:00,2024-01-01 09:00,"C#,System.IO.Pipes,Multithreading"
"Implement Named Pipe Client Service in WPF App","Create a service for the WPF client that encapsulates the logic for connecting to the named pipe. It should have an async method like `CheckServiceStatusAsync` that connects, sends 'PING', awaits 'PONG', and returns a status. It must handle `TimeoutException` gracefully.","Task","Backlog","Critical","dev@project.com","pm@project.com","",8.7,"IPC,Named Pipes","Sprint 1","EPIC-002: Inter-Process Communication (IPC) Backbone","DICOM Management & Printing System","","","US-005","TASK-002",2024-01-01 09:00,2024-01-01 09:00,"C#,System.IO.Pipes,Async/Await"
"Integrate Serilog and Redaction into Client and Service","Configure the Serilog logger in the `Main` method of both the WPF client and Windows Service. Set up sinks for a rolling file and the Windows Event Log. Add the custom `PhiRedactionEnricher` to the logger configuration.","Task","Backlog","Critical","dev@project.com","pm@project.com","",9.3,"Logging,Configuration","Sprint 1","EPIC-001: Core Application & Service Framework","DICOM Management & Printing System","","","US-022","TASK-002;TASK-003;TASK-011",2024-01-01 09:00,2024-01-01 09:00,"Serilog,Microsoft.Extensions.Hosting"
"Create initial EF Core Migration and apply to database","Use the .NET EF tools (`dotnet ef migrations add InitialCreate`) to generate the first migration based on the configured `DbContext`. Review the generated migration script for correctness. Apply the migration to a development PostgreSQL database (`dotnet ef database update`).","Task","Backlog","Critical","db-dev@project.com","pm@project.com","",4.3,"Database,EF Core,Migrations","Sprint 1","EPIC-005: Data Persistence & Management","DICOM Management & Printing System","","","N/A","TASK-048",2024-01-01 09:00,2024-01-01 09:00,"Entity Framework Core,PostgreSQL"
"Write Integration Tests for Named Pipe Communication","Create an integration test that programmatically starts a pipe server and a pipe client to verify the end-to-end communication. Test the 'happy path' (successful ping/pong) and the failure path (client times out when server is not present).","Task","Backlog","Critical","qa@project.com","pm@project.com","",8.3,"Testing,Integration,IPC","Sprint 1","EPIC-002: Inter-Process Communication (IPC) Backbone","DICOM Management & Printing System","","","US-005","TASK-026;TASK-027",2024-01-01 09:00,2024-01-01 09:00,"xUnit,C#"
"Implement CredentialManagerService for storing/retrieving secrets","Create a service with `StoreSecretAsync` and `RetrieveSecretAsync` methods that wrap the chosen library or P/Invoke calls to interact with the Windows Credential Manager.","Task","Backlog","Critical","security@project.com","pm@project.com","",8.7,"Security,Infrastructure","Sprint 2","EPIC-001: Core Application & Service Framework","DICOM Management & Printing System","","","US-020","TASK-013",2024-01-01 09:00,2024-01-01 09:00,"C#,Async/Await,Windows Credential Manager API"
"Write Unit Tests for CredentialManagerService","Create unit tests for the `CredentialManagerService`, mocking the underlying API to test the service's logic for handling success, failure, and not-found scenarios.","Task","Backlog","Critical","qa@project.com","pm@project.com","",6,"Security,Testing","Sprint 2","EPIC-001: Core Application & Service Framework","DICOM Management & Printing System","","","US-020","TASK-014",2024-01-01 09:00,2024-01-01 09:00,"xUnit,Moq"
"Integrate CredentialManagerService into application configuration","Modify the Host builder configuration in both the WPF client and Windows Service to use the `CredentialManagerService` to fetch secrets (like the DB connection string password) and build the final configuration at runtime.","Task","Backlog","Critical","security@project.com","pm@project.com","",6.5,"Security,Configuration","Sprint 2","EPIC-001: Core Application & Service Framework","DICOM Management & Printing System","","","US-020","TASK-002;TASK-003;TASK-014",2024-01-01 09:00,2024-01-01 09:00,"Microsoft.Extensions.Hosting,Microsoft.Extensions.Configuration,DI"
"Write Integration Test for DLQ Mechanism","Create an integration test that simulates a 'poison message'. The test will publish a message, have a test consumer repeatedly fail to process it (NACK with requeue=false), and then assert that the message eventually appears in the configured Dead-Letter Queue.","Task","Backlog","Critical","qa@project.com","pm@project.com","",12,"Testing,Integration,RabbitMQ","Sprint 2","EPIC-002: Inter-Process Communication (IPC) Backbone","DICOM Management & Printing System","","Testing dead-lettering requires careful orchestration.","US-021","TASK-020",2024-01-01 09:00,2024-01-01 09:00,"xUnit,RabbitMQ,Testcontainers"
"Develop LoginView in WPF with XAML","Create the user interface for the login screen. This includes a text box for the username, a `PasswordBox` for the password, a 'Login' button, and a text block for displaying error messages. Use the Material Design in XAML toolkit for styling.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",6,"UI,WPF,Authentication","Sprint 2","EPIC-003: User Authentication & Authorization","DICOM Management & Printing System","","","US-001","TASK-002",2024-01-01 09:00,2024-01-01 09:00,"WPF,XAML,Material Design in XAML"
"Implement LoginViewModel with validation and commands","Create the ViewModel for the login screen. Implement properties for Username and Password, an `ICommand` for the login action, and properties for displaying error messages. Use an MVVM framework for command and property change notification.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",8,"ViewModel,WPF,Authentication","Sprint 2","EPIC-003: User Authentication & Authorization","DICOM Management & Printing System","","","US-001","TASK-029",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#"
"Implement AuthenticationService","Create the `AuthenticationService` that uses the `IUserRepository` to fetch a user by username and the password hasher to verify the provided password. It should return a result object indicating success/failure and, on success, the user's details including their role.","Task","Backlog","Critical","dev@project.com","pm@project.com","",8.3,"Authentication,Service","Sprint 2","EPIC-003: User Authentication & Authorization","DICOM Management & Printing System","","","US-001","TASK-031;TASK-054",2024-01-01 09:00,2024-01-01 09:00,"C#,DI"
"Write Integration Test for Authentication Flow","Create an integration test that wires up the `LoginViewModel`, `AuthenticationService`, a real `PasswordHasher`, and a repository connected to a test database. The test will simulate a user login and verify the entire flow for success, failure (bad password), and non-existent user cases.","Task","Backlog","Critical","qa@project.com","pm@project.com","",12,"Testing,Integration,Authentication","Sprint 2","EPIC-003: User Authentication & Authorization","DICOM Management & Printing System","","","US-001","TASK-030;TASK-032",2024-01-01 09:00,2024-01-01 09:00,"xUnit,Entity Framework Core,Testcontainers"
"Implement client-side Authorization Service and Session Context","Create a singleton service `IUserSession` that holds the current logged-in user's details, including their role. Create an `IAuthorizationService` that can check if the current user has a specific permission (e.g., `CanAccessAdminPanel`).","Task","Backlog","Critical","security@project.com","pm@project.com","",8.3,"Security,Authorization,RBAC","Sprint 2","EPIC-003: User Authentication & Authorization","DICOM Management & Printing System","","This service is for UI convenience; backend checks are still mandatory.","US-002","TASK-032",2024-01-01 09:00,2024-01-01 09:00,"C#,DI"
"Implement WPF Converters/Markup Extensions for Role-based UI visibility","Create a reusable WPF `IValueConverter` or `MarkupExtension` that takes a permission name (e.g., 'AdminOnly') and returns `Visibility.Visible` or `Visibility.Collapsed` based on the current user's role by calling the `IAuthorizationService`.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",8.3,"UI,WPF,Authorization","Sprint 2","EPIC-003: User Authentication & Authorization","DICOM Management & Printing System","","","US-002","TASK-034",2024-01-01 09:00,2024-01-01 09:00,"WPF,XAML,C#"
"Apply role-based controls to Main Application UI","Integrate the role-based visibility converter into the main application shell and other key views. For example, wrap the 'Administration' tab/button in a control whose visibility is bound through the new converter.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",6,"UI,WPF,Authorization","Sprint 2","EPIC-003: User Authentication & Authorization","DICOM Management & Printing System","","","US-002","TASK-035",2024-01-01 09:00,2024-01-01 09:00,"WPF,XAML"
"Implement Backend Authorization Checks in Application Services","In the Application layer services, before executing any security-sensitive logic (e.g., `CreateUser`, `DeletePacsConfiguration`), add a check against the current user's role. If the check fails, throw a custom `UnauthorizedAccessException`.","Task","Backlog","Critical","security@project.com","pm@project.com","",10,"Security,Authorization,RBAC,Backend","Sprint 2","EPIC-003: User Authentication & Authorization","DICOM Management & Printing System","","This logic needs to be applied consistently across many services.","US-002","TASK-034",2024-01-01 09:00,2024-01-01 09:00,"C#,DI"
"Implement pgcrypto encryption for PHI columns in DbContext","Research and implement a strategy for transparent column encryption using `pgcrypto`. This will likely involve using `HasPostgresExtension('pgcrypto')` in the model builder and configuring specific PHI properties.","Task","Backlog","Critical","db-dev@project.com","pm@project.com","",16.7,"Database,EF Core,Security,Encryption","Sprint 2","EPIC-005: Data Persistence & Management","DICOM Management & Printing System","","RISK-004: This is a complex and critical security feature. Getting it wrong has severe consequences.","N/A","TASK-048",2024-01-01 09:00,2024-01-01 09:00,"Entity Framework Core,PostgreSQL,pgcrypto,Security"
"Write Integration Test for pgcrypto implementation","Create a specific integration test that saves an entity with PHI, then uses a raw SQL query to inspect the database and assert that the data is encrypted. Then, it re-fetches the entity using EF Core and asserts that the property is correctly decrypted.","Task","Backlog","Critical","qa@project.com","pm@project.com","",10,"Testing,Integration,Security","Sprint 2","EPIC-005: Data Persistence & Management","DICOM Management & Printing System","","","N/A","TASK-050",2024-01-01 09:00,2024-01-01 09:00,"xUnit,Entity Framework Core,SQL"
"Implement Audit Service and Integration","Create an `IAuditService` with a method `LogEventAsync(AuditEventInfo)`. The implementation will save an `AuditLog` entity to the database. Integrate calls to this service at all required points (e.g., user creation, password reset).","Task","Backlog","Critical","dev@project.com","pm@project.com","",12,"Auditing,Security,Backend","Sprint 2","EPIC-009: Security & Compliance","DICOM Management & Printing System","","Requires integration across multiple, disparate features.","US-011","TASK-053",2024-01-01 09:00,2024-01-01 09:00,"C#,Entity Framework Core,DI"
"Develop Audit Trail Viewer UI and ViewModel","Create the `AuditTrailView.xaml` and ViewModel. The UI will have date pickers and a user selector for filtering, a `DataGrid` to display results, and an 'Export' button. The ViewModel will fetch data from the `IAuditService`.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",14.3,"UI,WPF,Auditing","Sprint 2","EPIC-009: Security & Compliance","DICOM Management & Printing System","","","US-011","TASK-082",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#"
"Implement User Management Application Service","Create a `UserService` that contains the business logic for user management. This includes methods for `CreateUserAsync`, `UpdateUserAsync`, `DeleteUserAsync`, and `ResetPasswordAsync`. The service will enforce business rules.","Task","Backlog","Critical","dev@project.com","pm@project.com","",15.5,"Service,Backend,User Management","Sprint 2","EPIC-008: Administration & Configuration","DICOM Management & Printing System","","Contains several critical business rules that must be implemented correctly.","US-010","TASK-037;TASK-053;TASK-082",2024-01-01 09:00,2024-01-01 09:00,"C#,Business Logic"
"Develop User Management View and ViewModel","Create the `UserManagementView.xaml` and `UserManagementViewModel.cs`. The UI will list users and provide 'Add', 'Edit', 'Delete', and 'Reset Password' buttons. The ViewModel will load users from a `IUserService`.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",14.3,"UI,WPF,Admin,User Management","Sprint 2","EPIC-008: Administration & Configuration","DICOM Management & Printing System","","","US-010","TASK-081",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#"
"Implement fo-dicom C-STORE SCP Provider","Create a class that implements `IDicomServiceProvider` and handles the `OnCStoreRequest` event from fo-dicom. This class will be responsible for receiving the DICOM object and saving it to a temporary location.","Task","Backlog","Critical","dicom-dev@project.com","pm@project.com","",10.3,"DICOM,fo-dicom,Backend","Sprint 3","EPIC-004: DICOM Core Functionality (SCP/SCU)","DICOM Management & Printing System","","Requires specific knowledge of the fo-dicom library.","US-006","",2024-01-01 09:00,2024-01-01 09:00,"DICOM,fo-dicom,C#"
"Implement DICOM SCP Hosted Service","Create an `IHostedService` in the Windows Service that uses `DicomServer.Create` from fo-dicom to start a DICOM listener on a configurable port. This service will host the `CStoreScpProvider`.","Task","Backlog","Critical","dicom-dev@project.com","pm@project.com","",8.7,"DICOM,fo-dicom,Windows Service","Sprint 3","EPIC-004: DICOM Core Functionality (SCP/SCU)","DICOM Management & Printing System","","","US-006","TASK-003;TASK-038",2024-01-01 09:00,2024-01-01 09:00,"fo-dicom,Microsoft.Extensions.Hosting"
"Integrate SCP with RabbitMQ for Decoupled DB Insertion","Modify the `CStoreScpProvider`. After saving the DICOM file, it will parse essential metadata, create a `DicomStudyReceived` command, and publish this message to RabbitMQ. The C-STORE success response should be sent immediately after publishing.","Task","Backlog","Critical","dicom-dev@project.com","pm@project.com","",10,"DICOM,RabbitMQ,Architecture","Sprint 3","EPIC-004: DICOM Core Functionality (SCP/SCU)","DICOM Management & Printing System","","","US-006","TASK-018;TASK-038",2024-01-01 09:00,2024-01-01 09:00,"fo-dicom,RabbitMQ,C#"
"Implement DICOM Ingress Consumer","Create a new RabbitMQ consumer hosted service that subscribes to the `dicom-ingress` queue. It will use repositories to perform the database insertion for the DICOM metadata. After successful DB insertion, it will move the DICOM file to its final location.","Task","Backlog","Critical","dev@project.com","pm@project.com","",14.3,"RabbitMQ,Consumer,Database","Sprint 3","EPIC-004: DICOM Core Functionality (SCP/SCU)","DICOM Management & Printing System","","Ensuring atomicity of DB writes and file moves is complex and critical.","US-006","TASK-019;TASK-054;TASK-040",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,Entity Framework Core,C#"
"Write E2E Test for C-STORE Ingestion Pipeline","Create a full end-to-end integration test. The test will use a DICOM SCU tool/library to send a DICOM file to the running service. It will then assert that a message appears in RabbitMQ, is consumed, the correct data appears in the test database, and the file exists in the final storage location.","Task","Backlog","Critical","qa@project.com","pm@project.com","",16.7,"Testing,E2E,DICOM","Sprint 3","EPIC-004: DICOM Core Functionality (SCP/SCU)","DICOM Management & Printing System","","This test coordinates a DICOM client, the Windows Service, RabbitMQ, PostgreSQL, and the file system, making it highly complex.","US-006","TASK-039;TASK-041",2024-01-01 09:00,2024-01-01 09:00,"xUnit,Testcontainers,fo-dicom,C#"
"Develop Query/Retrieve View (UI) in WPF","Create the `QueryRetrieveView.xaml`. This UI will contain text boxes for search criteria (Patient ID, Study Date, Modality), a button to execute the search, a `DataGrid` to display results, and a 'Retrieve' button.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",8,"UI,WPF,DICOM","Sprint 3","EPIC-004: DICOM Core Functionality (SCP/SCU)","DICOM Management & Printing System","","","US-007","",2024-01-01 09:00,2024-01-01 09:00,"WPF,XAML"
"Implement Query/Retrieve ViewModel","Create the `QueryRetrieveViewModel.cs`. It will have properties for search criteria, a collection for search results, and commands for 'Search' and 'Retrieve'. The 'Search' command will call a new `IDicomScuService`.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",12,"ViewModel,WPF,DICOM","Sprint 3","EPIC-004: DICOM Core Functionality (SCP/SCU)","DICOM Management & Printing System","","","US-007","TASK-043",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#,Async/Await"
"Implement C-FIND SCU Logic in DicomScuService","In a `DicomScuService`, implement a method `FindAsync`. This method will use `fo-dicom` to create a `DicomCFindRequest`, send it to a configured remote PACS, and collect the responses.","Task","Backlog","Critical","dicom-dev@project.com","pm@project.com","",12.7,"DICOM,fo-dicom,Backend","Sprint 3","EPIC-004: DICOM Core Functionality (SCP/SCU)","DICOM Management & Printing System","","Requires specific knowledge of fo-dicom SCU classes.","US-007","",2024-01-01 09:00,2024-01-01 09:00,"DICOM,fo-dicom,C#"
"Implement C-MOVE SCU Logic in DicomScuService","In the `DicomScuService`, implement a method `MoveAsync`. This method will take a list of study/series UIDs, create a `DicomCMoveRequest`, and send it to the remote PACS, specifying the local application's AE Title as the destination.","Task","Backlog","Critical","dicom-dev@project.com","pm@project.com","",14.7,"DICOM,fo-dicom,Backend","Sprint 3","EPIC-004: DICOM Core Functionality (SCP/SCU)","DICOM Management & Printing System","","C-MOVE is asynchronous; handling its progress correctly is complex.","US-007","TASK-039;TASK-045",2024-01-01 09:00,2024-01-01 09:00,"DICOM,fo-dicom,C#"
"Develop PACS Configuration View and ViewModel","Create a UI with a `ListView` or `DataGrid` to display configured PACS, and buttons for 'Add', 'Edit', 'Remove', and 'Verify'. The ViewModel will manage the list of PACS and handle the CRUD operations.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",12,"UI,WPF,Admin,DICOM","Sprint 3","EPIC-008: Administration & Configuration","DICOM Management & Printing System","","","US-009","TASK-053",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#"
"Implement DICOM C-ECHO Verification Logic","In the `DicomScuService`, add a new method `VerifyAsync(pacsConfig)`. This method will use `fo-dicom` to create and send a `DicomCEchoRequest`. It should return a boolean result indicating success or failure.","Task","Backlog","Critical","dicom-dev@project.com","pm@project.com","",8.3,"DICOM,fo-dicom,Backend","Sprint 3","EPIC-008: Administration & Configuration","DICOM Management & Printing System","","","US-009","TASK-045",2024-01-01 09:00,2024-01-01 09:00,"DICOM,fo-dicom,C#"
"Implement Inactivity Monitor Service","Create a service that uses a low-level mechanism (e.g., P/Invoke to `GetLastInputInfo` or a global hook) to detect user-wide keyboard and mouse activity. If a timer expires, it will raise an `OnUserInactive` event.","Task","Backlog","Critical","dev@project.com","pm@project.com","",12.7,"Security,Session,WPF","Sprint 3","EPIC-009: Security & Compliance","DICOM Management & Printing System","","RISK: Low-level input hooking is complex and can be brittle.","US-003","",2024-01-01 09:00,2024-01-01 09:00,"C#,P/Invoke,Windows API"
"Develop Lock Screen View and ViewModel","Create a `LockScreenView.xaml` as a modal overlay with a password box and 'Unlock' button. The `LockScreenViewModel` will handle the unlock attempt by calling the `IAuthenticationService`.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",10.3,"Security,Session,UI","Sprint 3","EPIC-009: Security & Compliance","DICOM Management & Printing System","","","US-003","TASK-032",2024-01-01 09:00,2024-01-01 09:00,"WPF,XAML,MVVM"
"Integrate Inactivity Lock into Main Application","In the main application shell, subscribe to the `InactivityMonitor`'s `OnUserInactive` event. In the event handler, display the `LockScreenView` as a modal dialog. Ensure the application state is preserved.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",6,"Security,Session,Integration","Sprint 3","EPIC-009: Security & Compliance","DICOM Management & Printing System","","","US-003","TASK-084;TASK-085",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"PoC: Integrate Vortice.Windows DirectX Host in a WPF Control","Create a minimal proof-of-concept to validate the core technical challenge: hosting a DirectX 11 swap chain within a custom WPF control using `Vortice.Windows`. The PoC should just render a simple colored triangle.","Task","Backlog","Critical","graphics-dev@project.com","pm@project.com","",16.7,"PoC,DirectX,WPF,High-Risk","Sprint 4","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","RISK-001: This is the most complex technical task. It involves interop between managed (WPF) and unmanaged (DirectX) code. Timebox and escalate if PoC fails.","US-012","",2024-01-01 09:00,2024-01-01 09:00,"WPF,DirectX,Vortice.Windows,C#"
"Implement DirectX Rendering Pipeline for Monochrome Images","Based on the PoC, create the `DicomImageView` control. Implement the DirectX pipeline to: create a texture from DICOM pixel data, write a pixel shader for WW/WL adjustment, and render the texture onto a quad that fills the control.","Task","Backlog","Critical","graphics-dev@project.com","pm@project.com","",25.3,"DirectX,WPF,Rendering","Sprint 4","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","RISK-002: Requires shader programming (HLSL) and deep understanding of the DirectX API.","US-012","TASK-055",2024-01-01 09:00,2024-01-01 09:00,"DirectX,HLSL,Vortice.Windows,fo-dicom"
"Implement an ImageLoaderService for Progressive Loading","Create a service that immediately returns a low-resolution, downsampled version of an image/series, and then asynchronously loads the full-resolution data in the background, providing it via a callback or event when ready.","Task","Backlog","Critical","dev@project.com","pm@project.com","",12,"Performance,Async","Sprint 4","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","","US-012","",2024-01-01 09:00,2024-01-01 09:00,"C#,Async/Await,Image Processing"
"Integrate Progressive Loading into Viewer","Modify the `DicomImageView` and its ViewModel to use the `ImageLoaderService`. When a new image is to be displayed, it first requests and renders the low-res preview, then requests the full-res version.","Task","Backlog","Critical","graphics-dev@project.com","pm@project.com","",10,"Performance,WPF,Integration","Sprint 4","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","","US-012","TASK-056;TASK-057",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,DirectX"
"Implement WW/WL adjustment tool","Handle mouse input on the `DicomImageView` control. Convert mouse movement into changes to WW/WL values, and pass these values as parameters to the pixel shader for real-time rendering updates.","Task","Backlog","Critical","graphics-dev@project.com","pm@project.com","",12,"Viewer,Tools,DirectX","Sprint 4","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","","US-013","TASK-056",2024-01-01 09:00,2024-01-01 09:00,"WPF,DirectX,HLSL"
"Implement Zoom and Pan tools","Implement zoom functionality via the mouse wheel and pan functionality via mouse drag. This involves updating a transformation matrix that is passed to the vertex shader.","Task","Backlog","Critical","graphics-dev@project.com","pm@project.com","",14.3,"Viewer,Tools,DirectX","Sprint 4","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","Requires understanding of 2D transformation matrices.","US-013","TASK-056",2024-01-01 09:00,2024-01-01 09:00,"WPF,DirectX,Linear Algebra"
"Implement Rotate and Flip tools","Add buttons to the UI for rotating the image in 90-degree increments and flipping it horizontally/vertically. These actions will also modify the transformation matrix passed to the vertex shader.","Task","Backlog","Critical","graphics-dev@project.com","pm@project.com","",8.3,"Viewer,Tools","Sprint 4","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","","US-013","TASK-060",2024-01-01 09:00,2024-01-01 09:00,"WPF,DirectX,Linear Algebra"
"Implement Health Probe Hosted Service in Windows Service","Create an `IHostedService` that runs on a periodic timer. On each tick, it will perform checks: DB connection, RabbitMQ connection status, queue depths, and disk space. The collected data is stored in a singleton cache.","Task","Backlog","Should Have","dev@project.com","pm@project.com","",14.3,"Monitoring,Health Check,Backend","Sprint 4","EPIC-008: Administration & Configuration","DICOM Management & Printing System","","","US-008","TASK-003",2024-01-01 09:00,2024-01-01 09:00,"C#,Async/Await,Microsoft.Extensions.Hosting"
"Expose Health Status via Named Pipe Endpoint","Extend the Named Pipe server to handle a new request type, e.g., 'GET_HEALTH'. When this request is received, it will read the data from the `ISystemHealthCache`, serialize it to JSON, and send it back to the client.","Task","Backlog","Should Have","dev@project.com","pm@project.com","",6.3,"IPC,Named Pipes,Monitoring","Sprint 4","EPIC-008: Administration & Configuration","DICOM Management & Printing System","","","US-008","TASK-026;TASK-075",2024-01-01 09:00,2024-01-01 09:00,"C#,System.IO.Pipes"
"Develop System Health Dashboard View and ViewModel","Create the `SystemHealthView.xaml` and its ViewModel. The UI will have indicators for each monitored component. The ViewModel will use a timer to periodically call the background service via the Named Pipe client's 'GET_HEALTH' method.","Task","Backlog","Should Have","ui-dev@project.com","pm@project.com","",14.3,"UI,WPF,Monitoring","Sprint 4","EPIC-008: Administration & Configuration","DICOM Management & Printing System","","","US-008","TASK-076",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#"
"Implement Odoo API Client","Create a typed `HttpClient` service using `IHttpClientFactory`. Implement a method to call the Odoo license validation endpoint. It must serialize the request, send a POST request over HTTPS with TLS 1.2+, and deserialize the JSON response.","Task","Backlog","Critical","dev@project.com","pm@project.com","",12,"Integration,API,Licensing","Sprint 4","EPIC-010: External Integrations & Licensing","DICOM Management & Printing System","","RISK-007: Implement a retry policy (e.g., using Polly).","US-004","",2024-01-01 09:00,2024-01-01 09:00,"C#,HttpClientFactory,REST API"
"Implement License Validation State Machine Service","Create a `LicenseValidationService` that orchestrates the startup licensing flow. It will call the Odoo API client. Based on the result, it will determine the application's state (Licensed, GracePeriod, ReadOnly). This service needs to manage the grace period timer.","Task","Backlog","Critical","dev@project.com","pm@project.com","",14.3,"Licensing,Service,Logic","Sprint 4","EPIC-010: External Integrations & Licensing","DICOM Management & Printing System","","Managing persistent state for the grace period adds complexity.","US-004","TASK-087",2024-01-01 09:00,2024-01-01 09:00,"C#,State Machine"
"Integrate License Check into Application Startup and UI","In `App.xaml.cs`, call the `LicenseValidationService` during startup. Store the resulting state in a global service. Use the RBAC mechanism to enforce the 'ReadOnly' mode by adding a new permission check for write actions.","Task","Backlog","Critical","dev@project.com","pm@project.com","",12,"Licensing,Integration,UI","Sprint 4","EPIC-010: External Integrations & Licensing","DICOM Management & Printing System","","","US-004","TASK-034;TASK-088",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,DI"
"Implement an Annotation Overlay Layer","Create a separate WPF `Canvas` that is placed on top of the `DicomImageView`. This layer will render all annotations. It must be transparent and scale/translate in sync with the image's pan/zoom.","Task","Backlog","Should Have","graphics-dev@project.com","pm@project.com","",12,"Viewer,Annotations","Sprint 5","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","RISK-014: Keeping the WPF overlay's coordinate system perfectly synchronized with the DirectX view is complex.","US-014","TASK-060",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM"
"Implement Length and Angle Measurement Tools","Create tool logic that allows the user to draw lines and angles on the annotation overlay. After drawing, the tool must calculate the measurement in real-world units by using the `Pixel Spacing` DICOM tag.","Task","Backlog","Should Have","graphics-dev@project.com","pm@project.com","",16.7,"Viewer,Annotations,Tools","Sprint 5","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","RISK-014: The geometric calculations and conversion from pixel space to real-world units must be precise.","US-014","TASK-062",2024-01-01 09:00,2024-01-01 09:00,"WPF,C#,DICOM"
"Implement GSPS Creation Service","Create a service that takes a collection of annotation objects and uses `fo-dicom` to construct a valid DICOM Grayscale Softcopy Presentation State (GSPS) object. This involves creating the necessary modules and sequences to represent the graphical annotations.","Task","Backlog","Should Have","dicom-dev@project.com","pm@project.com","",16.7,"DICOM,fo-dicom,GSPS","Sprint 5","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","Creating GSPS objects programmatically is a complex, low-level task requiring deep DICOM knowledge.","US-014","TASK-063",2024-01-01 09:00,2024-01-01 09:00,"DICOM,fo-dicom,C#"
"Implement GSPS Loading and Parsing","Enhance the `GspsService` to load and parse an existing GSPS DICOM file. It must extract the graphical annotation data and convert it back into the application's internal representation of annotation objects.","Task","Backlog","Should Have","dicom-dev@project.com","pm@project.com","",14.3,"DICOM,fo-dicom,GSPS","Sprint 5","EPIC-006: DICOM Viewer Implementation","DICOM Management & Printing System","","Parsing the complex structure of GSPS objects is non-trivial.","US-014","TASK-064",2024-01-01 09:00,2024-01-01 09:00,"DICOM,fo-dicom,C#"
"Develop Print Preview View (XAML)","Create the `PrintPreviewView.xaml`. This will be a complex UI with a main preview area, toolbars for configuration (layout selection, margins, orientation), and a thumbnail panel for available images.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",16,"UI,WPF,Printing","Sprint 5","EPIC-007: Printing & PDF Export Subsystem","DICOM Management & Printing System","","This is a rich, interactive UI that is more complex than a standard form.","US-015","",2024-01-01 09:00,2024-01-01 09:00,"WPF,XAML,MVVM"
"Implement Print Preview ViewModel Logic","Create the `PrintPreviewViewModel.cs`. It will manage the state of the print job, including the list of images, the selected layout, page settings, and the data source for the layout grid.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",14.3,"ViewModel,WPF,Printing","Sprint 5","EPIC-007: Printing & PDF Export Subsystem","DICOM Management & Printing System","","","US-015","TASK-066",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#"
"Implement Drag-and-Drop for Image Rearrangement","Implement drag-and-drop functionality on the `ItemsControl` used for the print layout grid. The ViewModel logic will handle reordering the items in the underlying collection.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",12,"UI,WPF,DragAndDrop","Sprint 5","EPIC-007: Printing & PDF Export Subsystem","DICOM Management & Printing System","","Implementing robust drag-and-drop in WPF/MVVM is non-trivial.","US-015","TASK-067",2024-01-01 09:00,2024-01-01 09:00,"WPF,MVVM,C#"
"Implement Print Job Submission Logic in ViewModel","Implement the `PrintCommand` in the `PrintPreviewViewModel`. The command will check service health via Named Pipe, serialize the state into a `PrintJobCommand` DTO, and publish it using the `IMessagePublisher`.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",8.3,"Printing,IPC,ViewModel","Sprint 5","EPIC-007: Printing & PDF Export Subsystem","DICOM Management & Printing System","","","US-016","TASK-018;TASK-027;TASK-067",2024-01-01 09:00,2024-01-01 09:00,"MVVM,RabbitMQ,Named Pipes"
"Implement Print Job Consumer in Windows Service","Create a `PrintJobConsumer` hosted service that listens to the `print-jobs` queue. Upon receiving a message, it will deserialize the `PrintJobCommand`, fetch the necessary DICOM images, and prepare a `PrintDocument` object for printing.","Task","Backlog","Critical","dev@project.com","pm@project.com","",12,"Printing,RabbitMQ,Consumer","Sprint 5","EPIC-007: Printing & PDF Export Subsystem","DICOM Management & Printing System","","","US-016","TASK-019",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,C#"
"Implement Windows Print API Spooling Logic","Create a utility that takes a prepared document object and spools it to a specified Windows printer using the .NET `PrintDialog` and related classes. This logic will handle interacting with the Windows print spooler.","Task","Backlog","Critical","dev@project.com","pm@project.com","",14.3,"Printing,Windows API,Backend","Sprint 5","EPIC-007: Printing & PDF Export Subsystem","DICOM Management & Printing System","","Interacting with the Windows printing system from a background service can have permission issues.","US-016","TASK-070",2024-01-01 09:00,2024-01-01 09:00,"C#,Windows Print API"
"Implement PDF Generation Service using QuestPDF","Create a service that uses the QuestPDF library to programmatically generate a PDF document based on a `PrintJobCommand` DTO. This service will translate the layout, images, and settings into QuestPDF's fluent document structure.","Task","Backlog","Should Have","dev@project.com","pm@project.com","",14.3,"PDF,QuestPDF,Backend","Sprint 5","EPIC-007: Printing & PDF Export Subsystem","DICOM Management & Printing System","","Requires learning the QuestPDF API.","US-017","",2024-01-01 09:00,2024-01-01 09:00,"C#,QuestPDF"
"Add PDF/A compliance and AES-265 Encryption","Extend the `QuestPdfGenerator` to support advanced features. Use QuestPDF's API to set PDF/A-3 compliance metadata. Use the API to apply password protection with AES-256 encryption.","Task","Backlog","Should Have","dev@project.com","pm@project.com","",8.3,"PDF,Security,Compliance","Sprint 5","EPIC-007: Printing & PDF Export Subsystem","DICOM Management & Printing System","","","US-017","TASK-072",2024-01-01 09:00,2024-01-01 09:00,"C#,QuestPDF"
"Implement PDF Export Consumer","Create a `PdfExportConsumer` hosted service that listens on a `pdf-jobs` queue, deserializes the job command, calls the `IPdfGenerator` service, and saves the resulting PDF byte array to the user-specified file path.","Task","Backlog","Should Have","dev@project.com","pm@project.com","",8.3,"PDF,RabbitMQ,Consumer","Sprint 5","EPIC-007: Printing & PDF Export Subsystem","DICOM Management & Printing System","","","US-017","TASK-019;TASK-073",2024-01-01 09:00,2024-01-01 09:00,"RabbitMQ,C#"
"Create and Configure Windows Application Packaging Project","Add a `wapproj` to the solution. Reference the WPF Client project as the entry point. Configure the `Package.appxmanifest` with application details (name, publisher, logo).","Task","Backlog","Critical","devops@project.com","pm@project.com","",4,"Deployment,MSIX","Sprint 6","EPIC-011: Deployment & Installation","DICOM Management & Printing System","","","US-018","TASK-001",2024-01-01 09:00,2024-01-01 09:00,"Visual Studio,MSIX"
"Configure Manifest for Windows Service Registration","Modify the `Package.appxmanifest` XML to include an `<Extensions>` section for registering the background Windows Service. This requires defining the service name, executable path, and startup parameters.","Task","Backlog","Critical","devops@project.com","pm@project.com","",8.7,"Deployment,MSIX,Windows Service","Sprint 6","EPIC-011: Deployment & Installation","DICOM Management & Printing System","","MSIX service registration is a specific, non-trivial XML configuration.","US-018","TASK-090",2024-01-01 09:00,2024-01-01 09:00,"MSIX,XML"
"Set up Code Signing for the MSIX Package","Acquire or generate a test code signing certificate. Configure the packaging project in Visual Studio or the build pipeline to sign the MSIX package during the build process. The application must be signed to be installed.","Task","Backlog","Critical","devops@project.com","pm@project.com","",6.3,"Deployment,MSIX,Security","Sprint 6","EPIC-011: Deployment & Installation","DICOM Management & Printing System","","","US-018","TASK-090",2024-01-01 09:00,2024-01-01 09:00,"MSIX,Code Signing"
"Develop First-Run Configuration View and ViewModel","Create a `FirstRunConfigurationView.xaml` and ViewModel. The UI will be a wizard-like form for entering PostgreSQL and RabbitMQ connection strings. It will have a 'Test Connection' button for each and a 'Save & Continue' button.","Task","Backlog","Critical","ui-dev@project.com","pm@project.com","",12,"UI,WPF,Setup","Sprint 6","EPIC-011: Deployment & Installation","DICOM Management & Printing System","","","US-019","",2024-01-01 09:00,2024-01-01 09:00,"WPF,XAML,MVVM"
"Implement Prerequisite Checker Service","Create a `PrerequisiteChecker` service with methods to test connectivity. `CheckPostgresAsync` will try to connect and run a query to check for the `pgcrypto` extension. `CheckRabbitMqAsync` will try to open a connection.","Task","Backlog","Critical","dev@project.com","pm@project.com","",14.3,"Setup,Infrastructure,Validation","Sprint 6","EPIC-011: Deployment & Installation","DICOM Management & Printing System","","RISK-006: Requires robust error handling for many possible external failure modes.","US-019","",2024-01-01 09:00,2024-01-01 09:00,"C#,PostgreSQL,RabbitMQ"
"Integrate First-Run Check into Application Startup","Modify `App.xaml.cs` to check for a 'configuration complete' flag. If the flag is not set, display the `FirstRunConfigurationView` modally instead of the Login screen. Upon successful configuration, save the connection details and set the flag.","Task","Backlog","Critical","dev@project.com","pm@project.com","",8.3,"Setup,Integration,WPF","Sprint 6","EPIC-011: Deployment & Installation","DICOM Management & Printing System","","","US-019","TASK-014;TASK-093;TASK-094",2024-01-01 09:00,2024-01-01 09:00,"WPF,C#"
"Sprint Hardening and Bug Fixing","Dedicated time for full regression testing, performance profiling, optimization, addressing bugs found in previous sprints, and finalizing documentation (Deployment and Administrator guides).","Task","Backlog","Critical","team@project.com","pm@project.com","",150,"QA,Performance,Documentation,Hardening","Sprint 6","N/A","DICOM Management & Printing System","","This time block is essential for delivering a high-quality, stable product.","N/A","",2024-01-01 09:00,2024-01-01 09:00,"QA,Testing,Technical Writing"