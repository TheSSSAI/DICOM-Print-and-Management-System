"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-1001","Create Solution, Project Structure, and DI for WPF Client","Create the Visual Studio solution with the defined project structure (Client.Wpf, Client.Core, etc.). Configure the `Microsoft.Extensions.Hosting` and DI container in the WPF client's `App.xaml.cs` to register and resolve services, ViewModels, and configuration.","Task","Sprint Backlog","Critical","dev.backend@company.com","product.owner@company.com","2024-11-08","8.3","3","architecture,setup,wpf","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","Core Architecture & System Foundation","EPIC-001","DICOM Management & Printing System","US-000","","Visual Studio,.NET 8,Dependency Injection","Low","Low","The Visual Studio solution is created with all projects correctly referenced. WPF application starts using a configured `IServiceProvider`. A sample ViewModel is successfully resolved and its associated View is displayed.","Code reviewed; Solution structure validated; DI container configured correctly","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","","Successful application launch.","Base for all future client-side code.","Enables all future client development."
"TASK-1002","Implement DI and Hosting for Windows Service","Configure the background process as a Windows Service using `Microsoft.Extensions.Hosting` and the `UseWindowsService()` extension. Set up the DI container to register all service-side components and hosted services.","Task","Sprint Backlog","Critical","dev.backend@company.com","product.owner@company.com","2024-11-08","6.3","2","architecture,backend,service","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","Core Architecture & System Foundation","EPIC-001","DICOM Management & Printing System","US-000","TASK-1001",".NET 8,Windows Service","Low","Low","Project builds an executable that can be installed and run as a Windows Service. The service starts, logs a message, and stops cleanly.","Code reviewed; Service can be installed and started/stopped.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","","Manual installation and start/stop of the service.","Base for all future background processing.","Enables all future backend development."
"TASK-1003","Implement RabbitMQ Publisher/Consumer Abstractions with DLX","Create interfaces and concrete implementations for publishing and consuming messages via RabbitMQ. Implement logic for durable queues, persistent messages, connection resilience, and configure a Dead-Letter Exchange (DLX) and Queue (DLQ) for failed messages.","Task","Sprint Backlog","Critical","dev.backend@company.com","product.owner@company.com","2024-11-08","14.3","5","architecture,ipc,rabbitmq","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","Core Architecture & System Foundation","EPIC-001","DICOM Management & Printing System","US-000","TASK-1002","RabbitMQ,.NET 8","Medium","Low","A client-side service can publish a persistent message to a durable RabbitMQ queue. A service-side `IHostedService` consumes the message. A message that is negatively acknowledged is routed to the DLQ.","Code reviewed; Integration tests passing for publish, consume, and DLQ routing.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","RabbitMQ server must be available.","Integration testing against a live RabbitMQ instance.","Core inter-process communication mechanism.","Enables reliable, asynchronous task processing."
"TASK-1004","Implement Named Pipes IPC for Service Status Checks","Create a Named Pipe server within the Windows Service and a client within the WPF application for synchronous 'PING'/'PONG' status checks.","Task","Sprint Backlog","High","dev.fullstack@company.com","product.owner@company.com","2024-11-08","8.3","3","architecture,ipc,named-pipes","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","Core Architecture & System Foundation","EPIC-001","DICOM Management & Printing System","US-000","TASK-1001,TASK-1002",".NET 8,Named Pipes","Medium","Low","WPF client receives a 'PONG' response from the running service within a 1-second timeout. Client handles a `TimeoutException` correctly when the service is not running.","Code reviewed; Unit tests passing for both connected and disconnected states.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","","Unit and manual testing.","Required for UI features to check service health before queuing tasks.","Provides immediate UI feedback on service availability."
"TASK-1005","Configure Serilog with PHI Masking","Integrate Serilog into both applications with sinks for rolling file and Windows Event Log. Implement a custom Serilog enricher to redact PHI from log messages.","Task","Sprint Backlog","High","dev.backend@company.com","product.owner@company.com","2024-11-08","10.7","3","security,logging,hipaa","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","Core Architecture & System Foundation","EPIC-001","DICOM Management & Printing System","US-000","TASK-1001,TASK-1002","Serilog,C#","Medium","Medium","Both applications write structured logs. A log message containing a property like 'PatientName' is written with the value redacted. Critical errors are written to the Windows Event Log.","Code reviewed; Unit tests for redaction logic passing; Log outputs manually verified.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","","Unit tests and manual log inspection.","Critical for HIPAA compliance.","Ensures compliant and secure logging."
"TASK-2001","Design and Implement User/Role Schema with EF Core","Create EF Core entities for `User`, `Role`, and `PasswordHistory`. Configure the `DbContext` with relationships and constraints. Generate the initial database migration.","Task","Sprint Backlog","Critical","dev.backend@company.com","product.owner@company.com","2024-11-08","6","2","database,ef-core,security","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-1001","EF Core 8,PostgreSQL","Low","Low","EF Core entities are defined. An initial migration is generated successfully. The migration can be applied to a PostgreSQL database.","Migration successfully applied to a test database.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","PostgreSQL server must be available.","Schema validation.","Foundation for all user data.","Establishes user data persistence."
"TASK-2002","Implement BCrypt Hashing and Authentication Service","Create an `IAuthenticationService` with a concrete implementation that uses `BCrypt.Net-Next` to hash and verify passwords.","Task","Sprint Backlog","Critical","dev.fullstack@company.com","product.owner@company.com","2024-11-08","8.3","3","security,backend,authentication","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-2001","C#,BCrypt,EF Core 8","Medium","Medium","A `HashPassword` method returns a valid BCrypt hash. A `VerifyPassword` method returns true for a correct password and false for an incorrect one. The service is covered by unit and integration tests.","Code reviewed; All unit and integration tests passing.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","","Unit and integration tests.","Core security component.","Provides secure password handling."
"TASK-2003","Develop WPF Login Screen View and ViewModel","Create the `LoginView.xaml` using Material Design in XAML and the `LoginViewModel.cs` to handle login attempts.","Task","Sprint Backlog","Critical","dev.frontend@company.com","product.owner@company.com","2024-11-08","10","3","frontend,wpf,ui,authentication","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-001","TASK-2002","WPF,MVVM,XAML","Low","Low","Login screen is displayed at startup. User can enter credentials. Clicking 'Login' calls the `AuthenticationService`. A generic error is shown on failure. On success, the main window is shown.","UI matches design; Login flow works end-to-end.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","","Manual E2E testing of the login process.","Entry point for the application.","Allows users to access the system."
"TASK-2004","Implement Centralized User Session Service","Create a thread-safe singleton service (`IUserSessionService`) to hold the current authenticated user's session, including their ID and role.","Task","Sprint Backlog","Critical","dev.fullstack@company.com","product.owner@company.com","2024-11-08","6","2","backend,security,authorization","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-002","TASK-2003","C#,Dependency Injection","Low","Low","The service correctly stores the logged-in user's identity and role after login. Methods like `IsInRole('Administrator')` return correct boolean values.","Unit tests passing; Service integrated into login flow.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","","Unit tests.","Foundation for all authorization checks.","Enables role-based access control."
"TASK-2005","Develop WPF RBAC Value Converter","Implement a reusable WPF `IValueConverter` that returns `Visibility.Visible` or `Visibility.Collapsed` based on whether the current user has the required role.","Task","Sprint Backlog","High","dev.frontend@company.com","product.owner@company.com","2024-11-08","6.3","2","frontend,wpf,ui,authorization","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","User Authentication & Authorization","EPIC-002","DICOM Management & Printing System","US-002","TASK-2004","WPF,XAML","Low","Medium","The converter can be used in XAML to hide an 'Admin' button when a 'Technician' is logged in. The converter correctly shows the button when an 'Admin' is logged in.","Code reviewed; Manually tested with both roles.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","","Manual testing by logging in as different user roles.","Reusable component for implementing UI-level security.","Visually enforces role-based access control."
"TASK-3001","Implement fo-dicom C-STORE SCP Listener Service","Create an `IHostedService` in the Windows Service that starts a DICOM server using `fo-dicom` to listen for and accept C-STORE requests.","Task","Sprint Backlog","Critical","dev.backend@company.com","product.owner@company.com","2024-11-08","12.3","5","backend,dicom,integration","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","DICOM Network Services & Data Management","EPIC-003","DICOM Management & Printing System","US-100","TASK-1002","fo-dicom,.NET 8,DICOM","High","Medium","The service starts a DICOM listener on a configurable port. It accepts an association from a test DICOM SCU. Upon receiving a DICOM object, it returns a success status.","Integration test passing using a tool like DCMTK's `storescu`.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","Requires DICOM test tools.","Integration testing with an external DICOM SCU.","Core DICOM ingestion component.","Enables the system to receive medical images."
"TASK-3002","Integrate SCP with RabbitMQ for Decoupled Processing","Modify the C-STORE SCP to publish a message to RabbitMQ containing metadata and a temp file path for each received DICOM file.","Task","Sprint Backlog","Critical","dev.backend@company.com","product.owner@company.com","2024-11-22","6","2","backend,dicom,rabbitmq","Sprint 2","Deliver functional DICOM viewer, printing, and admin monitoring.","DICOM Network Services & Data Management","EPIC-003","DICOM Management & Printing System","US-100","TASK-1003,TASK-3001","fo-dicom,RabbitMQ,C#","Medium","Low","Upon receiving a study, a persistent message is published to a durable queue. The C-STORE operation returns success quickly, without waiting for database writes.","Verified that messages appear in RabbitMQ management UI after sending a DICOM study.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-11-11","2024-11-22","100%","","","Integration testing.","Key part of the resilient ingestion architecture.","Decouples image reception from processing for higher throughput."
"TASK-3003","Implement DICOM Database Writer Consumer Service","Create an `IHostedService` to consume messages, persist DICOM metadata to the database, and move the DICOM file to permanent storage.","Task","Sprint Backlog","Critical","dev.backend@company.com","product.owner@company.com","2024-11-22","14.7","8","backend,dicom,database,rabbitmq","Sprint 2","Deliver functional DICOM viewer, printing, and admin monitoring.","DICOM Network Services & Data Management","EPIC-003","DICOM Management & Printing System","US-100","TASK-2001,TASK-3002","EF Core 8,RabbitMQ,C#","High","Medium","The consumer correctly creates database records for a new study. The DICOM file is moved to the correct hierarchical path. The RabbitMQ message is acknowledged on success.","End-to-end test from C-STORE to DB record and file storage is successful.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-11-11","2024-11-22","100%","","","E2E integration testing.","Completes the data ingestion pipeline.","Persists received medical images and metadata."
"TASK-4001","Prototype DirectX Host Control in WPF","Technical spike to create a stable host for a DirectX 11/12 rendering surface within a WPF control using `Vortice.Windows`.","Task","Sprint Backlog","Critical","dev.frontend@company.com","product.owner@company.com","2024-11-08","16.7","8","frontend,wpf,directx,spike,risk","Sprint 1","Establish core architecture, secure authentication, a full DICOM ingestion pipeline, and mitigate viewer risk.","DICOM Viewer & Image Manipulation","EPIC-004","DICOM Management & Printing System","US-200","TASK-1001","WPF,DirectX,Vortice.Windows,C#","Critical","High","A DirectX-rendered surface is visible within a WPF window. The application remains stable when the window is resized. No progressive memory leaks are observed.","Prototype is successful and a report on findings and risks is delivered.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-10-28","2024-11-08","100%","","","Stress testing for stability and memory leaks.","Highest technical risk item. Success is critical for the viewer.","Mitigates the primary technical risk for the core clinical feature."
"TASK-4002","Implement DICOM Pixel Data to GPU Texture Pipeline","Develop the logic to parse monochrome pixel data from a `fo-dicom` object and upload it to a DirectX texture for rendering.","Task","Sprint Backlog","Critical","dev.frontend@company.com","product.owner@company.com","2024-11-22","14.3","8","frontend,wpf,directx,dicom","Sprint 2","Deliver functional DICOM viewer, printing, and admin monitoring.","DICOM Viewer & Image Manipulation","EPIC-004","DICOM Management & Printing System","US-200","TASK-4001","fo-dicom,DirectX,C#","High","High","A monochrome DICOM image can be loaded and its pixel data uploaded to a `ID3D11Texture2D`. The process is asynchronous and does not block the UI thread.","Texture can be rendered to the screen and visually verified.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-11-11","2024-11-22","100%","","","Visual confirmation of rendered output.","Connects DICOM data to the GPU.","Enables images to be rendered."
"TASK-4003","Develop HLSL Shader and Logic for Window/Level","Write an HLSL pixel shader to apply window/level transformations to the monochrome texture and C# logic to pass values to it.","Task","Sprint Backlog","Critical","dev.frontend@company.com","product.owner@company.com","2024-11-22","10.3","5","frontend,directx,hlsl","Sprint 2","Deliver functional DICOM viewer, printing, and admin monitoring.","DICOM Viewer & Image Manipulation","EPIC-004","DICOM Management & Printing System","US-200","TASK-4002","HLSL,DirectX,C#","Medium","Medium","The rendered image correctly applies the default window/level values from the DICOM file. Changing WW/WL values in code updates the image brightness/contrast.","Visual confirmation of rendering changes.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-11-11","2024-11-22","100%","","","Visual testing.","Core image processing logic.","Provides the fundamental window/level image manipulation feature."
"TASK-4004","Implement Interactive Zoom, Pan, and WW/L Tools","Develop the user interaction logic in a WPF overlay to capture mouse input and translate it into transformations for the DirectX renderer.","Task","Sprint Backlog","Critical","dev.frontend@company.com","product.owner@company.com","2024-11-22","12","5","frontend,wpf,directx,ui","Sprint 2","Deliver functional DICOM viewer, printing, and admin monitoring.","DICOM Viewer & Image Manipulation","EPIC-004","DICOM Management & Printing System","US-200","TASK-4003","WPF,C#,Linear Algebra","Medium","Low","Dragging with right button changes window/level. Dragging with left/middle button pans. Mouse wheel zooms. All interactions are smooth.","All tools are functional and performant in manual E2E tests.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-11-11","2024-11-22","100%","","","Manual E2E testing of all viewer tools.","Completes the core viewer functionality.","Makes the DICOM viewer interactive and clinically useful."
"TASK-5001","Implement Print Job Submission Workflow","In the WPF client, implement logic to check service availability via Named Pipes and, if available, publish a serialized print job to a RabbitMQ queue.","Task","Sprint Backlog","High","dev.fullstack@company.com","product.owner@company.com","2024-11-22","8","3","frontend,integration,printing","Sprint 2","Deliver functional DICOM viewer, printing, and admin monitoring.","Printing, PDF, and Email","EPIC-005","DICOM Management & Printing System","US-300","TASK-1003,TASK-1004","WPF,RabbitMQ,Named Pipes","Medium","Low","Clicking 'Print' sends a persistent message to a durable 'print_jobs' queue if service is running. 'Print' button is disabled if service is stopped.","E2E test covering service-up and service-down scenarios is successful.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-11-11","2024-11-22","100%","","","E2E testing.","Initiates the asynchronous printing workflow.","Allows users to submit print jobs without blocking the UI."
"TASK-5002","Implement Print Job Consumer in Windows Service","In the background service, create a RabbitMQ consumer for the 'print_jobs' queue to receive jobs and spool them using the Windows Print API.","Task","Sprint Backlog","High","dev.backend@company.com","product.owner@company.com","2024-11-22","12.3","5","backend,integration,printing","Sprint 2","Deliver functional DICOM viewer, printing, and admin monitoring.","Printing, PDF, and Email","EPIC-005","DICOM Management & Printing System","US-300","TASK-5001","C#,RabbitMQ,Windows Print API","High","Medium","The service consumes a message from the 'print_jobs' queue. A job is successfully sent to the Windows Print Spooler. Errors are caught and the message is NACK'd.","E2E test results in a physical or virtual printout.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-11-11","2024-11-22","100%","","Physical or virtual printer for testing.","E2E testing.","Processes the asynchronous print jobs.","Enables background processing of print jobs."
"TASK-6001","Implement System Health Monitoring Service (Backend)","Create an `IHostedService` in the Windows Service that periodically polls and caches the status of its critical dependencies (DB, RabbitMQ, disk space).","Task","Sprint Backlog","Medium","dev.backend@company.com","product.owner@company.com","2024-11-22","8.3","3","backend,monitoring,health-check","Sprint 2","Deliver functional DICOM viewer, printing, and admin monitoring.","Administration and Monitoring","EPIC-006","DICOM Management & Printing System","US-400","TASK-1002","C#,.NET 8,RabbitMQ.Client","Medium","Low","The service runs on a timer. It correctly detects the status of DB and RabbitMQ connections. It accurately reports available disk space. The latest health status is cached.","Unit tests pass; Log verification confirms polling.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-11-11","2024-11-22","100%","","","Unit tests and log verification.","Gathers data for the admin dashboard.","Enables proactive system monitoring."
"TASK-6002","Develop System Health Dashboard UI and Data Fetching","Create the `SystemHealthView.xaml` and `SystemHealthViewModel.cs` accessible to Admins to display health data requested from the backend service.","Task","Sprint Backlog","Medium","dev.fullstack@company.com","product.owner@company.com","2024-11-22","6","3","frontend,wpf,ui,monitoring","Sprint 2","Deliver functional DICOM viewer, printing, and admin monitoring.","Administration and Monitoring","EPIC-006","DICOM Management & Printing System","US-400","TASK-1004,TASK-2005,TASK-6001","WPF,MVVM","Low","Low","The dashboard is visible only to Admins. It displays status indicators for Service, DB, and RabbitMQ. It shows queue depths and disk space.","Manual E2E test confirms UI updates correctly based on backend status changes.","2024-10-26T09:00:00Z","2024-10-26T09:00:00Z","2024-11-11","2024-11-22","100%","","","Manual E2E testing.","Provides admins with a view into system health.","Presents system health data for easy monitoring."