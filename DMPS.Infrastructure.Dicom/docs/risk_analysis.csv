"risk_id","risk_category","risk_description","probability","impact","risk_score","priority_level","affected_tasks","root_cause","mitigation_strategy","contingency_plan","monitoring_trigger","owner","due_date","status"
"RISK-001","Technical","The core DICOM viewer's reliance on low-level DirectX interop via `Vortice.Windows` is extremely complex. This introduces a high probability of memory leaks, threading issues, and difficult-to-debug crashes which could jeopardize the stability and performance of the application's most critical user-facing feature.","4","5","20","High","EPIC-004: DICOM Viewer & Image Manipulation, especially work items WI-004-01-01, WI-004-01-02, and all of workstream WS-004-02.","High intrinsic complexity of bridging WPF's retained-mode graphics with DirectX's immediate-mode rendering, combined with the manual resource management required by DirectX.","1. Dedicate an early-phase technical spike to prototype and stress-test the rendering pipeline. 2. Implement a strict RAII (Resource Acquisition Is Initialization) pattern using `IDisposable` wrappers for all DirectX objects. 3. Integrate GPU profiling tools into the development process to monitor for resource leaks.","If DirectX interop proves too unstable or time-consuming, the project will pivot to a more managed graphics library like SkiaSharp (via SkiaSharp.Views.WPF) for rendering, accepting a potential performance trade-off for increased stability.","GPU memory usage for the application consistently increases over time during a prolonged testing session. The application experiences any unexplained crashes traced back to the rendering component.","Lead Developer","2025-02-28","Not Started"
"RISK-002","Operational","The system's dependency on pre-installed and correctly configured external services (PostgreSQL 16 with `pgcrypto`, RabbitMQ) creates a significant deployment risk. Customer environment variations and configuration errors could prevent the application from being installed or launched successfully, leading to high support overhead and a negative customer experience.","5","4","20","High","EPIC-008: Installation & Deployment (WI-008-01-02). Affects the entire product's viability in customer environments.","Architectural decision to not bundle dependencies, shifting configuration responsibility to the end-user or their IT department.","1. Create an exhaustive, screenshot-heavy Deployment Guide for configuring prerequisites. 2. Develop a standalone 'Pre-flight Check' command-line utility that customers can run to validate all external dependencies and permissions *before* running the main installer. 3. Ensure the MSIX installer's first-run check provides clear, actionable error messages.","For enterprise customers, develop a deployment package using Docker Compose that provides pre-configured, containerized instances of PostgreSQL and RabbitMQ, reducing the setup burden to installing Docker.","The first-run configuration wizard (WI-008-01-02) fails due to connection or configuration errors during internal testing or customer deployment.","DevOps Engineer","2025-04-30","Not Started"
"RISK-003","Technical","The requirement for column-level encryption using `pgcrypto` will prevent the use of indexes on encrypted PHI columns (e.g., Patient Name). This will lead to severe performance degradation for search and filter operations as the database grows, likely violating the sub-500ms UI response time requirement.","4","4","16","High","WI-007-01-02: Implement Column-Level Encryption with pgcrypto. WI-003-03-02: Develop Local Storage Browser and Search.","A direct conflict between a specific security requirement (column-level encryption) and a core performance requirement (fast searching).","1. Conduct immediate performance benchmarks on a large dataset to quantify the impact. 2. Architect search features to rely on non-PHI, indexed columns (e.g., Study Date, Modality) whenever possible. 3. Investigate if a separate, searchable but non-PHI index can be created (e.g., using a phonetic hash of the patient name).","If performance is unacceptable, the fallback is to remove the `pgcrypto` requirement and instead mandate Full-Disk Encryption (FDE) on the database server (e.g., BitLocker, LUKS) as the primary at-rest encryption control. This change must be approved and documented as a security policy update.","Search queries on the local study browser exceed the 500ms performance target during integration testing with a database of over 1 million records.","Database Architect","2025-03-15","Not Started"
"RISK-004","External","The DICOM C-MOVE functionality relies on an external PACS initiating a connection back to the application's C-STORE SCP. This inbound connection is almost certain to be blocked by firewalls in typical hospital network environments, rendering the entire Query/Retrieve feature non-functional without manual intervention from the hospital's network team.","5","3","15","High","WI-003-02-03: Implement C-MOVE SCU Logic.","The inherent network architecture of the DICOM C-MOVE protocol is incompatible with common enterprise security postures.","1. The Deployment Guide must have a clear, dedicated section on firewall configuration for C-MOVE. 2. The PACS Configuration UI will include a 'Troubleshoot Connectivity' tool that provides the local IP/port and a listener test to help network admins validate their firewall rules.","Implement a DICOM C-GET SCU as an alternative retrieval method. C-GET operates over the existing outbound connection and is more firewall-friendly. This would be offered as a 'fallback' retrieval mode in the UI.","A C-MOVE request is sent successfully, but the background service never receives an incoming C-STORE association from the remote PACS, resulting in a timeout.","Senior Developer","2025-05-31","Not Started"
"RISK-005","Quality","A mistake in the implementation of PHI redaction in logs, audit trail generation, or role-based access control could result in a HIPAA compliance violation. Such a violation could lead to severe legal penalties, reputational damage, and loss of customer trust.","3","5","15","High","WI-001-03-02: Implement PHI Masking for Logging. EPIC-002: User Authentication & Authorization. EPIC-006: Administration and Monitoring.","The complexity of ensuring every code path that handles PHI adheres strictly to multiple, overlapping security requirements (auditing, access control, redaction).","1. Implement a formal code review checklist for all pull requests that modify PHI-handling code. 2. Create a dedicated set of 'misuse case' tests that specifically attempt to violate HIPAA controls (e.g., a Technician trying to access an admin API). 3. Schedule a third-party security audit focused on HIPAA compliance before the first major release.","Maintain a documented Incident Response Plan that outlines the steps for containment, notification, and remediation in the event of a PHI breach or compliance failure.","A manual or automated code scan reveals unredacted PHI in log outputs. A QA test successfully bypasses a role-based security control.","QA Lead","2025-06-30","Not Started"
"RISK-006","Technical","The automatic session lock feature's reliance on a global P/Invoke Windows hook is inherently fragile. It can cause application-wide performance degradation, conflict with other running software (e.g., accessibility tools), and be a source of difficult-to-reproduce crashes.","4","3","12","Medium","WI-002-03-01: Implement Automatic Session Lock Feature.","Using low-level, unmanaged OS hooks to implement application-level logic, which can break abstraction and stability guarantees.","1. Isolate all P/Invoke code within a single, well-documented class. 2. Implement a top-level exception handler around the hook callback to prevent it from crashing the application. 3. Conduct extensive testing on different Windows versions and with other common applications running concurrently.","If the global hook proves too unstable, the feature will be modified to only track user activity when the application window has focus. This is less secure but far more stable and must be clearly documented as a limitation.","Testers report system-wide sluggishness or crashes that are resolved by disabling the session lock feature.","Senior Developer","2025-04-15","Not Started"
"RISK-007","Quality","The DICOM standard has numerous vendor-specific implementations and interpretations. The system may fail to parse, process, or render DICOM files from a specific customer's modality, rendering the application unusable for their primary workflow.","3","4","12","Medium","EPIC-003: DICOM Network Services. EPIC-004: DICOM Viewer. Primarily affects C-STORE SCP (WI-003-01-01) and the rendering pipeline (WI-004-01-02).","Lack of strict standardization in real-world DICOM file generation by medical device vendors.","1. Build an extensive and diverse library of anonymized DICOM files from various vendors, modalities, and transfer syntaxes. 2. Create an automated test suite that continuously attempts to ingest and render every file in this library to catch regressions. 3. Implement permissive parsing logic where possible, logging warnings for non-critical deviations from the standard instead of failing outright.","Establish a clear and simple process for customers to submit anonymized, problematic DICOM files for analysis. Allocate a 'sustainment' budget for developer time to address compatibility issues post-release.","The C-STORE SCP logs a parsing failure or rejects an association. The DICOM viewer fails to render an image that is viewable in other common DICOM viewers (e.g., RadiAnt, Horos).","QA Lead","2025-03-31","Not Started"
"RISK-008","Technical","The decoupled ingestion architecture (C-STORE SCP -> RabbitMQ -> DB Writer) can suffer data integrity failures. For example, a database write could succeed but the subsequent file move could fail (e.g., disk full), resulting in an orphaned DB record pointing to a non-existent file.","3","4","12","Medium","WI-003-01-03: Implement Database Writer Consumer.","Lack of a distributed transaction mechanism that spans both the database and the file system.","1. Implement a more robust ingestion flow: The consumer moves the file to its final destination *before* beginning the database transaction. If the transaction fails, a compensating action attempts to delete the moved file. 2. Make the consumer logic idempotent to safely handle message redelivery. 3. The scheduled data integrity checker (WI-003-03-03) is a critical detective control.","Develop a CLI-based administration tool for reconciling the database with the filesystem, allowing an admin to either delete orphaned records or re-associate them with manually located files.","The data integrity check service logs a discrepancy. A user attempts to open a study and receives a 'File Not Found' error.","Lead Developer","2025-05-15","Not Started"