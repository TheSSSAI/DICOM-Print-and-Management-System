risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
RISK-001,Technical,"Significant development delays and quality issues in the DICOM viewer due to the extreme complexity of integrating native DirectX with managed WPF code using `Vortice.Windows`.",4,5,20,High,"WI-021, WI-022, WI-023, WI-024, EPIC-006",Technical Complexity,"1. Allocate a dedicated developer with proven graphics programming experience to this task. 2. Create a proof-of-concept (PoC) early in the project to validate the approach and identify performance bottlenecks. 3. Budget for external consultation if in-house expertise is insufficient.",Revert to a lower-performance, managed rendering solution (e.g., WPF's `WriteableBitmap`) which would meet basic requirements but fail performance targets. Scope of advanced features would be reduced.,PoC development time exceeds estimates by more than 30%. Core rendering performance targets are not met during initial sprints.,Tech Lead,TBD,Not Started
RISK-002,Technical,"Memory leaks or improper GPU resource management in the custom DirectX viewer control cause application instability, performance degradation, and crashes, especially with large multi-frame studies.",4,5,20,High,WI-021,Technical Complexity,"1. Implement `IDisposable` pattern rigorously on all DirectX objects. 2. Conduct dedicated memory and GPU resource profiling sessions using tools like PerfView or Visual Studio's diagnostic tools. 3. Enforce strict code reviews for all graphics-related code.",Implement an automatic restart mechanism for the viewer component upon crash detection. Provide users with a ""safe mode"" that uses a more stable but less performant rendering path.,Application memory usage consistently grows over time during a single session. Reports of application crashes or freezing when loading large studies.,Tech Lead,TBD,Not Started
RISK-003,Timeline,"Delay in implementing the foundational Inter-Process Communication (IPC) backbone (RabbitMQ & Named Pipes) causes a cascading schedule slip across all dependent features, which is most of the application.",4,4,16,High,"EPIC-002, WI-015, WI-017, WI-027, WI-032",Dependency Chain,"1. Prioritize EPIC-002 in the first sprints. 2. Develop a simplified, in-memory mock of the IPC services to allow parallel development of client and service features. 3. Assign experienced developers to the IPC implementation.",Dedicate additional developer resources to accelerate the IPC work. De-scope non-critical features that rely on the IPC mechanism to protect the core timeline.,Completion of WI-007 or WI-010 is delayed by more than one sprint. Integration tests between client and service fail consistently.,Project Manager,TBD,Not Started
RISK-004,Security,"Incorrect implementation of `pgcrypto` encryption within EF Core results in sensitive PHI being stored in plaintext in the database or, conversely, data becoming unreadable due to key management errors.",3,5,15,High,WI-019,Technical Complexity,"1. Create a specific integration test suite to verify data encryption and decryption at the database level. 2. Document and validate the encryption key management strategy. 3. Conduct a security-focused code review of the `DbContext` configuration.",If implementation fails, switch to application-level encryption, which is less performant and more complex to manage, as a fallback. Immediately trigger a data audit and remediation plan for any data stored incorrectly.,Integration tests for encrypted columns fail. Manual inspection of the database shows plaintext PHI data.,Security Lead,TBD,Not Started
RISK-005,Security,"Role-Based Access Control (RBAC) is only enforced on the client-side UI, allowing a malicious or curious user to bypass controls and perform unauthorized administrative actions by other means (e.g., API calls, memory manipulation).",4,5,20,High,WI-013,Flawed Design,"1. Mandate that every action handler/service method must perform a role check before executing logic. 2. Implement RBAC checks as a cross-cutting concern (e.g., using decorators or middleware if applicable) to ensure consistency. 3. Create integration tests that specifically attempt to call admin functions with a technician's security context.",Immediately ship a patch to implement server-side checks. Revoke all active sessions and trigger a full audit of all actions performed to identify any unauthorized activity.,A security audit or code review reveals a feature endpoint is missing a backend authorization check. Penetration testing successfully bypasses a UI-only control.,Security Lead,TBD,Not Started
RISK-006,Operational,"The installer's prerequisite check is incomplete or flawed, failing to detect environmental issues like firewalls, incorrect permissions, or missing database extensions, leading to post-installation runtime failures that are difficult to diagnose.",4,4,16,High,WI-039,Technical Complexity,"1. Develop a comprehensive checklist of all external dependencies and their configuration requirements (ports, DB extensions, user permissions). 2. Create a standalone ""diagnostics"" tool that users can run to get detailed information about their environment. 3. Log the results of all prerequisite checks in detail during installation.",Provide detailed troubleshooting documentation for common environmental issues. The support team will need to be trained to guide users through manual configuration checks.,A high volume of support tickets related to installation or first-run failures are received. Users report the application fails to start after a seemingly successful installation.,DevOps Lead,TBD,Not Started
RISK-007,External,"The external Odoo licensing API is unreliable, slow, or undergoes breaking changes, preventing users from validating their licenses and causing the application to enter grace period or read-only mode unnecessarily.",3,4,12,Medium,WI-036,WI-037,External Dependency,"1. Implement a resilient HTTP client with retry logic and circuit breakers for the Odoo API. 2. Cache the license validation status locally for a defined period (e.g., 24 hours) to reduce reliance on API availability. 3. Establish a communication channel with the Odoo API provider.",Extend the grace period via a remote configuration toggle if a known, prolonged API outage occurs. Manually issue temporary license keys to affected customers.,Monitoring detects a spike in API error rates (5xx) or timeouts. The application logs show an increase in entries related to grace period activation.,Product Owner,TBD,Not Started
RISK-008,Quality,"Flawed logic in the RabbitMQ consumer (e.g., lack of idempotency, improper error handling) leads to duplicate data processing, message loss, or ""poison messages"" that repeatedly fail and block the queue.",4,4,16,High,"WI-007, WI-008, WI-015, WI-028, WI-029",Technical Complexity,"1. Design all message handlers to be idempotent (i.e., safe to run multiple times with the same input). 2. Implement a robust retry mechanism with exponential backoff before routing to the DLQ. 3. Create thorough integration tests for failure scenarios, including simulating DB outages or corrupted message payloads.",Create a manual or semi-automated process for reprocessing messages from the Dead-Letter Queue (DLQ). Develop a script to clear a blocked queue if necessary.,Messages are consistently appearing in the Dead-Letter Queue. System Health Dashboard shows the main queue depth growing without decreasing.,Tech Lead,TBD,Not Started
RISK-009,Security,"The PHI redaction logic for Serilog is incomplete, failing to catch all patterns of PHI and leaking sensitive data into log files or the Windows Event Log, causing a HIPAA compliance breach.",3,5,15,High,WI-004,Technical Complexity,"1. Use regular expressions for redaction and maintain a central, extensible list of PHI patterns. 2. Implement a dedicated testing suite that asserts that various forms of PHI are correctly redacted from log output. 3. Conduct a peer review of the redaction logic specifically looking for edge cases.",Immediately ship a patch to fix the redaction logic. Create and execute a script to purge or redact PHI from existing log files on affected machines.,A manual or automated audit of log files reveals unredacted PHI. A new type of PHI is introduced into the system without updating the redaction patterns.,Security Lead,TBD,Not Started
RISK-010,Resource,"The project requires specialized and distinct expertise in several complex areas (DirectX, DICOM, RabbitMQ, MSIX, Security). A skills gap or lack of a key person in any of these areas could lead to significant delays and poor quality.",3,5,15,High,"EPIC-002, EPIC-004, EPIC-006, EPIC-009, EPIC-011",Skills Gap,"1. Conduct a skills assessment of the team early on. 2. Promote knowledge sharing through pair programming and documentation for critical components. 3. Pre-approve a budget for specialized training or external consultants.",Hire a short-term contractor with the required expertise. De-scope or simplify the features most affected by the skills gap.,A key developer leaves the project. A work item's velocity is consistently and significantly lower than estimated due to complexity.,Project Manager,TBD,Not Started
RISK-011,Quality,"The setup and maintenance of reliable E2E tests for the WPF application using Appium/WinAppDriver prove to be too time-consuming and brittle, resulting in poor test coverage for user workflows and a higher rate of regressions.",4,3,12,Medium,"Testing Approach",Technical Complexity,"1. Focus E2E tests on critical ""happy path"" scenarios only (e.g., login, search, open study). 2. Rely more heavily on robust integration tests for business logic and component-level UI tests where possible. 3. Assign a developer with specific experience in UI automation.",Switch to a manual regression testing plan for each release, accepting the increased time and risk of human error. Increase the duration of the User Acceptance Testing (UAT) phase.,E2E tests are frequently failing due to timing issues or minor UI changes, not actual bugs. The time spent fixing tests exceeds the time spent developing new features.,QA Lead,TBD,Not Started
RISK-012,Security,"Incorrect implementation of the Windows Credential Manager service leads to insecure storage or retrieval of secrets, or the application failing to start if the Credential Manager is inaccessible.",3,5,15,High,WI-005,Technical Complexity,"1. Use a well-vetted library to interact with the Credential Manager if possible, instead of raw P/Invoke calls. 2. Implement robust error handling for scenarios where a credential cannot be read. 3. Document the exact naming convention and storage location for credentials for easier troubleshooting.",The application will fall back to requiring manual entry of credentials at startup, stored only in memory for the session. This would be a less secure, temporary fix.,The application fails to connect to the database or other services with credential-related errors. Secrets are discovered to be stored insecurely outside of the Credential Manager.,Security Lead,TBD,Not Started
RISK-013,Performance,"The C-STORE SCP's performance degrades under the load of many simultaneous connections, causing DICOM transactions to time out and fail, making the system unreliable for high-volume ingestion.",3,4,12,Medium,WI-014,Performance Bottleneck,"1. Conduct specific load testing on the SCP service using DICOM test tools that can simulate multiple clients. 2. Profile the SCP during load testing to identify bottlenecks (e.g., CPU, memory, thread contention). 3. Optimize the `fo-dicom` configuration for high-throughput scenarios.",Horizontally scale the service by deploying multiple instances behind a load balancer (if the architecture supports it). Implement a throttling mechanism to gracefully reject new associations when under heavy load.,The C-STORE SCP service CPU usage remains at 100% for extended periods. Logs show an increase in DICOM association timeouts and failed transfers.,Tech Lead,TBD,Not Started
RISK-014,Timeline,"The complexity of implementing annotation and measurement tools, particularly the math for real-world unit conversion and rendering the graphics overlay, is underestimated, delaying the entire viewer epic.",4,3,12,Medium,"WI-024, WI-025",Estimation Error,"1. Break down the task into smaller sub-tasks (e.g., one for each tool). 2. Develop a PoC for the most complex measurement tool first to validate the approach. 3. Research and potentially leverage existing open-source libraries for geometric calculations.",Release the viewer with basic tools (e.g., arrows, text) first, and deliver advanced measurement tools in a subsequent release. Simplify the tools to display pixel values instead of real-world units.,The velocity on viewer tool tickets is less than 50% of the initial estimate. Significant bugs are found in the measurement calculation logic during QA.,Project Manager,TBD,Not Started
RISK-015,Operational,"The system's dependency on pre-installed PostgreSQL and RabbitMQ means deployment will fail in production environments that have incorrect versions, missing extensions (`pgcrypto`), or incompatible configurations.",4,4,16,High,"Deployment Method, WI-039",External Dependency,"1. Create a detailed and explicit Deployment Guide specifying exact versions and required configurations for all prerequisites. 2. The installer prerequisite check (WI-039) must be extremely thorough and provide clear, actionable error messages. 3. Consider providing Docker-based deployment scripts for a more controlled environment.",The support team must be equipped with a manual validation script and troubleshooting guide to help customers configure their environment correctly. The first-run experience will be poor.,During UAT or pilot deployments, a high percentage of installations fail due to environment misconfigurations.,DevOps Lead,TBD,Not Started