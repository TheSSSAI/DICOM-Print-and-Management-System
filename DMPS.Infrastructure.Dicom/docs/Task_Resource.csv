"task_id","task_name","primary_skill","secondary_skills","complexity_level","estimated_hours","required_experience","productivity_factor","adjusted_hours","team_size","collaboration_required","dependencies","critical_path","skill_learning_curve","ramp_up_hours","resource_notes","alternative_approach","risk_factors","mitigation_strategy","quality_overhead","review_hours","documentation_hours","testing_coordination","integration_overhead"
"TASK-1001","Create Solution, Project Structure, and DI for WPF Client",".NET 8","Visual Studio,Dependency Injection,WPF","Low","8.3","Mid","1.2","6.9","1","","","true","None","","Foundation task for all client-side development. Should be done by developer familiar with solution setup.","N/A","Incorrect project setup can cause future rework.","Use a standardized solution template; peer review of the initial structure.","1.2","0.8","0.4","","0.5"
"TASK-1002","Implement DI and Hosting for Windows Service",".NET 8","Windows Service","Low","6.3","Mid","1.2","5.3","1","","TASK-1001","true","None","","Foundation task for all background processing.","N/A","Configuration issues with service hosting.","Follow official Microsoft documentation closely.","0.9","0.6","0.3","","0.5"
"TASK-1003","Implement RabbitMQ Publisher/Consumer Abstractions with DLX","RabbitMQ",".NET 8,IPC","Medium","14.3","Senior","1.2","11.9","1","true","TASK-1002","true","Low","2","Core IPC mechanism. Requires solid understanding of message queuing patterns.","Use a simpler message queue system, but RabbitMQ is a requirement.","Incorrect configuration of durability or DLX can lead to message loss.","Implement comprehensive integration tests for all scenarios (success, failure, DLQ).","2.1","1.4","0.7","2","1"
"TASK-1004","Implement Named Pipes IPC for Service Status Checks","Named Pipes",".NET 8,IPC","Medium","8.3","Mid","1","8.3","1","","TASK-1001,TASK-1002","","Medium","3","Requires understanding of synchronous IPC and handling timeouts.","Could use a lightweight HTTP endpoint, but Named Pipes is a requirement.","Potential for deadlocks or threading issues if not implemented carefully.","Thorough unit testing of client and server components, especially timeout and disconnection scenarios.","1.2","0.8","0.4","1","1"
"TASK-1005","Configure Serilog with PHI Masking","Serilog","C#,Security,HIPAA","Medium","10.7","Senior","1.2","8.9","1","","TASK-1001,TASK-1002","true","Low","1","Critical for HIPAA compliance. Requires careful implementation of the redaction logic.","N/A, custom masking is required.","Failure to redact all PHI could lead to a compliance violation.","Create a specific set of unit tests for the redaction enricher with various PHI examples.","1.6","1.1","0.5","1",""
"TASK-2001","Design and Implement User/Role Schema with EF Core","EF Core 8","PostgreSQL,Database Design","Low","6","Mid","1.2","5","1","","TASK-1001","true","None","","Foundation for all user data and authentication.","N/A","Poor schema design could impact future features.","Peer review of the EF Core entities and generated migration script.","0.9","0.6","0.3","",""
"TASK-2002","Implement BCrypt Hashing and Authentication Service","BCrypt","C#,Security,Authentication","Medium","8.3","Mid","1","8.3","1","","TASK-2001","true","Low","1","Core security component. Implementation must be correct.","Use .NET Identity's built-in password hasher, but BCrypt is specified.","Incorrect implementation could create a major security vulnerability.","Strict code review by a senior developer; comprehensive unit tests.","1.2","0.8","0.4","1",""
"TASK-2003","Develop WPF Login Screen View and ViewModel","WPF","MVVM,XAML","Low","10","Mid","1.2","8.3","1","true","TASK-2002","true","None","","Application entry point. Needs to integrate with the Authentication Service.","N/A","Poor UX could frustrate users.","Follow Material Design guidelines; test flow manually.","1.5","1","0.5","1","1"
"TASK-2004","Implement Centralized User Session Service","C#","Dependency Injection,Authorization","Low","6","Mid","1","6","1","","TASK-2003","true","None","","Foundation for all role-based authorization checks.","N/A","If not thread-safe, could cause issues in multi-threaded UI environments.","Implement as a thread-safe singleton and cover with unit tests.","0.9","0.6","0.3","",""
"TASK-2005","Develop WPF RBAC Value Converter","WPF","XAML,Authorization","Low","6.3","Mid","1.2","5.3","1","","TASK-2004","","None","","Reusable component for implementing UI-level security dynamically.","Could control visibility from ViewModel properties, but a converter is more reusable.","Can be misused if not documented properly.","Provide clear code comments and usage examples.","0.9","0.6","0.3","1",""
"TASK-3001","Implement fo-dicom C-STORE SCP Listener Service","fo-dicom",".NET 8,DICOM","High","12.3","Senior","1.2","10.3","1","","TASK-1002","true","Medium","4","Core DICOM ingestion component. Requires specific domain knowledge.","N/A, fo-dicom is required.","DICOM protocol complexities can lead to compatibility issues with different modalities.","Test against a standard DICOM toolkit like DCMTK.","1.8","1.2","0.6","2","1"
"TASK-3002","Integrate SCP with RabbitMQ for Decoupled Processing","fo-dicom","RabbitMQ,C#","Medium","6","Senior","1.2","5","1","","TASK-1003,TASK-3001","true","None","","Key architectural requirement for resilient ingestion.","N/A","If message publication fails, the incoming DICOM file might be lost.","Implement retry logic for publishing and save file to a temporary location until successfully queued.","0.9","0.6","0.3","1","1"
"TASK-3003","Implement DICOM Database Writer Consumer Service","EF Core 8","RabbitMQ,C#,DICOM","High","14.7","Senior","1.2","12.3","1","true","TASK-2001,TASK-3002","true","Low","2","Completes the ingestion pipeline. Logic must be transactional and idempotent.","N/A","Risk of data integrity failure if DB write succeeds but file move fails. See RISK-008.","Make consumer logic idempotent. Move file first, then perform DB transaction with compensating action on failure.","2.2","1.5","0.7","3","2"
"TASK-4001","Prototype DirectX Host Control in WPF","DirectX","WPF,Vortice.Windows,C#","Critical","16.7","Senior","1.2","13.9","1","","TASK-1001","true","High","8","Technical spike to mitigate the highest project risk. Requires specialized graphics programming expertise.","Pivot to SkiaSharp if this spike fails.","High probability of memory leaks, threading issues, and instability. See RISK-001.","Timebox the spike. Focus on stability and memory leak detection over features.","2.5","1.7","2","3",""
"TASK-4002","Implement DICOM Pixel Data to GPU Texture Pipeline","DirectX","fo-dicom,C#","High","14.3","Senior","1.2","11.9","1","","TASK-4001","true","Medium","3","Requires understanding of DICOM pixel data formats and GPU texture formats.","N/A","Performance bottlenecks during texture upload for large series.","Implement asynchronous texture uploading and use progressive loading strategies.","2.1","1.4","0.7","2","1"
"TASK-4003","Develop HLSL Shader and Logic for Window/Level","HLSL","DirectX,C#","Medium","10.3","Senior","1.2","8.6","1","","TASK-4002","true","Medium","4","Core image processing logic executed on the GPU.","Could be done on CPU, but would be much less performant.","Shader bugs can be difficult to debug.","Start with a very simple pass-through shader and add complexity incrementally.","1.5","1","0.5","2","1"
"TASK-4004","Implement Interactive Zoom, Pan, and WW/L Tools","WPF","C#,DirectX,Linear Algebra","Medium","12","Senior","1.2","10","1","","TASK-4003","true","Low","1","Connects user input to the rendering pipeline. Requires understanding of matrix transformations.","N/A","Unresponsive or jerky interactions will lead to poor UX.","Ensure all rendering calculations are off the UI thread. Use performant vector math libraries.","1.8","1.2","0.6","2","1"
"TASK-5001","Implement Print Job Submission Workflow","RabbitMQ","WPF,Named Pipes","Medium","8","Mid","1","8","1","","TASK-1003,TASK-1004","","Low","1","Connects the client to the asynchronous printing backend.","N/A","Failure to check service status could lead to queuing jobs that will never be processed.","Robust error handling for the Named Pipe call.","1.2","0.8","0.4","2","1"
"TASK-5002","Implement Print Job Consumer in Windows Service","Windows Print API","C#,RabbitMQ","High","12.3","Senior","1.2","10.3","1","","TASK-5001","","Medium","4","Complex interaction with unmanaged OS-level printing APIs.","Use a third-party library for printing, but native API is specified.","Printer driver incompatibilities can cause unexpected errors.","Implement robust error handling and logging around all Print API calls. Test with multiple physical and virtual printers.","1.8","1.2","0.6","3","1"
"TASK-6001","Implement System Health Monitoring Service (Backend)","C#",".NET 8,Health Checks","Medium","8.3","Senior","1.2","6.9","1","","TASK-1002","","Low","1","Gathers data for the admin dashboard.","N/A","Polling too frequently could add unnecessary load to the system.","Make the polling interval configurable.","1.2","0.8","0.4","1","0.5"
"TASK-6002","Develop System Health Dashboard UI and Data Fetching","WPF","MVVM","Low","6","Mid","1","6","1","true","TASK-1004,TASK-2005,TASK-6001","","None","","Provides admins with a view into system health.","N/A","Stale data could be misleading.","Include a 'last updated' timestamp on the dashboard.","0.9","0.6","0.3","1","1"