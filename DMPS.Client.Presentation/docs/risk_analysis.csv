risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
RISK-001,Technical,"The development of the custom GPU-accelerated DICOM viewer using DirectX via Vortice.Windows is highly complex and may lead to significant delays, performance issues, or instability on different hardware/driver combinations.",4,5,20,High,"WI-019, WI-020, WI-021","High intrinsic complexity of graphics programming and dependency on low-level hardware interactions.",Build a proof-of-concept (PoC) early in the project (sprint 1-2) to validate the technology choice and identify key challenges. Allocate senior developers with graphics programming experience to this task. Develop a comprehensive test plan covering various GPUs and driver versions.,Develop a simpler software-based rendering fallback option for the Minimum Viable Product (MVP) if the GPU implementation is significantly delayed. This would ensure core viewing functionality is available while the high-performance viewer is completed.,PoC fails to meet performance targets. Frequent hard-to-debug crashes related to GPU rendering are reported during development.,Lead Developer,2025-02-28,Open
RISK-002,Technical,"Incorrect implementation or configuration of the RabbitMQ-based asynchronous communication can lead to lost messages, processing errors, or system deadlocks, particularly with the DLX/DLQ and persistence logic.",3,5,15,High,"WI-003, WI-013, WI-014, WI-023, WI-024","Complexity of ensuring reliability (persistence, durability, acknowledgements, retries) in a distributed messaging system.",Implement robust integration tests using Testcontainers to simulate RabbitMQ broker restarts and network failures. Enforce code reviews for all IPC logic specifically focusing on connection resilience idempotent message consumers and transactional processing.,Develop a manual reprocessing tool for messages in the Dead-Letter Queue (DLQ). Enhance logging to trace a message's entire lifecycle using a correlation ID.,Messages unexpectedly appear in the DLQ during integration testing. The System Health Dashboard (WI-031) shows a consistently high number of unacknowledged messages.,Lead Developer,2025-03-15,Open
RISK-003,Resource,"The project requires a combination of highly specialized skills (DirectX, Vortice.Windows, fo-dicom, pgcrypto, MSIX custom actions) that may not be readily available within the team, leading to quality issues and delays.",3,4,12,Medium,"WI-019, WI-028, WI-034, EPIC-004","Dependency on niche technology stacks that require specific expertise not common among generalist developers.",Conduct a skills assessment at the project's outset. Plan for targeted training pair programming sessions and allocate budget for external consultation if needed. Prioritize early PoCs for high-risk technologies to build team expertise.,Simplify the initial implementation of features requiring niche skills (e.g. basic software rendering instead of GPU simpler installer) and schedule enhancements for a later phase. Re-allocate tasks to leverage existing team strengths.,Development velocity on technically complex work items (e.g. WI-019 WI-028) is significantly lower than estimated. Code quality reviews reveal fundamental misunderstandings of the required technology.,Project Manager,2025-01-31,Open
RISK-004,Timeline,"Numerous critical epics and work items depend on the initial solution scaffolding and DI/Hosting setup (EPIC-001). Any delay in these foundational tasks will have a cascading effect delaying the entire project schedule.",4,4,16,High,"WI-005, WI-006, WI-008, and virtually all subsequent work items","High degree of dependency on core architectural components creating a critical path bottleneck at the start of the project.",Prioritize EPIC-001 in the very first sprint and allocate the most experienced developers to it. Establish clear documented patterns for DI and service registration early to avoid rework. Create skeleton implementations of services for other developers to code against while the core is being finalized.,If the DI setup proves complex in the WPF client initially use a simpler Service Locator pattern in non-critical areas to unblock parallel development with a plan to refactor later.,Work items WI-001 and WI-002 are not completed by the end of the first sprint. Developers on other tasks report being blocked by the lack of a stable application host.,Project Manager,2025-02-15,Open
RISK-005,Quality,"Failure to correctly implement any of the security and HIPAA compliance features (RBAC, auditing, encryption, anonymization, session lock) could lead to a HIPAA violation resulting in severe legal and financial consequences.",2,5,10,Medium,"EPIC-007, WI-010, WI-008, WI-006","Strict and complex regulatory requirements where small implementation errors can lead to major compliance failures.",Incorporate a 'security champion' role into the team responsible for reviewing all security-related user stories. Create a compliance matrix mapping each HIPAA-related requirement to specific work items and acceptance criteria. Conduct a third-party security audit before release.,If a compliance gap is found late in the cycle postpone the release. Develop a detailed remediation plan and communicate transparently with stakeholders.,An internal or external security review identifies a critical vulnerability. Acceptance criteria for a security-related work item (e.g. WI-026 WI-028) cannot be met.,QA Lead,2025-09-30,Open
RISK-006,Operational,"The custom installer with prerequisite checks (WI-034) is likely to be fragile and fail in diverse customer environments due to firewalls permissions or version mismatches.",4,4,16,High,"WI-034, WI-035","Dependency on external system state (PostgreSQL, RabbitMQ) which is outside the installer's direct control making automated validation complex and error-prone.",Develop a standalone environment checker tool that can be run by customers before installation to diagnose potential issues. Provide comprehensive clear documentation for manual configuration of prerequisites. Use Testcontainers in the CI pipeline to test the installer against various clean environments.,Create a 'manual install' guide that bypasses the automated checks allowing a skilled administrator to set up the system. The application itself should provide clear error messages on startup if it cannot connect to its dependencies.,Internal testing of the installer shows a high failure rate on different machine configurations. The first beta deployments result in numerous installation-related support tickets.,DevOps Engineer,2025-08-31,Open
RISK-007,Quality,"The decoupled persistence model for C-STORE (WI-013, WI-014) creates a risk of data inconsistency. A failure after the database write but before the file move could lead to orphaned records or lost patient files.",3,5,15,High,"WI-013, WI-014, WI-018","Lack of atomic transactions across a database and a file system in a decoupled architecture.",Design the persistence consumer to be highly resilient and idempotent. Implement a multi-step transactional-like process with state tracking: 1. Start processing. 2. Write to DB with 'pending' status. 3. Move file. 4. Update DB status to 'complete'. 5. Acknowledge message. The data integrity check (WI-018) must detect 'pending' studies.,Develop an administrative tool or script to reconcile inconsistencies found by the data integrity checker for example by re-processing 'pending' studies or finding orphaned files.,The data integrity check (WI-018) reports discrepancies. Messages are consistently routed to the DLQ from the persistence consumer.,Lead Developer,2025-04-30,Open
RISK-008,External,"A critical bug, breaking change, or lack of support in a key third-party library (fo-dicom, Vortice.Windows, QuestPDF) could block development or introduce instability that is outside the team's direct control.",2,4,8,Medium,"WI-013, WI-015, WI-019, WI-024","Reliance on open-source or third-party components for critical functionality introduces external dependencies and potential support gaps.",Pin dependency versions to specific tested releases. Use a private package repository to control versions. Create an abstraction layer (adapter pattern) around key libraries to insulate the core application logic from the specific implementation making it easier to swap out if necessary.,Allocate time in the project plan for potential upgrades or for patching/forking a library if a critical issue arises. For Vortice.Windows the software rendering fallback (contingency for RISK-001) also serves as a contingency here.,A new version of a key library is released with documented breaking changes. A critical unresolvable bug is discovered in a library that blocks a work item.,Project Manager,2025-02-28,Open
RISK-009,Quality,"The system may fail to meet performance targets (e.g., C-STORE throughput, viewer loading time, UI responsiveness) under real-world load despite passing functional tests.",3,4,12,Medium,"WI-013, WI-019, WI-010","Complex data processing pipelines and UI rendering can introduce performance bottlenecks that are not apparent during single-user testing.",Integrate performance testing into the development cycle not just at the end. Use profiling tools on key features like the DICOM viewer and the C-STORE persistence consumer. Define specific measurable performance acceptance criteria for relevant work items.,Create a dedicated 'performance tuning' sprint to address bottlenecks found during testing. This may involve optimizing database queries refining the rendering pipeline or tuning RabbitMQ consumer settings.,Automated performance tests show a regression in key metrics. User feedback from beta testing reports the application is 'slow' or 'unresponsive'.,QA Lead,2025-07-31,Open
RISK-010,External,"The external Odoo Licensing API may become unavailable due to network issues or vendor outages, potentially locking users out of the application after the 72-hour grace period expires.",3,3,9,Medium,"User Login, Core Application Functionality","Dependency on an external network service for a critical function (license validation) creates a single point of failure.",Thoroughly test the 72-hour grace period and read-only mode logic. Implement a robust retry mechanism with exponential backoff for API calls. Ensure the application securely caches the last known valid license state on the local machine.,Provide a documented procedure for administrators to manually generate a temporary time-limited offline license key in case of a prolonged API outage.,The System Health Dashboard includes a check for the Odoo API and it consistently reports a failure status. The application logs show repeated connection failures to the licensing endpoint.,Lead Developer,2025-05-30,Open
RISK-011,Technical,"The implementation of database encryption using `pgcrypto` (WI-028) can be complex, and improper management of encryption keys could lead to irreversible data loss or a security breach.",3,4,12,Medium,WI-028,"Complexity of integrating application-level logic with database-level encryption and the critical importance of secure key management.",Use EF Core Value Converters to abstract the encryption logic. Store the encryption key securely using the Windows Credential Manager (WI-029), not in configuration files. Document the key backup and recovery process thoroughly.,If `pgcrypto` proves too difficult to manage, use Transparent Data Encryption (TDE) if the database hosting environment supports it, or accept the risk of storing some PHI unencrypted in the database for Phase 1 with stakeholder sign-off.,The installer check for `pgcrypto` fails frequently. Performance benchmarks show an unacceptable overhead from encryption/decryption operations.,Lead Developer,2025-06-30,Open
RISK-012,Timeline,"The high number of tasks estimated with 'High' or 'Critical' complexity suggests a significant risk of underestimation, leading to schedule overruns across multiple epics.",4,3,12,Medium,"WI-002, WI-003, WI-007, WI-008, WI-010, WI-011, WI-012, WI-013, WI-014, WI-015, WI-017, WI-019, WI-020, WI-021, WI-022, WI-023, WI-024, WI-028, WI-030, WI-031, WI-034","Systemic optimism bias in estimating complex, novel, or highly interdependent tasks.",Re-evaluate estimates for all 'High' complexity tasks using a three-point estimation (optimistic, pessimistic, most likely). Build buffer time into the schedule specifically for these high-risk epics. Break down large complex tasks into smaller, more manageable sub-tasks.,De-scope non-critical features from the initial release to protect the core functionality delivery date. Negotiate a revised timeline with stakeholders based on early velocity metrics.,The velocity of the first few sprints is significantly lower than projected. Multiple high-complexity tasks miss their sprint goals.,Project Manager,2025-02-28,Open