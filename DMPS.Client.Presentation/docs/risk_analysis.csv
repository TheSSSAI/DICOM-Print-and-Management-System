risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
RISK-001,Technical,"The high-performance DICOM viewer (WI-017), using low-level DirectX via Vortice.Windows, fails to meet performance targets for large, multi-frame series, resulting in a poor or unusable user experience.",4,5,20,High,"WI-017, WI-029, WI-035","Extreme technical complexity of GPU-accelerated rendering in WPF and potential inexperience with the specific graphics library.","1. Develop a technical spike/prototype for WI-017 in the first sprint to validate the rendering approach with real-world large DICOM studies. 2. Define quantitative performance metrics (e.g., load time < 3s for 500MB, scroll > 30fps) as acceptance criteria. 3. Allocate a developer with demonstrated experience in graphics programming.","If the DirectX approach proves infeasible within the timeline, pivot to a lower-performance but more stable WPF-native rendering solution (e.g., WriteableBitmap) for the initial release and flag the performance enhancement for a subsequent version.","Prototype performance benchmarks failing to meet 80% of the target metrics during the initial spike.","Tech Lead",2025-02-28,Open
RISK-002,Security,"The PHI masking in Serilog logs (WI-003) is incomplete or can be bypassed, leading to sensitive patient data being written to log files or the Windows Event Log, causing a major HIPAA compliance violation.",3,5,15,High,WI-003,"Complexity of identifying all forms of PHI in unstructured log messages; potential for subtle bugs in the custom redaction logic.","1. Implement PHI masking using a well-defined allowlist of properties to log, rather than a denylist to redact. 2. Create a dedicated suite of unit tests with a wide range of log messages containing various PHI formats to validate the masking logic. 3. Conduct a specific code review of the PhiMaskingEnricher.cs by a second senior developer.","In case of a breach, immediately disable the affected log sinks (file/event log), patch the masking logic, and follow the organization's security incident response plan to assess the scope of the data exposure.","Manual and automated code scanning tools detect unmasked PHI patterns in test log outputs.","Security Officer",2025-03-15,Open
RISK-003,Technical,"Misconfiguration of RabbitMQ durability settings (queues, messages) in WI-004 leads to loss of critical data (e.g., incoming study metadata, print jobs) upon a broker restart or crash.",4,4,16,High,"WI-004, WI-014, WI-015, WI-026, WI-027, WI-032","Human error during implementation of the producer and consumer services; incorrect application of RabbitMQ client library settings for persistence and durability.","1. Create an automated integration test that publishes a persistent message to a durable queue, restarts the RabbitMQ container/service, and then verifies the message is still present and consumable. 2. Use a configuration-driven approach for queue/exchange settings to ensure consistency. 3. Document the required RabbitMQ setup in the Deployment Guide (WI-037).","Automated restart integration test fails; a manual check of RabbitMQ management UI shows queues or messages are not marked as durable ('D').","Lead Developer",2025-03-10,Open
RISK-004,Resource,"The project requires specialized expertise in multiple niche technologies (DirectX, fo-dicom, MSIX, pgcrypto, RabbitMQ) that are not available within the development team, leading to slow progress, poor implementation quality, and schedule delays.",4,4,16,High,"WI-017, WI-014, WI-034, WI-023, WI-004","Overly ambitious technology stack relative to the team's skillset; failure to account for the learning curve of unfamiliar, complex libraries.","1. Conduct a skills matrix assessment at project kickoff. 2. Allocate budget for targeted training or for hiring a short-term consultant with expertise in the most critical area (e.g., DirectX for WI-017). 3. Prioritize building technical spikes for the highest-risk technologies early.","Velocity on tasks involving key technologies (e.g., WI-017, WI-014) is less than 50% of the initial estimate for two consecutive sprints.","Project Manager",2025-02-15,Open
RISK-005,Timeline,"The effort for the 'Critical' complexity UI tasks, specifically the DICOM Viewer (WI-017) and the interactive Print Preview (WI-029), is severely underestimated, causing a major project delay that impacts all subsequent dependent features.",5,4,20,High,"WI-017, WI-029, WI-035, WI-030, WI-031, WI-032","Failure to appreciate the depth of complexity in custom rendering, state management, and user interaction logic required for rich client applications.","1. Break down WI-017 and WI-029 into smaller, more granular user stories/tasks with independent estimations. 2. Time-box the initial development of the core functionality and de-scope non-essential 'nice-to-have' features (e.g., free rotation, advanced branding) to a later phase if necessary. 3. Use prototyping to get early feedback and clarify requirements.","The core functionality of either WI-017 or WI-029 is not completed by its planned sprint deadline, with more than 50% of the work remaining.","Project Manager",2025-04-30,Open
RISK-006,External,"The third-party `fo-dicom` library (REQ-1-009) has a critical bug or is missing a feature essential for implementing core functionalities like GSPS creation (WI-035) or C-MOVE SCU (WI-016), blocking development.",3,5,15,High,"WI-014, WI-016, WI-017, WI-018, WI-021, WI-025, WI-035","Reliance on a single, open-source library for a mission-critical domain; the library may not be actively maintained or support specific edge cases of the DICOM standard.","1. Before committing to the library, build proof-of-concept applications for the most complex DICOM operations (GSPS creation, C-MOVE). 2. Assign a developer to become the team's `fo-dicom` subject matter expert, capable of debugging library issues or contributing patches upstream. 3. Identify alternative DICOM libraries as a backup research task.","A blocking issue is identified in the library's GitHub issues page with no resolution in sight, or the proof-of-concept for a critical feature fails.","Tech Lead",2025-03-20,Open
RISK-007,Quality,"The planned UI automation using Appium/WinAppDriver for the complex WPF views is too brittle and time-consuming to maintain, resulting in inadequate regression testing coverage and a high rate of UI-related bugs in later stages.",4,3,12,Medium,"WI-006, WI-010, WI-016, WI-017, WI-029","WPF UI automation is notoriously difficult. Dynamic UIs, custom controls (like the DICOM viewer), and timing issues make automated tests unreliable.","1. Adopt a 'Test Pyramid' strategy, focusing heavily on robust unit and integration tests for ViewModels and services. 2. For UI testing, focus automation on a small number of critical 'happy path' E2E scenarios. 3. Supplement with a structured manual/exploratory testing plan for complex UI interactions (e.g., drag-and-drop, viewer tools).","The time spent fixing broken UI tests exceeds the time spent creating new ones for a sprint; more than 20% of UI test runs fail due to non-product-related issues.","QA Lead",2025-05-15,Open
RISK-008,Operational,"The MSIX installer (WI-034) fails during deployment in customer environments due to variations in OS configuration, permissions, or issues with the prerequisite (PostgreSQL/RabbitMQ) connection checks.",4,3,12,Medium,WI-034,"Complexity of creating a robust installer that must interact with external services and system settings; insufficient testing across different Windows versions and configurations.","1. The prerequisite check must provide detailed, user-friendly error messages (e.g., 'Connection to PostgreSQL at host:port failed. Check firewall rules.'). 2. Create a comprehensive deployment checklist in the Deployment Guide (WI-037). 3. Test the installer on clean virtual machine images for all supported Windows versions (Win 10 20H2+, Win 11).","The installation fails during internal QA on a target environment that is not the developer's machine.","DevOps Engineer",2025-07-10,Open
RISK-009,Technical,"The implementation of the automatic session lock (WI-013) using low-level Windows hooks (P/Invoke) introduces instability, causing the application to crash or behave unpredictably, impacting overall application reliability.",3,4,12,Medium,WI-013,"P/Invoke and global system hooks are inherently unsafe and can conflict with other applications or OS updates, making them difficult to debug and maintain.","1. Isolate the hook monitoring logic in a separate, fault-tolerant service if possible. 2. Investigate modern, less intrusive .NET APIs for detecting user idle state before resorting to low-level hooks. 3. Implement extensive, long-duration stability testing early in the development cycle for this feature.","If the hook-based approach proves unstable, the contingency is to disable the automatic lock feature and clearly document this as a manual security procedure (user must lock their own workstation) to meet compliance, flagging the feature for a future robust fix.","Application crashes are traced back to the InactivityMonitorService.cs during QA testing.","Lead Developer",2025-04-25,Open
RISK-010,Technical,"The implementation of database-level encryption using pgcrypto (WI-023) introduces significant performance degradation on read/write operations for PHI columns, making the application unresponsive during data-intensive tasks like searching or loading studies.",3,4,12,Medium,WI-023,"Encrypting/decrypting data on every query adds CPU overhead to the database server. This overhead was not accounted for in performance planning.","1. Conduct performance benchmark tests on the database with a realistic data load (e.g., 1 million rows) comparing encrypted vs. unencrypted PHI columns. 2. Optimize queries to minimize operations on encrypted fields (e.g., avoid using them in WHERE clauses where possible). 3. Ensure the database server meets recommended hardware specs that account for the encryption overhead.","If performance is unacceptable, investigate alternative strategies such as transparent data encryption (TDE) if available, or accept the performance hit and adjust NFRs, ensuring the hardware recommendations in the Deployment Guide are increased.","Benchmark tests show a >30% performance degradation on key queries after encryption is implemented.","Database Architect",2025-06-10,Open
RISK-011,Operational,"The data migration utility (WI-036) is flawed, leading to data corruption, incomplete data transfer, or poor performance, jeopardizing the go-live transition from the legacy system.",4,5,20,High,WI-036,"Complexity of mapping legacy data schemas to the new schema; potential for data quality issues in the source system; inadequate validation and logging in the utility.","1. Develop the utility with a 'dry run' mode that simulates the entire migration and generates a validation report without committing any changes. 2. Implement robust, transactional batch processing to handle failures gracefully. 3. The validation report (ETLV) must be comprehensive, comparing record counts, and checksums where possible. 4. Perform multiple trial migrations on a staging environment before the production cutover.","If the utility proves unreliable, the contingency is to perform the migration using a set of well-documented, manually executed SQL scripts and file copy operations, increasing the cutover time but ensuring data integrity.","The validation report from a 'dry run' on a full data set shows a data mismatch of >0.1% or the migration process takes longer than the planned downtime window.","Data Migration Specialist",2025-07-20,Open
RISK-012,Timeline,"A delay in finalizing and implementing the core database schemas (WI-011, WI-019) creates a cascading schedule failure, as numerous high-complexity work items across all epics are dependent on them.",5,4,20,High,"WI-007, WI-009, WI-010, WI-015, WI-020, WI-021, WI-022, WI-023, WI-035, WI-036","Underestimation of the effort required to define a stable, performant, and compliant database schema; late-breaking requirements changes affecting the data model.","1. Prioritize the finalization of the User/Role and DICOM data models in the very first project workshops. 2. Implement the EF Core entities and initial migrations (WI-011, WI-019) in the first sprint, even if they are simple skeletons, to unblock dependent teams. 3. Enforce a stricter change control process for any modifications to the core tables after the first month of development.","If the schema remains unstable, a dedicated 'data model task force' will be formed to accelerate decisions. Non-essential fields or tables will be deferred to a later migration to unblock critical path items.","The EF Core migrations for WI-011 and WI-019 are not merged and stable by the end of the second sprint.","Tech Lead",2025-03-01,Open
RISK-013,Technical,"The decoupled DICOM ingestion process (WI-014/WI-015) suffers from race conditions or non-atomic operations, leading to orphaned DICOM files on disk (DB write fails) or database records pointing to non-existent files (file move fails), causing data integrity issues.",3,5,15,High,"WI-014, WI-015","The operation is not fully transactional because file system moves are not part of the database transaction. A system crash between the DB commit and the file move can leave the system in an inconsistent state.","1. The consumer logic must be idempotent (re-processing the same message doesn't create duplicate data). 2. Implement a two-phase commit-like process: a) Write DB record with a 'pending' status. b) Move the file. c) Update DB record to 'complete' status. 3. Create a cleanup background job that scans for 'pending' records older than X hours and attempts to resolve them or flags them for manual review.","If consistency issues persist, the fallback is to move the file to its final destination *before* the database transaction begins. This risks having orphaned files if the DB write fails, but a cleanup job to find files not in the DB is simpler to implement than resolving partial DB states.","Integration tests that simulate a crash after the DB write but before the file move consistently show data inconsistencies that are not resolved by the retry mechanism.","Lead Developer",2025-04-10,Open
RISK-014,Security,"The Audit Trail system (WI-020) is not implemented comprehensively, missing the logging of key security events (e.g., failed login attempts, viewing PHI), which results in a failure to meet HIPAA audit requirements.",3,5,15,High,WI-020,"Lack of a centralized, enforced auditing pattern, leading developers to forget to add audit calls for new features; requirements for what constitutes an 'auditable event' are not clearly defined.","1. Create a checklist of all auditable events defined in the requirements (REQ-1-047, REQ-1-048, etc.) and map them to specific work items. 2. Implement auditing as a cross-cutting concern using decorators or middleware where possible to make it automatic. 3. Make 'Verify audit log entry is created' a mandatory part of the acceptance criteria for all relevant user stories.","If manual auditing calls are proving unreliable, refactor the architecture to use an event-sourcing pattern for critical state changes, where the audit log is the source of truth, not a side effect.","A feature is delivered and passes QA, but a later review shows that no audit trail is generated for its primary actions.","Security Officer",2025-05-30,Open